inputs:
  build_image_tag:
    type: string
    required: true
  build_image_repo:
    type: string
    required: true
  build_image_mobile_sha:
    type: string
    required: true
  build_image_sha:
    type: string
    required: true

  repo_ref:
    type: string
  repo_ref_sha:
    type: string
  repo_ref_name:
    type: string

  trusted_bots:
    type: string
    default: |
      trigger-release-envoy[bot]

  check_mobile_run:
    type: boolean
    default: true

outputs:
  build_image_ubuntu:
    value: ${{ steps.build.outputs.build_image_ubuntu }}
  build_image_ubuntu_mobile:
    value: ${{ steps.build.outputs.build_image_ubuntu_mobile }}

  mobile_android_build:
    value: ${{ steps.should_run.outputs.mobile_android_build }}
  mobile_android_build_all:
    value: ${{ steps.should_run.outputs.mobile_android_build_all }}
  mobile_android_tests:
    value: ${{ steps.should_run.outputs.mobile_android_tests }}
  mobile_asan:
    value: ${{ steps.should_run.outputs.mobile_asan }}
  mobile_cc_tests:
    value: ${{ steps.should_run.outputs.mobile_cc_tests }}
  mobile_compile_time_options:
    value: ${{ steps.should_run.outputs.mobile_compile_time_options }}
  mobile_coverage:
    value: ${{ steps.should_run.outputs.mobile_coverage }}
  mobile_formatting:
    value: ${{ steps.should_run.outputs.mobile_formatting }}
  mobile_ios_build:
    value: ${{ steps.should_run.outputs.mobile_ios_build }}
  mobile_ios_build_all:
    value: ${{ steps.should_run.outputs.mobile_ios_build_all }}
  mobile_ios_tests:
    value: ${{ steps.should_run.outputs.mobile_ios_tests }}
  mobile_release_validation:
    value: ${{ steps.should_run.outputs.mobile_release_validation }}
  mobile_tsan:
    value: ${{ steps.should_run.outputs.mobile_tsan }}
  repo_ref:
    value: ${{ steps.context.outputs.repo_ref }}
  repo_ref_name:
    value: ${{ steps.context.outputs.repo_ref_name }}
  repo_ref_pr_number:
    value: ${{ steps.context.outputs.repo_ref_pr_number }}
  repo_ref_sha:
    value: ${{ steps.context.outputs.repo_ref_sha }}
  repo_ref_sha_short:
    value: ${{ steps.context.outputs.repo_ref_sha_short }}
  repo_ref_title:
    value: ${{ steps.context.outputs.repo_ref_title }}
  trusted:
    value: ${{ steps.trusted.outputs.trusted }}
  version_dev:
    value: ${{ steps.context.outputs.version_dev }}
  version_patch:
    value: ${{ steps.context.outputs.version_patch }}

runs:
  using: composite
  steps:
  # Pull request/targets are _never_ trusted.
  #
  # For dispatch events, only specified bots are trusted.
  #
  # Commits to a branch are always trusted.
  #
  # If code is trusted its not allowed to check out any
  # non-ancestor commit of a stable branch.
  #
  # Untrusted code can check out any commit.
  - id: trusted
    name: 'Check if its a trusted run'
    run: |
      TRUSTED=1
      ACTOR="${{ github.actor }}"
      if [[ "$ACTOR" =~ \[bot\] ]]; then
          TRUSTED_BOT=
          TRUSTED_BOTS=(${{ inputs.trusted_bots }})
          for bot in ${TRUSTED_BOTS[@]}; do
              if [[ "$bot" == "$ACTOR" ]]; then
                  # Trusted bot account, ie non-PR
                  TRUSTED_BOT=1
                  break
              fi
          done
          if [[ -z "$TRUSTED_BOT" ]]; then
              echo "Not trusted bot account"
              TRUSTED=
          fi
      fi
      if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "pull_request_target" ]]; then
          echo "Not trusted pull_request event"
          TRUSTED=
      fi
      if [[ -n "$TRUSTED" ]]; then
          echo "trusted=true" >> "$GITHUB_OUTPUT"
      else
          echo "trusted=false" >> "$GITHUB_OUTPUT"
      fi
    shell: bash

  # If we are in a trusted CI run then the provided commit _must_ be either the latest for
  # this branch, or an antecdent.
  - run: |
      if ! git merge-base --is-ancestor "${{ inputs.repo_ref }}" HEAD &> /dev/null; then
      echo "Provided Envoy ref (${{ inputs.repo_ref }}) is not an ancestor of current branch" >&2
          exit 1
      fi
      git checkout "${{ inputs.repo_ref }}"
    if: ${{ steps.trusted.outputs.trusted == 'true' && inputs.repo_ref }}
    name: Check provided ref
    shell: bash

  - if: ${{ inputs.check_mobile_run != 'false' }}
    id: should_run
    name: 'Check what to run'
    run: ./mobile/tools/what_to_run.sh
    shell: bash

  - id: context
    name: 'CI context'
    run: |
      VERSION_DEV="$(cat VERSION.txt | cut -d- -f2)"
      VERSION_PATCH="$(cat VERSION.txt | cut -d- -f1 | rev | cut -d. -f1 | rev)"
      # TODO: strip merge from pr names
      REF_NAME=${{ inputs.repo_ref_name || github.ref_name }}
      if [[ "$REF_NAME" =~ ^refs/pull/ ]]; then
          REF_NAME="${REF_NAME:10}"
          REF_PR_NUMBER="$(echo "${REF_NAME}" | cut -d/ -f1)"
      elif [[ "${{ github.event_name }}" == 'pull_request' ]]; then
          REF_PR_NUMBER="$(echo "${REF_NAME}" | cut -d/ -f1)"
      fi
      echo "SET PR NUMBER: ${REF_PR_NUMBER}"

      REF="${{ steps.trusted.outputs.trusted != 'true' && inputs.repo_ref || '' }}"
      REF_SHA=${{ inputs.repo_ref_sha || github.event.pull_request.head.sha || github.sha }}
      REF_SHA_SHORT="${REF_SHA:0:7}"
      REF_TITLE=(
          "${{ steps.trusted.outputs.trusted == 'true' && 'postsubmit' || 'pr' }}/"
          "${REF_NAME}"
          "@${REF_SHA_SHORT}")
      REF_TITLE="$(printf %s "${REF_TITLE[@]}" $'\n')"
      {
          echo "repo_ref=$REF"
          echo "repo_ref_name=$REF_NAME"
          echo "repo_ref_pr_number=$REF_PR_NUMBER"
          echo "repo_ref_sha=$REF_SHA"
          echo "repo_ref_title=$REF_TITLE"
          echo "repo_ref_sha_short=$REF_SHA_SHORT"
          echo "version_dev=$VERSION_DEV"
          echo "version_patch=$VERSION_PATCH"
      } >> "$GITHUB_OUTPUT"
    shell: bash

  - id: build
    name: 'Check current build images'
    run: |
      {
          echo "build_image_ubuntu=${BUILD_IMAGE_UBUNTU_REPO}:${BUILD_IMAGE_UBUNTU}@sha256:${BUILD_IMAGE_UBUNTU_SHA}"
          echo "build_image_ubuntu_mobile=${BUILD_IMAGE_UBUNTU_REPO}:mobile-${BUILD_IMAGE_UBUNTU}@sha256:${BUILD_IMAGE_UBUNTU_MOBILE_SHA}"
      } >> "$GITHUB_OUTPUT"
    env:
      # TODO(phlax): derive these from a config file
      BUILD_IMAGE_UBUNTU_REPO: ${{ inputs.build_image_repo }}
      BUILD_IMAGE_UBUNTU: ${{ inputs.build_image_tag }}
      BUILD_IMAGE_UBUNTU_SHA: ${{ inputs.build_image_sha }}
      BUILD_IMAGE_UBUNTU_MOBILE_SHA: ${{ inputs.build_image_mobile_sha }}
    shell: bash
