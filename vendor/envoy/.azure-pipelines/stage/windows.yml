
parameters:

# Auth
- name: authGCP
  type: string
  default: ""

- name: runBuild
  displayName: "Run build"
  type: string
  default: true

jobs:
- job: release
  displayName: Build and test
  condition: |
    and(not(canceled()),
        eq(${{ parameters.runBuild }}, 'true'))
  timeoutInMinutes: 180
  pool:
    vmImage: "windows-2019"
  steps:
  - task: Cache@2
    inputs:
      key: '"windows.release" | $(cacheKeyBazel)'
      path: $(Build.StagingDirectory)/repository_cache
    continueOnError: true
  - bash: ci/run_envoy_docker.sh ci/windows_ci_steps.sh
    displayName: "Run Windows msvc-cl CI"
    env:
      CI_TARGET: "windows"
      ENVOY_DOCKER_BUILD_DIR: "$(Build.StagingDirectory)"
      ENVOY_RBE: "true"
      BAZEL_BUILD_EXTRA_OPTIONS: "--config=remote-ci --config=rbe-google --config=remote-msvc-cl --jobs=$(RbeJobs) --flaky_test_attempts=2"
      GCP_SERVICE_ACCOUNT_KEY: ${{ parameters.authGCP }}

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: "**/bazel-out/**/testlogs/**/test.xml"
      testRunTitle: "windows"
      searchFolder: $(Build.StagingDirectory)/tmp
    timeoutInMinutes: 10
    condition: not(canceled())
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.StagingDirectory)/envoy"
      artifactName: windows.release
    timeoutInMinutes: 10
    condition: not(canceled())

- job: docker
  displayName: Build Docker image
  condition: and(not(canceled()), succeeded(), ne(stageDependencies.env.repo.outputs['changed.mobileOnly'], 'true'), ne(stageDependencies.env.repo.outputs['changed.docsOnly'], 'true'), ne(stageDependencies.env.repo.outputs['changed.examplesOnly'], 'true'))
  strategy:
    matrix:
      windows2019:
        imageName: 'windows-2019'
        windowsBuildType: "windows"
        windowsImageBase: "mcr.microsoft.com/windows/servercore"
        windowsImageTag: "ltsc2019"
      windows2022:
        imageName: 'windows-2022'
        windowsBuildType: "windows-ltsc2022"
        windowsImageBase: "mcr.microsoft.com/windows/nanoserver"
        windowsImageTag: "ltsc2022"
  dependsOn: ["release"]
  timeoutInMinutes: 120
  pool:
    vmImage: $(imageName)
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: current
      artifactName: "windows.release"
      itemPattern: "windows.release/envoy_binary.tar.gz"
      downloadType: single
      targetPath: $(Build.StagingDirectory)
  - bash: |
      set -e
      # Convert to Unix-style path so tar doesn't think drive letter is a hostname
      STAGING_DIR="/$(echo '$(Build.StagingDirectory)' | tr -d ':' | tr '\\' '/')"
      mkdir -p windows/amd64 && tar zxf "${STAGING_DIR}/windows.release/envoy_binary.tar.gz" -C ./windows/amd64
      ci/docker_ci.sh
    workingDirectory: $(Build.SourcesDirectory)
    env:
      CI_BRANCH: $(Build.SourceBranch)
      CI_SHA1: $(Build.SourceVersion)
      DOCKERHUB_USERNAME: $(DockerUsername)
      DOCKERHUB_PASSWORD: $(DockerPassword)
      WINDOWS_BUILD_TYPE: $(windowsBuildType)
      WINDOWS_IMAGE_BASE: $(windowsImageBase)
      WINDOWS_IMAGE_TAG: $(windowsImageTag)

- job: released
  displayName: Complete
  dependsOn: ["release", "docker"]
  pool:
    vmImage: $(agentUbuntu)
  # This condition ensures that this (required) job passes if all of
  # the preceeding jobs either pass or are skipped
  # adapted from:
  #   https://learn.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#job-to-job-dependencies-within-one-stage
  condition: |
    and(
      eq(variables['Build.Reason'], 'PullRequest'),
      in(dependencies.release.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
      in(dependencies.docker.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'))
  steps:
  - checkout: none
  - bash: |
      echo "windows released"
