#!/usr/bin/env python3
import os
import re
import json
import yaml

bssl_compat_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
bssl_err_h = os.path.join(bssl_compat_dir, "include", "openssl", "err.h")
ossl_err_h = os.path.join(bssl_compat_dir, "include", "ossl", "openssl", "err.h")
ERR_GET_REASON_c = os.path.join(bssl_compat_dir, "source", "ERR_GET_REASON.c")

includes = set()

bssl_libs = dict()
with open(bssl_err_h, 'r') as f:
    for line in f.readlines():
        match = re.search(r'(^ *)ERR_LIB_([A-Z0-9_]*)( = 1)?,$', line)
        if match is not None:
            bssl_lib = match.group(2)
            bssl_libs[bssl_lib] = set()
            fn = os.path.join(bssl_compat_dir, "include", "openssl", bssl_lib.lower() + '.h')
            if os.path.exists(fn):
                includes.add(os.path.relpath(fn, os.path.join(bssl_compat_dir, "include")))
                with open(fn, 'r') as rf:
                    for rline in rf.readlines():
                        rmatch = re.search('^#\s*define\s+(' + bssl_lib + '_R_[A-Z0-9_]*)\s+\d+\s*$', rline)
                        if rmatch is not None:
                            bssl_libs[bssl_lib].add(rmatch.group(1))

ossl_libs = dict()
with open(ossl_err_h, 'r') as f:
    for line in f.readlines():
        match = re.search(r'^#\s*define\s+ossl_ERR_LIB_([A-Z0-9_]*)\s+\d+\s*$', line)
        if match is not None:
            ossl_lib = match.group(1)
            ossl_libs[ossl_lib] = set()
            fn = os.path.join(bssl_compat_dir, "include", "ossl", "openssl", ossl_lib.lower() + 'err.h')
            if os.path.exists(fn):
                includes.add(os.path.relpath(fn, os.path.join(bssl_compat_dir, "include")))
                with open(fn, 'r') as rf:
                    for rline in rf.readlines():
                        rmatch = re.search('^#\s*define\s+ossl_(' + ossl_lib + '_R_[A-Z0-9_]*)\s+\d+\s*$', rline)
                        if rmatch is not None:
                            ossl_libs[ossl_lib].add(rmatch.group(1))
            

with open(ERR_GET_REASON_c, 'w') as f:
    f.write('/* This file was generated by generate_ERR_GET_REASON.py - DO NOT EDIT */\n')
    f.write('\n')
    f.write('#include "ossl/openssl/err.h"\n')
    f.write('#include "log.h"\n')
    for include in includes:
        f.write('#include <{}>\n'.format(include))
    f.write('\n')
    f.write('int ERR_GET_REASON(uint32_t packed_error) {\n')
    f.write('  int lib = ossl_ERR_GET_LIB(packed_error);\n')
    f.write('  int reason = ossl_ERR_GET_REASON(packed_error);\n')
    f.write('  switch(lib) {\n')
    for ossl_lib in ossl_libs:
        f.write('    case ossl_ERR_LIB_' + ossl_lib + ': {\n')
        f.write('      switch(reason) {\n')
        for ossl_reason in ossl_libs[ossl_lib]:
            if ossl_lib in bssl_libs and ossl_reason in bssl_libs[ossl_lib]:
                f.write('        case ossl_' + ossl_reason + ' : return ' + ossl_reason + ';\n')
            else:
                f.write('        case ossl_' + ossl_reason + ' : return ERR_R_INTERNAL_ERROR;\n')
        f.write('        default: bssl_compat_warn("Unknown ' + ossl_lib + ' reason %d", reason); return reason;\n')
        f.write('      }\n')
        f.write('      break;\n')
        f.write('    }\n')
    f.write('    default: {\n')
    f.write('      bssl_compat_error("Unknown OpenSSL ERR_LIB_* value %d", lib); return ERR_R_INTERNAL_ERROR;\n')
    f.write('    }\n')
    f.write('  }\n')
    f.write('}\n')
