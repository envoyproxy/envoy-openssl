#!/usr/bin/env python3
import os
import re

bssl_compat_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
bssl_err_h = os.path.join(bssl_compat_dir, "include", "openssl", "err.h")
ossl_err_h = os.path.join(bssl_compat_dir, "include", "ossl", "openssl", "err.h")
ERR_GET_LIB_c = os.path.join(bssl_compat_dir, "source", "ERR_GET_LIB.c")

bssl_names = set()
with open(bssl_err_h, 'r') as f:
    for line in f.readlines():
        match = re.search(r'(^ *)(ERR_LIB_[A-Z0-9_]*)( = 1)?,$', line)
        if match is not None:
            bssl_names.add(match.group(2))

ossl_names = set()
with open(ossl_err_h, 'r') as f:
    for line in f.readlines():
        match = re.search(r'^#\s*define\s+ossl_(ERR_LIB_[A-Z0-9_]*)\s+\d+\s*$', line)
        if match is not None:
            ossl_names.add(match.group(1))

with open(ERR_GET_LIB_c, 'w') as f:
    f.write('/* This file was generated by {} - DO NOT EDIT */\n'.format(os.path.basename(__file__)))
    f.write('\n')
    f.write('#include <openssl/err.h>\n')
    f.write('#include "ossl/openssl/err.h"\n')
    f.write('#include "log.h"\n')
    f.write('\n')
    f.write('int ERR_GET_LIB(uint32_t packed_error) {\n')
    f.write('  int lib = ossl_ERR_GET_LIB(packed_error);\n')
    f.write('  switch(lib) {\n')
    for n in (bssl_names.intersection(ossl_names)):
        f.write('    case ossl_{}: return {};\n'.format(n, n))
    for n in (ossl_names.difference(bssl_names)):
        f.write('    case ossl_{}: bssl_compat_warn("ossl_{} -> ERR_LIB_NONE"); return ERR_LIB_NONE;\n'.format(n, n))
    f.write('    default: bssl_compat_warn("Unknown OpenSSL ERR_LIB_* value %d", lib); return ERR_LIB_NONE;\n')
    f.write('  }\n')
    f.write('}\n')
