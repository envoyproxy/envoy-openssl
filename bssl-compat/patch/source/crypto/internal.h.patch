--- a/source/crypto/internal.h
+++ b/source/crypto/internal.h
@@ -106,124 +106,124 @@
  * (eay@cryptsoft.com).  This product includes software written by Tim
  * Hudson (tjh@cryptsoft.com). */
 
-// #ifndef OPENSSL_HEADER_CRYPTO_INTERNAL_H
-// #define OPENSSL_HEADER_CRYPTO_INTERNAL_H
+#ifndef OPENSSL_HEADER_CRYPTO_INTERNAL_H
+#define OPENSSL_HEADER_CRYPTO_INTERNAL_H
 
-// #include <openssl/crypto.h>
-// #include <openssl/ex_data.h>
-// #include <openssl/stack.h>
-// #include <openssl/thread.h>
+#include <openssl/crypto.h>
+#include <openssl/ex_data.h>
+#include <openssl/stack.h>
+#include <openssl/thread.h>
+
+#include <assert.h>
+#include <string.h>
+
+#if defined(BORINGSSL_CONSTANT_TIME_VALIDATION)
+#include <valgrind/memcheck.h>
+#endif
+
+#if defined(BORINGSSL_FIPS_BREAK_TESTS)
+#include <stdlib.h>
+#endif
+
+#if !defined(__cplusplus)
+#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
+#include <stdalign.h>
+#elif defined(_MSC_VER) && !defined(__clang__)
+#define alignas(x) __declspec(align(x))
+#define alignof __alignof
+#else
+With the exception of MSVC, we require C11 to build the library. C11 is a
+prerequisite for improved refcounting performance. All our supported C
+compilers have long implemented C11 and made it default. The most likely
+cause of pre-C11 modes is stale -std=c99 or -std=gnu99 flags in build
+configuration. Such flags can be removed.
+
+TODO(davidben): In MSVC 2019 16.8 or higher (_MSC_VER >= 1928),
+|__STDC_VERSION__| will be 201112 when passed /std:c11 and unset otherwise.
+C11 alignas and alignof are only implemented in C11 mode. Can we mandate C11
+mode for those versions?
+#error "BoringSSL must be built in C11 mode or higher."
+#endif
+#endif
+
+#if defined(OPENSSL_THREADS) && \
+    (!defined(OPENSSL_WINDOWS) || defined(__MINGW32__))
+#include <pthread.h>
+#define OPENSSL_PTHREADS
+#endif
+
+#if defined(OPENSSL_THREADS) && !defined(OPENSSL_PTHREADS) && \
+    defined(OPENSSL_WINDOWS)
+#define OPENSSL_WINDOWS_THREADS
+OPENSSL_MSVC_PRAGMA(warning(push, 3))
+#include <windows.h>
+OPENSSL_MSVC_PRAGMA(warning(pop))
+#endif
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
-// #include <assert.h>
-// #include <string.h>
 
-// #if defined(BORINGSSL_CONSTANT_TIME_VALIDATION)
-// #include <valgrind/memcheck.h>
-// #endif
-
-// #if defined(BORINGSSL_FIPS_BREAK_TESTS)
-// #include <stdlib.h>
-// #endif
-
-// #if !defined(__cplusplus)
-// #if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
-// #include <stdalign.h>
-// #elif defined(_MSC_VER) && !defined(__clang__)
-// #define alignas(x) __declspec(align(x))
-// #define alignof __alignof
-// #else
-// With the exception of MSVC, we require C11 to build the library. C11 is a
-// prerequisite for improved refcounting performance. All our supported C
-// compilers have long implemented C11 and made it default. The most likely
-// cause of pre-C11 modes is stale -std=c99 or -std=gnu99 flags in build
-// configuration. Such flags can be removed.
-//
-// TODO(davidben): In MSVC 2019 16.8 or higher (_MSC_VER >= 1928),
-// |__STDC_VERSION__| will be 201112 when passed /std:c11 and unset otherwise.
-// C11 alignas and alignof are only implemented in C11 mode. Can we mandate C11
-// mode for those versions?
-// #error "BoringSSL must be built in C11 mode or higher."
-// #endif
-// #endif
-
-// #if defined(OPENSSL_THREADS) && \
-//     (!defined(OPENSSL_WINDOWS) || defined(__MINGW32__))
-// #include <pthread.h>
-// #define OPENSSL_PTHREADS
-// #endif
-
-// #if defined(OPENSSL_THREADS) && !defined(OPENSSL_PTHREADS) && \
-//     defined(OPENSSL_WINDOWS)
-// #define OPENSSL_WINDOWS_THREADS
-// OPENSSL_MSVC_PRAGMA(warning(push, 3))
-// #include <windows.h>
-// OPENSSL_MSVC_PRAGMA(warning(pop))
-// #endif
-
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
-
-
-// #if defined(OPENSSL_X86) || defined(OPENSSL_X86_64) || defined(OPENSSL_ARM) || \
-//     defined(OPENSSL_AARCH64) || defined(OPENSSL_PPC64LE)
+#if defined(OPENSSL_X86) || defined(OPENSSL_X86_64) || defined(OPENSSL_ARM) || \
+    defined(OPENSSL_AARCH64) || defined(OPENSSL_PPC64LE)
 // OPENSSL_cpuid_setup initializes the platform-specific feature cache.
-// void OPENSSL_cpuid_setup(void);
-// #endif
+void OPENSSL_cpuid_setup(void);
+#endif
 
-// #if (defined(OPENSSL_ARM) || defined(OPENSSL_AARCH64)) && \
-//     !defined(OPENSSL_STATIC_ARMCAP)
+#if (defined(OPENSSL_ARM) || defined(OPENSSL_AARCH64)) && \
+    !defined(OPENSSL_STATIC_ARMCAP)
 // OPENSSL_get_armcap_pointer_for_test returns a pointer to |OPENSSL_armcap_P|
 // for unit tests. Any modifications to the value must be made after
 // |CRYPTO_library_init| but before any other function call in BoringSSL.
-// OPENSSL_EXPORT uint32_t *OPENSSL_get_armcap_pointer_for_test(void);
-// #endif
+OPENSSL_EXPORT uint32_t *OPENSSL_get_armcap_pointer_for_test(void);
+#endif
 
 
-// #if (!defined(_MSC_VER) || defined(__clang__)) && defined(OPENSSL_64_BIT)
-// #define BORINGSSL_HAS_UINT128
-// typedef __int128_t int128_t;
-// typedef __uint128_t uint128_t;
+#if (!defined(_MSC_VER) || defined(__clang__)) && defined(OPENSSL_64_BIT)
+#define BORINGSSL_HAS_UINT128
+typedef __int128_t int128_t;
+typedef __uint128_t uint128_t;
 
 // clang-cl supports __uint128_t but modulus and division don't work.
 // https://crbug.com/787617.
-// #if !defined(_MSC_VER) || !defined(__clang__)
-// #define BORINGSSL_CAN_DIVIDE_UINT128
-// #endif
-// #endif
+#if !defined(_MSC_VER) || !defined(__clang__)
+#define BORINGSSL_CAN_DIVIDE_UINT128
+#endif
+#endif
 
-// #define OPENSSL_ARRAY_SIZE(array) (sizeof(array) / sizeof((array)[0]))
+#define OPENSSL_ARRAY_SIZE(array) (sizeof(array) / sizeof((array)[0]))
 
 // Have a generic fall-through for different versions of C/C++.
-// #if defined(__cplusplus) && __cplusplus >= 201703L
-// #define OPENSSL_FALLTHROUGH [[fallthrough]]
-// #elif defined(__cplusplus) && __cplusplus >= 201103L && defined(__clang__)
-// #define OPENSSL_FALLTHROUGH [[clang::fallthrough]]
-// #elif defined(__cplusplus) && __cplusplus >= 201103L && defined(__GNUC__) && \
-//     __GNUC__ >= 7
-// #define OPENSSL_FALLTHROUGH [[gnu::fallthrough]]
-// #elif defined(__GNUC__) && __GNUC__ >= 7 // gcc 7
-// #define OPENSSL_FALLTHROUGH __attribute__ ((fallthrough))
-// #elif defined(__clang__)
-// #if __has_attribute(fallthrough) && __clang_major__ >= 5
+#if defined(__cplusplus) && __cplusplus >= 201703L
+#define OPENSSL_FALLTHROUGH [[fallthrough]]
+#elif defined(__cplusplus) && __cplusplus >= 201103L && defined(__clang__)
+#define OPENSSL_FALLTHROUGH [[clang::fallthrough]]
+#elif defined(__cplusplus) && __cplusplus >= 201103L && defined(__GNUC__) && \
+    __GNUC__ >= 7
+#define OPENSSL_FALLTHROUGH [[gnu::fallthrough]]
+#elif defined(__GNUC__) && __GNUC__ >= 7 // gcc 7
+#define OPENSSL_FALLTHROUGH __attribute__ ((fallthrough))
+#elif defined(__clang__)
+#if __has_attribute(fallthrough) && __clang_major__ >= 5
 // Clang 3.5, at least, complains about "error: declaration does not declare
 // anything", possibily because we put a semicolon after this macro in
 // practice. Thus limit it to >= Clang 5, which does work.
-// #define OPENSSL_FALLTHROUGH __attribute__ ((fallthrough))
-// #else // clang versions that do not support fallthrough.
-// #define OPENSSL_FALLTHROUGH
-// #endif
-// #else // C++11 on gcc 6, and all other cases
-// #define OPENSSL_FALLTHROUGH
-// #endif
+#define OPENSSL_FALLTHROUGH __attribute__ ((fallthrough))
+#else // clang versions that do not support fallthrough.
+#define OPENSSL_FALLTHROUGH
+#endif
+#else // C++11 on gcc 6, and all other cases
+#define OPENSSL_FALLTHROUGH
+#endif
 
 // For convenience in testing 64-bit generic code, we allow disabling SSE2
 // intrinsics via |OPENSSL_NO_SSE2_FOR_TESTING|. x86_64 always has SSE2
 // available, so we would otherwise need to test such code on a non-x86_64
 // platform.
-// #if defined(__SSE2__) && !defined(OPENSSL_NO_SSE2_FOR_TESTING)
-// #define OPENSSL_SSE2
-// #endif
+#if defined(__SSE2__) && !defined(OPENSSL_NO_SSE2_FOR_TESTING)
+#define OPENSSL_SSE2
+#endif
 
 
 // Pointer utility functions.
@@ -833,29 +833,29 @@
 //   return memcmp(s1, s2, n);
 // }
 
-// static inline void *OPENSSL_memcpy(void *dst, const void *src, size_t n) {
-//   if (n == 0) {
-//     return dst;
-//   }
+static inline void *OPENSSL_memcpy(void *dst, const void *src, size_t n) {
+  if (n == 0) {
+    return dst;
+  }
+
+  return memcpy(dst, src, n);
+}
+
+static inline void *OPENSSL_memmove(void *dst, const void *src, size_t n) {
+  if (n == 0) {
+    return dst;
+  }
+
+  return memmove(dst, src, n);
+}
+
+static inline void *OPENSSL_memset(void *dst, int c, size_t n) {
+  if (n == 0) {
+    return dst;
+  }
 
-//   return memcpy(dst, src, n);
-// }
-
-// static inline void *OPENSSL_memmove(void *dst, const void *src, size_t n) {
-//   if (n == 0) {
-//     return dst;
-//   }
-
-//   return memmove(dst, src, n);
-// }
-
-// static inline void *OPENSSL_memset(void *dst, int c, size_t n) {
-//   if (n == 0) {
-//     return dst;
-//   }
-
-//   return memset(dst, c, n);
-// }
+  return memset(dst, c, n);
+}
 
 
 // Loads and stores.
@@ -1276,8 +1276,8 @@
 // #endif  // BORINGSSL_DISPATCH_TEST
 
 
-// #if defined(__cplusplus)
-// }  // extern C
-// #endif
+#if defined(__cplusplus)
+}  // extern C
+#endif
 
-// #endif  // OPENSSL_HEADER_CRYPTO_INTERNAL_H
+#endif  // OPENSSL_HEADER_CRYPTO_INTERNAL_H
