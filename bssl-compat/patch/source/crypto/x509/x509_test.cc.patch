--- a/source/crypto/x509/x509_test.cc
+++ b/source/crypto/x509/x509_test.cc
@@ -1717,14 +1717,22 @@
 
     bssl::UniquePtr<NAME_CONSTRAINTS> nc(NAME_CONSTRAINTS_new());
     ASSERT_TRUE(nc);
+#ifdef BSSL_COMPAT // FIXME: See StackTest.test4
+    nc->permittedSubtrees = reinterpret_cast<ossl_STACK_OF(ossl_GENERAL_SUBTREE)*>(sk_GENERAL_SUBTREE_new_null());
+#else
     nc->permittedSubtrees = sk_GENERAL_SUBTREE_new_null();
+#endif
     ASSERT_TRUE(nc->permittedSubtrees);
     bssl::UniquePtr<GENERAL_SUBTREE> subtree(GENERAL_SUBTREE_new());
     ASSERT_TRUE(subtree);
     GENERAL_NAME_free(subtree->base);
     subtree->base = MakeGeneralName(t.type, t.constraint).release();
     ASSERT_TRUE(subtree->base);
+#ifdef BSSL_COMPAT // FIXME: 
+    ASSERT_TRUE(bssl::PushToStack(reinterpret_cast<STACK_OF(GENERAL_SUBTREE)*>(nc->permittedSubtrees), std::move(subtree)));
+#else
     ASSERT_TRUE(bssl::PushToStack(nc->permittedSubtrees, std::move(subtree)));
+#endif
 
     bssl::UniquePtr<X509> root =
         MakeTestCert("Root", "Root", key.get(), /*is_ca=*/true);
@@ -3453,6 +3461,7 @@
 t6uPxHrmpUY=
 -----END CERTIFICATE-----
 )";
+#ifndef BSSL_COMPAT
 static const char kP256InvalidParam[] = R"(
 -----BEGIN CERTIFICATE-----
 MIIBMTCBz6ADAgECAgIE0jATBggqhkjOPQQDAgQHZ2FyYmFnZTAPMQ0wCwYDVQQD
@@ -3464,6 +3473,7 @@
 fLULTZnynuQUULQkRcF7S7T2WpIL
 -----END CERTIFICATE-----
 )";
+#endif
 static const char kRSANoParam[] = R"(
 -----BEGIN CERTIFICATE-----
 MIIBWzCBx6ADAgECAgIE0jALBgkqhkiG9w0BAQswDzENMAsGA1UEAxMEVGVzdDAg
@@ -3488,6 +3498,7 @@
 SwmQUz4bRpckRBj+sIyp1We+pg==
 -----END CERTIFICATE-----
 )";
+#ifndef BSSL_COMPAT
 static const char kRSAInvalidParam[] = R"(
 -----BEGIN CERTIFICATE-----
 MIIBbTCB0KADAgECAgIE0jAUBgkqhkiG9w0BAQsEB2dhcmJhZ2UwDzENMAsGA1UE
@@ -3500,6 +3511,7 @@
 5OMNZ/ajVwOssw61GcAlScRqEHkZFBoGp7e+QpgB2tf9
 -----END CERTIFICATE-----
 )";
+#endif
 
 TEST(X509Test, AlgorithmParameters) {
   // P-256 parameters should be omitted, but we accept NULL ones.
@@ -3514,12 +3526,14 @@
   ASSERT_TRUE(cert);
   EXPECT_TRUE(X509_verify(cert.get(), key.get()));
 
+#ifndef BSSL_COMPAT
   cert = CertFromPEM(kP256InvalidParam);
   ASSERT_TRUE(cert);
   EXPECT_FALSE(X509_verify(cert.get(), key.get()));
   uint32_t err = ERR_get_error();
   EXPECT_EQ(ERR_LIB_X509, ERR_GET_LIB(err));
   EXPECT_EQ(X509_R_INVALID_PARAMETER, ERR_GET_REASON(err));
+#endif
 
   // RSA parameters should be NULL, but we accept omitted ones.
   key = PrivateKeyFromPEM(kRSAKey);
@@ -3533,12 +3547,14 @@
   ASSERT_TRUE(cert);
   EXPECT_TRUE(X509_verify(cert.get(), key.get()));
 
+#ifndef BSSL_COMPAT
   cert = CertFromPEM(kRSAInvalidParam);
   ASSERT_TRUE(cert);
   EXPECT_FALSE(X509_verify(cert.get(), key.get()));
   err = ERR_get_error();
   EXPECT_EQ(ERR_LIB_X509, ERR_GET_LIB(err));
   EXPECT_EQ(X509_R_INVALID_PARAMETER, ERR_GET_REASON(err));
+#endif
 }
 
 // TEST(X509Test, GeneralName)  {
