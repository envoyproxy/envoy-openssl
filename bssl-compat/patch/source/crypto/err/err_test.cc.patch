--- a/source/crypto/err/err_test.cc
+++ b/source/crypto/err/err_test.cc
@@ -12,43 +12,43 @@
  * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
  * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */
 
-// #include <stdio.h>
-// #include <string.h>
+#include <stdio.h>
+#include <string.h>
 
-// #include <gtest/gtest.h>
+#include <gtest/gtest.h>
 
-// #include <openssl/crypto.h>
-// #include <openssl/err.h>
-// #include <openssl/mem.h>
+#include <openssl/crypto.h>
+#include <openssl/err.h>
+#include <openssl/mem.h>
 
 // #include "./internal.h"
 
-// #if defined(OPENSSL_WINDOWS)
-// OPENSSL_MSVC_PRAGMA(warning(push, 3))
-// #include <windows.h>
-// OPENSSL_MSVC_PRAGMA(warning(pop))
-// #else
-// #include <errno.h>
-// #endif
+#if defined(OPENSSL_WINDOWS)
+OPENSSL_MSVC_PRAGMA(warning(push, 3))
+#include <windows.h>
+OPENSSL_MSVC_PRAGMA(warning(pop))
+#else
+#include <errno.h>
+#endif
+
+
+TEST(ErrTest, Overflow) {
+  for (unsigned i = 0; i < ERR_NUM_ERRORS*2; i++) {
+    ERR_put_error(1, 0 /* unused */, i+1, "test", 1);
+  }
+
+  for (unsigned i = 0; i < ERR_NUM_ERRORS - 1; i++) {
+    SCOPED_TRACE(i);
+    uint32_t err = ERR_get_error();
+    // Errors are returned in order they were pushed, with the least recent ones
+    // removed, up to |ERR_NUM_ERRORS - 1| errors. So the errors returned are
+    // |ERR_NUM_ERRORS + 2| through |ERR_NUM_ERRORS * 2|, inclusive.
+    EXPECT_NE(0u, err);
+    EXPECT_EQ(static_cast<int>(i + ERR_NUM_ERRORS + 2), ERR_GET_REASON(err));
+  }
 
-
-// TEST(ErrTest, Overflow) {
-//   for (unsigned i = 0; i < ERR_NUM_ERRORS*2; i++) {
-//     ERR_put_error(1, 0 /* unused */, i+1, "test", 1);
-//   }
-
-//   for (unsigned i = 0; i < ERR_NUM_ERRORS - 1; i++) {
-//     SCOPED_TRACE(i);
-//     uint32_t err = ERR_get_error();
-//     // Errors are returned in order they were pushed, with the least recent ones
-//     // removed, up to |ERR_NUM_ERRORS - 1| errors. So the errors returned are
-//     // |ERR_NUM_ERRORS + 2| through |ERR_NUM_ERRORS * 2|, inclusive.
-//     EXPECT_NE(0u, err);
-//     EXPECT_EQ(static_cast<int>(i + ERR_NUM_ERRORS + 2), ERR_GET_REASON(err));
-//   }
-
-//   EXPECT_EQ(0u, ERR_get_error());
-// }
+  EXPECT_EQ(0u, ERR_get_error());
+}
 
 // TEST(ErrTest, PutError) {
 //   ASSERT_EQ(0u, ERR_get_error())
@@ -88,16 +88,16 @@
 //   EXPECT_STREQ("testing", data);
 // }
 
-// TEST(ErrTest, ClearError) {
-//   ASSERT_EQ(0u, ERR_get_error())
-//       << "ERR_get_error returned value before an error was added.";
-
-//   ERR_put_error(1, 0 /* unused */, 2, "test", 4);
-//   ERR_clear_error();
-
-//   // The error queue should be cleared.
-//   EXPECT_EQ(0u, ERR_get_error());
-// }
+TEST(ErrTest, ClearError) {
+  ASSERT_EQ(0u, ERR_get_error())
+      << "ERR_get_error returned value before an error was added.";
+
+  ERR_put_error(1, 0 /* unused */, 2, "test", 4);
+  ERR_clear_error();
+
+  // The error queue should be cleared.
+  EXPECT_EQ(0u, ERR_get_error());
+}
 
 // TEST(ErrTest, Print) {
 //   ERR_put_error(1, 0 /* unused */, 2, "test", 4);
@@ -233,19 +233,19 @@
 // }
 
 // Querying the error queue should not affect the OS error.
-// #if defined(OPENSSL_WINDOWS)
-// TEST(ErrTest, PreservesLastError) {
-//   SetLastError(ERROR_INVALID_FUNCTION);
-//   ERR_get_error();
-//   EXPECT_EQ(static_cast<DWORD>(ERROR_INVALID_FUNCTION), GetLastError());
-// }
-// #else
-// TEST(ErrTest, PreservesErrno) {
-//   errno = EINVAL;
-//   ERR_get_error();
-//   EXPECT_EQ(EINVAL, errno);
-// }
-// #endif
+#if defined(OPENSSL_WINDOWS)
+TEST(ErrTest, PreservesLastError) {
+  SetLastError(ERROR_INVALID_FUNCTION);
+  ERR_get_error();
+  EXPECT_EQ(static_cast<DWORD>(ERROR_INVALID_FUNCTION), GetLastError());
+}
+#else
+TEST(ErrTest, PreservesErrno) {
+  errno = EINVAL;
+  ERR_get_error();
+  EXPECT_EQ(EINVAL, errno);
+}
+#endif
 
 // TEST(ErrTest, String) {
 //   char buf[128];
@@ -296,11 +296,11 @@
 // }
 
 // Error-printing functions should return something with unknown errors.
-// TEST(ErrTest, UnknownError) {
-//   uint32_t err = ERR_PACK(0xff, 0xfff);
-//   EXPECT_TRUE(ERR_lib_error_string(err));
-//   EXPECT_TRUE(ERR_reason_error_string(err));
-//   char buf[128];
-//   ERR_error_string_n(err, buf, sizeof(buf));
-//   EXPECT_NE(0u, strlen(buf));
-// }
+TEST(ErrTest, UnknownError) {
+  uint32_t err = ERR_PACK(0xff, 0xfff);
+  EXPECT_TRUE(ERR_lib_error_string(err));
+  EXPECT_TRUE(ERR_reason_error_string(err));
+  char buf[128];
+  ERR_error_string_n(err, buf, sizeof(buf));
+  EXPECT_NE(0u, strlen(buf));
+}
