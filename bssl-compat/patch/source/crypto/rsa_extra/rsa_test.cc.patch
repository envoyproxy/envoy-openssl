--- a/source/crypto/rsa_extra/rsa_test.cc
+++ b/source/crypto/rsa_extra/rsa_test.cc
@@ -554,12 +554,24 @@
 
   bssl::UniquePtr<RSA> key(RSA_new());
   ASSERT_TRUE(key);
+#ifdef BSSL_COMPAT
+  BIGNUM *n {BN_new()};
+  BIGNUM *e {BN_new()};
+  BIGNUM *d {BN_new()};
+  ASSERT_TRUE(BN_hex2bn(&n, kN));
+  ASSERT_TRUE(BN_hex2bn(&e, kE));
+  ASSERT_TRUE(BN_hex2bn(&d, kD));
+  ASSERT_EQ(1, RSA_set0_key(key.get(), n, e, d));
+#else
   ASSERT_TRUE(BN_hex2bn(&key->n, kN));
   ASSERT_TRUE(BN_hex2bn(&key->e, kE));
   ASSERT_TRUE(BN_hex2bn(&key->d, kD));
+#endif
 
+#ifndef BSSL_COMPAT
   // Keys with only n, e, and d are functional.
   EXPECT_TRUE(RSA_check_key(key.get()));
+#endif
 
   const uint8_t kDummyHash[32] = {0};
   uint8_t buf[64];
@@ -573,6 +585,7 @@
   // Keys without the public exponent must continue to work when blinding is
   // disabled to support Java's RSAPrivateKeySpec API. See
   // https://bugs.chromium.org/p/boringssl/issues/detail?id=12.
+#ifndef BSSL_COMPAT
   bssl::UniquePtr<RSA> key2(RSA_new());
   ASSERT_TRUE(key2);
   ASSERT_TRUE(BN_hex2bn(&key2->n, kN));
@@ -586,6 +599,7 @@
   // Verify the signature with |key|. |key2| has no public exponent.
   EXPECT_TRUE(RSA_verify(NID_sha256, kDummyHash, sizeof(kDummyHash), buf,
                          buf_len, key.get()));
+#endif // BSSL_COMPAT
 }
 
 // TEST(RSATest, ASN1) {
@@ -712,7 +726,11 @@
                            RSA_PKCS1_PADDING));
   uint32_t err = ERR_get_error();
   EXPECT_EQ(ERR_LIB_RSA, ERR_GET_LIB(err));
+#ifdef BSSL_COMPAT
+  EXPECT_EQ(ossl_RSA_R_MISSING_PRIVATE_KEY, ERR_GET_REASON(err));
+#else
   EXPECT_EQ(RSA_R_VALUE_MISSING, ERR_GET_REASON(err));
+#endif
 }
 
 // TEST(RSATest, CheckKey) {
