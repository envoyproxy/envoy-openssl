--- a/source/crypto/test/test_util.cc
+++ b/source/crypto/test/test_util.cc
@@ -12,11 +12,11 @@
  * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
  * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */
 
-// #include "test_util.h"
+#include "test_util.h"
 
-// #include <ostream>
+#include <ostream>
 
-// #include "../internal.h"
+#include "../internal.h"
 
 
 // void hexdump(FILE *fp, const char *msg, const void *in, size_t len) {
@@ -29,15 +29,15 @@
 //   fputs("\n", fp);
 // }
 
-// std::ostream &operator<<(std::ostream &os, const Bytes &in) {
-//   if (in.span_.empty()) {
-//     return os << "<empty Bytes>";
-//   }
-
-//   // Print a byte slice as hex.
-//   os << EncodeHex(in.span_);
-//   return os;
-// }
+std::ostream &operator<<(std::ostream &os, const Bytes &in) {
+  if (in.span_.empty()) {
+    return os << "<empty Bytes>";
+  }
+
+  // Print a byte slice as hex.
+  os << EncodeHex(in.span_);
+  return os;
+}
 
 // static bool FromHexDigit(uint8_t *out, char c) {
 //   if ('0' <= c && c <= '9') {
@@ -72,14 +72,14 @@
 //   return true;
 // }
 
-// std::string EncodeHex(bssl::Span<const uint8_t> in) {
-//   static const char kHexDigits[] = "0123456789abcdef";
-//   std::string ret;
-//   ret.reserve(in.size() * 2);
-//   for (uint8_t b : in) {
-//     ret += kHexDigits[b >> 4];
-//     ret += kHexDigits[b & 0xf];
-//   }
-//   return ret;
-// }
+std::string EncodeHex(bssl::Span<const uint8_t> in) {
+  static const char kHexDigits[] = "0123456789abcdef";
+  std::string ret;
+  ret.reserve(in.size() * 2);
+  for (uint8_t b : in) {
+    ret += kHexDigits[b >> 4];
+    ret += kHexDigits[b & 0xf];
+  }
+  return ret;
+}
 
