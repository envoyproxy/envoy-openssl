--- a/include/openssl/bytestring.h
+++ b/include/openssl/bytestring.h
@@ -12,17 +12,17 @@
  * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
  * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */
 
-// #ifndef OPENSSL_HEADER_BYTESTRING_H
-// #define OPENSSL_HEADER_BYTESTRING_H
+#ifndef OPENSSL_HEADER_BYTESTRING_H
+#define OPENSSL_HEADER_BYTESTRING_H
 
-// #include <openssl/base.h>
+#include <openssl/base.h>
 
-// #include <openssl/span.h>
-// #include <time.h>
+#include <openssl/span.h>
+#include <time.h>
 
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // Bytestrings are used for parsing and building TLS and ASN.1 messages.
@@ -37,38 +37,38 @@
 
 // CRYPTO ByteString
 
-// struct cbs_st {
-//   const uint8_t *data;
-//   size_t len;
-
-// #if !defined(BORINGSSL_NO_CXX)
-//   // Allow implicit conversions to and from bssl::Span<const uint8_t>.
-//   cbs_st(bssl::Span<const uint8_t> span)
-//       : data(span.data()), len(span.size()) {}
-//   operator bssl::Span<const uint8_t>() const {
-//     return bssl::MakeConstSpan(data, len);
-//   }
-
-//   // Defining any constructors requires we explicitly default the others.
-//   cbs_st() = default;
-//   cbs_st(const cbs_st &) = default;
-//   cbs_st &operator=(const cbs_st &) = default;
-// #endif
-// };
+struct cbs_st {
+  const uint8_t *data;
+  size_t len;
+
+#if !defined(BORINGSSL_NO_CXX)
+  // Allow implicit conversions to and from bssl::Span<const uint8_t>.
+  cbs_st(bssl::Span<const uint8_t> span)
+      : data(span.data()), len(span.size()) {}
+  operator bssl::Span<const uint8_t>() const {
+    return bssl::MakeConstSpan(data, len);
+  }
+
+  // Defining any constructors requires we explicitly default the others.
+  cbs_st() = default;
+  cbs_st(const cbs_st &) = default;
+  cbs_st &operator=(const cbs_st &) = default;
+#endif
+};
 
 // CBS_init sets |cbs| to point to |data|. It does not take ownership of
 // |data|.
-// OPENSSL_EXPORT void CBS_init(CBS *cbs, const uint8_t *data, size_t len);
+OPENSSL_EXPORT void CBS_init(CBS *cbs, const uint8_t *data, size_t len);
 
 // CBS_skip advances |cbs| by |len| bytes. It returns one on success and zero
 // otherwise.
-// OPENSSL_EXPORT int CBS_skip(CBS *cbs, size_t len);
+OPENSSL_EXPORT int CBS_skip(CBS *cbs, size_t len);
 
-// CBS_data returns a pointer to the contents of |cbs|.
+//  CBS_data returns a pointer to the contents of |cbs|.
 // OPENSSL_EXPORT const uint8_t *CBS_data(const CBS *cbs);
 
 // CBS_len returns the number of bytes remaining in |cbs|.
-// OPENSSL_EXPORT size_t CBS_len(const CBS *cbs);
+OPENSSL_EXPORT size_t CBS_len(const CBS *cbs);
 
 // CBS_stow copies the current contents of |cbs| into |*out_ptr| and
 // |*out_len|. If |*out_ptr| is not NULL, the contents are freed with
@@ -102,7 +102,7 @@
 
 // CBS_get_u16 sets |*out| to the next, big-endian uint16_t from |cbs| and
 // advances |cbs|. It returns one on success and zero on error.
-// OPENSSL_EXPORT int CBS_get_u16(CBS *cbs, uint16_t *out);
+OPENSSL_EXPORT int CBS_get_u16(CBS *cbs, uint16_t *out);
 
 // CBS_get_u16le sets |*out| to the next, little-endian uint16_t from |cbs| and
 // advances |cbs|. It returns one on success and zero on error.
@@ -183,7 +183,7 @@
 
 // CBS_ASN1_TAG_SHIFT is how much the in-memory representation shifts the class
 // and constructed bits from the DER serialization.
-// #define CBS_ASN1_TAG_SHIFT 24
+#define CBS_ASN1_TAG_SHIFT 24
 
 // CBS_ASN1_CONSTRUCTED may be ORed into a tag to set the constructed bit.
 // #define CBS_ASN1_CONSTRUCTED (0x20u << CBS_ASN1_TAG_SHIFT)
@@ -200,12 +200,12 @@
 // #define CBS_ASN1_CLASS_MASK (0xc0u << CBS_ASN1_TAG_SHIFT)
 
 // CBS_ASN1_TAG_NUMBER_MASK may be ANDed with a tag to query its number.
-// #define CBS_ASN1_TAG_NUMBER_MASK ((1u << (5 + CBS_ASN1_TAG_SHIFT)) - 1)
+#define CBS_ASN1_TAG_NUMBER_MASK ((1u << (5 + CBS_ASN1_TAG_SHIFT)) - 1)
 
 // The following values are constants for UNIVERSAL tags. Note these constants
 // include the constructed bit.
 // #define CBS_ASN1_BOOLEAN 0x1u
-// #define CBS_ASN1_INTEGER 0x2u
+#define CBS_ASN1_INTEGER 0x2u
 // #define CBS_ASN1_BITSTRING 0x3u
 // #define CBS_ASN1_OCTETSTRING 0x4u
 // #define CBS_ASN1_NULL 0x5u
@@ -389,42 +389,42 @@
 // going out of scope, use |CBB_flush|. If an operation on a |CBB| fails, it is
 // in an undefined state and must not be used except to call |CBB_cleanup|.
 
-// struct cbb_buffer_st {
-//   uint8_t *buf;
-//   size_t len;      // The number of valid bytes.
-//   size_t cap;      // The size of buf.
-//   char can_resize; /* One iff |buf| is owned by this object. If not then |buf|
-//                       cannot be resized. */
-//   char error;      /* One iff there was an error writing to this CBB. All future
-//                       operations will fail. */
-// };
-
-// struct cbb_st {
-//   struct cbb_buffer_st *base;
-//   // child points to a child CBB if a length-prefix is pending.
-//   CBB *child;
-//   // offset is the number of bytes from the start of |base->buf| to this |CBB|'s
-//   // pending length prefix.
-//   size_t offset;
-//   // pending_len_len contains the number of bytes in this |CBB|'s pending
-//   // length-prefix, or zero if no length-prefix is pending.
-//   uint8_t pending_len_len;
-//   char pending_is_asn1;
-//   // is_child is true iff this is a child |CBB| (as opposed to a top-level
-//   // |CBB|). Top-level objects are valid arguments for |CBB_finish|.
-//   char is_child;
-// };
+struct cbb_buffer_st {
+  uint8_t *buf;
+  size_t len;      // The number of valid bytes.
+  size_t cap;      // The size of buf.
+  char can_resize; /* One iff |buf| is owned by this object. If not then |buf|
+                      cannot be resized. */
+  char error;      /* One iff there was an error writing to this CBB. All future
+                      operations will fail. */
+};
+
+struct cbb_st {
+  struct cbb_buffer_st *base;
+  // child points to a child CBB if a length-prefix is pending.
+  CBB *child;
+  // offset is the number of bytes from the start of |base->buf| to this |CBB|'s
+  // pending length prefix.
+  size_t offset;
+  // pending_len_len contains the number of bytes in this |CBB|'s pending
+  // length-prefix, or zero if no length-prefix is pending.
+  uint8_t pending_len_len;
+  char pending_is_asn1;
+  // is_child is true iff this is a child |CBB| (as opposed to a top-level
+  // |CBB|). Top-level objects are valid arguments for |CBB_finish|.
+  char is_child;
+};
 
 // CBB_zero sets an uninitialised |cbb| to the zero state. It must be
 // initialised with |CBB_init| or |CBB_init_fixed| before use, but it is safe to
 // call |CBB_cleanup| without a successful |CBB_init|. This may be used for more
 // uniform cleanup of a |CBB|.
-// OPENSSL_EXPORT void CBB_zero(CBB *cbb);
+OPENSSL_EXPORT void CBB_zero(CBB *cbb);
 
 // CBB_init initialises |cbb| with |initial_capacity|. Since a |CBB| grows as
 // needed, the |initial_capacity| is just a hint. It returns one on success or
 // zero on allocation failure.
-// OPENSSL_EXPORT int CBB_init(CBB *cbb, size_t initial_capacity);
+OPENSSL_EXPORT int CBB_init(CBB *cbb, size_t initial_capacity);
 
 // CBB_init_fixed initialises |cbb| to write to |len| bytes at |buf|. Since
 // |buf| cannot grow, trying to write more than |len| bytes will cause CBB
@@ -438,7 +438,7 @@
 // This function can only be called on a "top level" |CBB|, i.e. one initialised
 // with |CBB_init| or |CBB_init_fixed|, or a |CBB| set to the zero state with
 // |CBB_zero|.
-// OPENSSL_EXPORT void CBB_cleanup(CBB *cbb);
+OPENSSL_EXPORT void CBB_cleanup(CBB *cbb);
 
 // CBB_finish completes any pending length prefix and sets |*out_data| to a
 // malloced buffer and |*out_len| to the length of that buffer. The caller
@@ -448,28 +448,28 @@
 // It can only be called on a "top level" |CBB|, i.e. one initialised with
 // |CBB_init| or |CBB_init_fixed|. It returns one on success and zero on
 // error.
-// OPENSSL_EXPORT int CBB_finish(CBB *cbb, uint8_t **out_data, size_t *out_len);
+OPENSSL_EXPORT int CBB_finish(CBB *cbb, uint8_t **out_data, size_t *out_len);
 
 // CBB_flush causes any pending length prefixes to be written out and any child
 // |CBB| objects of |cbb| to be invalidated. This allows |cbb| to continue to be
 // used after the children go out of scope, e.g. when local |CBB| objects are
 // added as children to a |CBB| that persists after a function returns. This
 // function returns one on success or zero on error.
-// OPENSSL_EXPORT int CBB_flush(CBB *cbb);
+OPENSSL_EXPORT int CBB_flush(CBB *cbb);
 
 // CBB_data returns a pointer to the bytes written to |cbb|. It does not flush
 // |cbb|. The pointer is valid until the next operation to |cbb|.
 //
 // To avoid unfinalized length prefixes, it is a fatal error to call this on a
 // CBB with any active children.
-// OPENSSL_EXPORT const uint8_t *CBB_data(const CBB *cbb);
+OPENSSL_EXPORT const uint8_t *CBB_data(const CBB *cbb);
 
 // CBB_len returns the number of bytes written to |cbb|. It does not flush
 // |cbb|.
 //
 // To avoid unfinalized length prefixes, it is a fatal error to call this on a
 // CBB with any active children.
-// OPENSSL_EXPORT size_t CBB_len(const CBB *cbb);
+OPENSSL_EXPORT size_t CBB_len(const CBB *cbb);
 
 // CBB_add_u8_length_prefixed sets |*out_contents| to a new child of |cbb|. The
 // data written to |*out_contents| will be prefixed in |cbb| with an 8-bit
@@ -489,11 +489,11 @@
 // CBB_add_asn1 sets |*out_contents| to a |CBB| into which the contents of an
 // ASN.1 object can be written. The |tag| argument will be used as the tag for
 // the object. It returns one on success or zero on error.
-// OPENSSL_EXPORT int CBB_add_asn1(CBB *cbb, CBB *out_contents, unsigned tag);
+OPENSSL_EXPORT int CBB_add_asn1(CBB *cbb, CBB *out_contents, unsigned tag);
 
 // CBB_add_bytes appends |len| bytes from |data| to |cbb|. It returns one on
 // success and zero otherwise.
-// OPENSSL_EXPORT int CBB_add_bytes(CBB *cbb, const uint8_t *data, size_t len);
+OPENSSL_EXPORT int CBB_add_bytes(CBB *cbb, const uint8_t *data, size_t len);
 
 // CBB_add_zeros append |len| bytes with value zero to |cbb|. It returns one on
 // success and zero otherwise.
@@ -518,11 +518,11 @@
 
 // CBB_add_u8 appends an 8-bit number from |value| to |cbb|. It returns one on
 // success and zero otherwise.
-// OPENSSL_EXPORT int CBB_add_u8(CBB *cbb, uint8_t value);
+OPENSSL_EXPORT int CBB_add_u8(CBB *cbb, uint8_t value);
 
 // CBB_add_u16 appends a 16-bit, big-endian number from |value| to |cbb|. It
 // returns one on success and zero otherwise.
-// OPENSSL_EXPORT int CBB_add_u16(CBB *cbb, uint16_t value);
+OPENSSL_EXPORT int CBB_add_u16(CBB *cbb, uint16_t value);
 
 // CBB_add_u16le appends a 16-bit, little-endian number from |value| to |cbb|.
 // It returns one on success and zero otherwise.
@@ -592,22 +592,22 @@
 // OPENSSL_EXPORT int CBB_flush_asn1_set_of(CBB *cbb);
 
 
-// #if defined(__cplusplus)
-// }  // extern C
+#if defined(__cplusplus)
+}  // extern C
 
 
-// #if !defined(BORINGSSL_NO_CXX)
-// extern "C++" {
+#if !defined(BORINGSSL_NO_CXX)
+extern "C++" {
 
-// BSSL_NAMESPACE_BEGIN
+BSSL_NAMESPACE_BEGIN
 
-// using ScopedCBB = internal::StackAllocated<CBB, void, CBB_zero, CBB_cleanup>;
+using ScopedCBB = internal::StackAllocated<CBB, void, CBB_zero, CBB_cleanup>;
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
-// #endif
+}  // extern C++
+#endif
 
-// #endif
+#endif
 
-// #endif  // OPENSSL_HEADER_BYTESTRING_H
+#endif  // OPENSSL_HEADER_BYTESTRING_H
