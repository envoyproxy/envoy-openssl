--- a/include/openssl/evp.h
+++ b/include/openssl/evp.h
@@ -54,27 +54,27 @@
  * copied and put under another distribution licence
  * [including the GNU Public Licence.] */
 
-// #ifndef OPENSSL_HEADER_EVP_H
-// #define OPENSSL_HEADER_EVP_H
+#ifndef OPENSSL_HEADER_EVP_H
+#define OPENSSL_HEADER_EVP_H
 
-// #include <openssl/base.h>
+#include <openssl/base.h>
 
-// #include <openssl/evp_errors.h>
-// #include <openssl/thread.h>
+#include <openssl/evp_errors.h>
+#include <openssl/thread.h>
 
 // OpenSSL included digest and cipher functions in this header so we include
 // them for users that still expect that.
 //
 // TODO(fork): clean up callers so that they include what they use.
-// #include <openssl/aead.h>
-// #include <openssl/base64.h>
-// #include <openssl/cipher.h>
-// #include <openssl/digest.h>
-// #include <openssl/nid.h>
+#include <openssl/aead.h>
+#include <openssl/base64.h>
+#include <openssl/cipher.h>
+#include <openssl/digest.h>
+#include <openssl/nid.h>
 
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // EVP abstracts over public/private key algorithms.
@@ -90,11 +90,11 @@
 
 // EVP_PKEY_new creates a new, empty public-key object and returns it or NULL
 // on allocation failure.
-// OPENSSL_EXPORT EVP_PKEY *EVP_PKEY_new(void);
+OPENSSL_EXPORT EVP_PKEY *EVP_PKEY_new(void);
 
 // EVP_PKEY_free frees all data referenced by |pkey| and then frees |pkey|
 // itself.
-// OPENSSL_EXPORT void EVP_PKEY_free(EVP_PKEY *pkey);
+OPENSSL_EXPORT void EVP_PKEY_free(EVP_PKEY *pkey);
 
 // EVP_PKEY_up_ref increments the reference count of |pkey| and returns one. It
 // does not mutate |pkey| for thread-safety purposes and may be used
@@ -111,7 +111,7 @@
 //
 // WARNING: this differs from the traditional return value of a "cmp"
 // function.
-// OPENSSL_EXPORT int EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b);
+OPENSSL_EXPORT int EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b);
 
 // EVP_PKEY_copy_parameters sets the parameters of |to| to equal the parameters
 // of |from|. It returns one on success and zero on error.
@@ -134,7 +134,7 @@
 
 // EVP_PKEY_id returns the type of |pkey|, which is one of the |EVP_PKEY_*|
 // values.
-// OPENSSL_EXPORT int EVP_PKEY_id(const EVP_PKEY *pkey);
+OPENSSL_EXPORT int EVP_PKEY_id(const EVP_PKEY *pkey);
 
 // EVP_PKEY_type returns |nid| if |nid| is a known key type and |NID_undef|
 // otherwise.
@@ -157,9 +157,9 @@
 // may not be called concurrently with other operations on the |EVP_PKEY|.
 
 // OPENSSL_EXPORT int EVP_PKEY_set1_RSA(EVP_PKEY *pkey, RSA *key);
-// OPENSSL_EXPORT int EVP_PKEY_assign_RSA(EVP_PKEY *pkey, RSA *key);
-// OPENSSL_EXPORT RSA *EVP_PKEY_get0_RSA(const EVP_PKEY *pkey);
-// OPENSSL_EXPORT RSA *EVP_PKEY_get1_RSA(const EVP_PKEY *pkey);
+OPENSSL_EXPORT int EVP_PKEY_assign_RSA(EVP_PKEY *pkey, RSA *key);
+OPENSSL_EXPORT RSA *EVP_PKEY_get0_RSA(const EVP_PKEY *pkey);
+OPENSSL_EXPORT RSA *EVP_PKEY_get1_RSA(const EVP_PKEY *pkey);
 
 // OPENSSL_EXPORT int EVP_PKEY_set1_DSA(EVP_PKEY *pkey, DSA *key);
 // OPENSSL_EXPORT int EVP_PKEY_assign_DSA(EVP_PKEY *pkey, DSA *key);
@@ -167,9 +167,9 @@
 // OPENSSL_EXPORT DSA *EVP_PKEY_get1_DSA(const EVP_PKEY *pkey);
 
 // OPENSSL_EXPORT int EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, EC_KEY *key);
-// OPENSSL_EXPORT int EVP_PKEY_assign_EC_KEY(EVP_PKEY *pkey, EC_KEY *key);
-// OPENSSL_EXPORT EC_KEY *EVP_PKEY_get0_EC_KEY(const EVP_PKEY *pkey);
-// OPENSSL_EXPORT EC_KEY *EVP_PKEY_get1_EC_KEY(const EVP_PKEY *pkey);
+OPENSSL_EXPORT int EVP_PKEY_assign_EC_KEY(EVP_PKEY *pkey, EC_KEY *key);
+OPENSSL_EXPORT EC_KEY *EVP_PKEY_get0_EC_KEY(const EVP_PKEY *pkey);
+OPENSSL_EXPORT EC_KEY *EVP_PKEY_get1_EC_KEY(const EVP_PKEY *pkey);
 
 #ifdef ossl_EVP_PKEY_NONE
 #define EVP_PKEY_NONE ossl_EVP_PKEY_NONE
@@ -224,7 +224,7 @@
 // The caller must check the type of the parsed public key to ensure it is
 // suitable and validate other desired key properties such as RSA modulus size
 // or EC curve.
-// OPENSSL_EXPORT EVP_PKEY *EVP_parse_public_key(CBS *cbs);
+OPENSSL_EXPORT EVP_PKEY *EVP_parse_public_key(CBS *cbs);
 
 // EVP_marshal_public_key marshals |key| as a DER-encoded SubjectPublicKeyInfo
 // structure (RFC 5280) and appends the result to |cbb|. It returns one on
@@ -366,9 +366,9 @@
 // used concurrently with other non-mutating functions on |pkey|.
 //
 // It returns one on success, or zero on error.
-// OPENSSL_EXPORT int EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
-//                                         const EVP_MD *type, ENGINE *e,
-//                                         EVP_PKEY *pkey);
+OPENSSL_EXPORT int EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
+                                        const EVP_MD *type, ENGINE *e,
+                                        EVP_PKEY *pkey);
 
 // EVP_DigestVerifyUpdate appends |len| bytes from |data| to the data which
 // will be verified by |EVP_DigestVerifyFinal|. It returns one.
@@ -391,9 +391,9 @@
 
 // EVP_DigestVerify verifies that |sig_len| bytes from |sig| are a valid
 // signature for |data|. It returns one on success or zero on error.
-// OPENSSL_EXPORT int EVP_DigestVerify(EVP_MD_CTX *ctx, const uint8_t *sig,
-//                                     size_t sig_len, const uint8_t *data,
-//                                     size_t len);
+OPENSSL_EXPORT int EVP_DigestVerify(EVP_MD_CTX *ctx, const uint8_t *sig,
+                                    size_t sig_len, const uint8_t *data,
+                                    size_t len);
 
 
 // Signing (old functions)
@@ -1089,20 +1089,20 @@
 // } /* EVP_PKEY */;
 
 
-// #if defined(__cplusplus)
-// }  // extern C
+#if defined(__cplusplus)
+}  // extern C
 
-// extern "C++" {
-// BSSL_NAMESPACE_BEGIN
+extern "C++" {
+BSSL_NAMESPACE_BEGIN
 
-// BORINGSSL_MAKE_DELETER(EVP_PKEY, EVP_PKEY_free)
+BORINGSSL_MAKE_DELETER(EVP_PKEY, EVP_PKEY_free)
 // BORINGSSL_MAKE_UP_REF(EVP_PKEY, EVP_PKEY_up_ref)
 // BORINGSSL_MAKE_DELETER(EVP_PKEY_CTX, EVP_PKEY_CTX_free)
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
+}  // extern C++
 
-// #endif
+#endif
 
-// #endif  // OPENSSL_HEADER_EVP_H
+#endif  // OPENSSL_HEADER_EVP_H
