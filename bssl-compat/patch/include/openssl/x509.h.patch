--- a/include/openssl/x509.h
+++ b/include/openssl/x509.h
@@ -60,31 +60,31 @@
  * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
  */
 
-// #ifndef HEADER_X509_H
-// #define HEADER_X509_H
+#ifndef HEADER_X509_H
+#define HEADER_X509_H
 
-// #include <openssl/asn1.h>
-// #include <openssl/base.h>
-// #include <openssl/bio.h>
-// #include <openssl/cipher.h>
-// #include <openssl/dh.h>
-// #include <openssl/dsa.h>
-// #include <openssl/ec.h>
-// #include <openssl/ecdh.h>
-// #include <openssl/ecdsa.h>
-// #include <openssl/evp.h>
-// #include <openssl/obj.h>
-// #include <openssl/pkcs7.h>
-// #include <openssl/pool.h>
-// #include <openssl/rsa.h>
-// #include <openssl/sha.h>
-// #include <openssl/stack.h>
-// #include <openssl/thread.h>
-// #include <time.h>
+#include <openssl/asn1.h>
+#include <openssl/base.h>
+#include <openssl/bio.h>
+#include <openssl/cipher.h>
+#include <openssl/dh.h>
+#include <openssl/dsa.h>
+#include <openssl/ec.h>
+#include <openssl/ecdh.h>
+#include <openssl/ecdsa.h>
+#include <openssl/evp.h>
+#include <openssl/obj.h>
+#include <openssl/pkcs7.h>
+#include <openssl/pool.h>
+#include <openssl/rsa.h>
+#include <openssl/sha.h>
+#include <openssl/stack.h>
+#include <openssl/thread.h>
+#include <time.h>
 
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // Legacy X.509 library.
@@ -116,14 +116,14 @@
 // Instead, mutation functions should only be used when issuing new
 // certificates, as described in a later section.
 
-// DEFINE_STACK_OF(X509)
+DEFINE_STACK_OF(X509)
 
 // X509 is an |ASN1_ITEM| whose ASN.1 type is X.509 Certificate (RFC 5280) and C
 // type is |X509*|.
 // DECLARE_ASN1_ITEM(X509)
 
 // X509_up_ref adds one to the reference count of |x509| and returns one.
-// OPENSSL_EXPORT int X509_up_ref(X509 *x509);
+OPENSSL_EXPORT int X509_up_ref(X509 *x509);
 
 // X509_chain_up_ref returns a newly-allocated |STACK_OF(X509)| containing a
 // shallow copy of |chain|, or NULL on error. That is, the return value has the
@@ -143,7 +143,7 @@
 
 // X509_free decrements |x509|'s reference count and, if zero, releases memory
 // associated with |x509|.
-// OPENSSL_EXPORT void X509_free(X509 *x509);
+OPENSSL_EXPORT void X509_free(X509 *x509);
 
 // d2i_X509 parses up to |len| bytes from |*inp| as a DER-encoded X.509
 // Certificate (RFC 5280), as described in |d2i_SAMPLE_with_reuse|.
@@ -161,13 +161,13 @@
 // TODO(https://crbug.com/boringssl/407): This function should be const and
 // thread-safe but is currently neither in some cases, notably if |x509| was
 // mutated.
-// OPENSSL_EXPORT int i2d_X509(X509 *x509, uint8_t **outp);
+OPENSSL_EXPORT int i2d_X509(X509 *x509, uint8_t **outp);
 
 // X509_VERSION_* are X.509 version numbers. Note the numerical values of all
 // defined X.509 versions are one less than the named version.
-// #define X509_VERSION_1 0
-// #define X509_VERSION_2 1
-// #define X509_VERSION_3 2
+#define X509_VERSION_1 ossl_X509_VERSION_1
+#define X509_VERSION_2 ossl_X509_VERSION_2
+#define X509_VERSION_3 ossl_X509_VERSION_3
 
 // X509_get_version returns the numerical value of |x509|'s version, which will
 // be one of the |X509_VERSION_*| constants.
@@ -177,27 +177,27 @@
 // OPENSSL_EXPORT const ASN1_INTEGER *X509_get0_serialNumber(const X509 *x509);
 
 // X509_get0_notBefore returns |x509|'s notBefore time.
-// OPENSSL_EXPORT const ASN1_TIME *X509_get0_notBefore(const X509 *x509);
+OPENSSL_EXPORT const ASN1_TIME *X509_get0_notBefore(const X509 *x509);
 
 // X509_get0_notAfter returns |x509|'s notAfter time.
-// OPENSSL_EXPORT const ASN1_TIME *X509_get0_notAfter(const X509 *x509);
+OPENSSL_EXPORT const ASN1_TIME *X509_get0_notAfter(const X509 *x509);
 
 // X509_get_issuer_name returns |x509|'s issuer.
-// OPENSSL_EXPORT X509_NAME *X509_get_issuer_name(const X509 *x509);
+OPENSSL_EXPORT X509_NAME *X509_get_issuer_name(const X509 *x509);
 
 // X509_get_subject_name returns |x509|'s subject.
-// OPENSSL_EXPORT X509_NAME *X509_get_subject_name(const X509 *x509);
+OPENSSL_EXPORT X509_NAME *X509_get_subject_name(const X509 *x509);
 
 // X509_get_X509_PUBKEY returns the public key of |x509|. Note this function is
 // not const-correct for legacy reasons. Callers should not modify the returned
 // object.
-// OPENSSL_EXPORT X509_PUBKEY *X509_get_X509_PUBKEY(const X509 *x509);
+OPENSSL_EXPORT X509_PUBKEY *X509_get_X509_PUBKEY(const X509 *x509);
 
 // X509_get_pubkey returns |x509|'s public key as an |EVP_PKEY|, or NULL if the
 // public key was unsupported or could not be decoded. This function returns a
 // reference to the |EVP_PKEY|. The caller must release the result with
 // |EVP_PKEY_free| when done.
-// OPENSSL_EXPORT EVP_PKEY *X509_get_pubkey(X509 *x509);
+OPENSSL_EXPORT EVP_PKEY *X509_get_pubkey(X509 *x509);
 
 // X509_get0_pubkey_bitstr returns the BIT STRING portion of |x509|'s public
 // key. Note this does not contain the AlgorithmIdentifier portion.
@@ -231,8 +231,8 @@
 
 // X509_get_ext_by_OBJ behaves like |X509v3_get_ext_by_OBJ| but searches for
 // extensions in |x|.
-// OPENSSL_EXPORT int X509_get_ext_by_OBJ(const X509 *x, const ASN1_OBJECT *obj,
-//                                        int lastpos);
+OPENSSL_EXPORT int X509_get_ext_by_OBJ(const X509 *x, const ASN1_OBJECT *obj,
+                                       int lastpos);
 
 // X509_get_ext_by_critical behaves like |X509v3_get_ext_by_critical| but
 // searches for extensions in |x|.
@@ -242,7 +242,7 @@
 // X509_get_ext returns the extension in |x| at index |loc|, or NULL if |loc| is
 // out of bounds. This function returns a non-const pointer for OpenSSL
 // compatibility, but callers should not mutate the result.
-// OPENSSL_EXPORT X509_EXTENSION *X509_get_ext(const X509 *x, int loc);
+OPENSSL_EXPORT X509_EXTENSION *X509_get_ext(const X509 *x, int loc);
 
 // X509_get0_tbs_sigalg returns the signature algorithm in |x509|'s
 // TBSCertificate. For the outer signature algorithm, see |X509_get0_signature|.
@@ -287,13 +287,13 @@
 // X509_new returns a newly-allocated, empty |X509| object, or NULL on error.
 // This produces an incomplete certificate which may be filled in to issue a new
 // certificate.
-// OPENSSL_EXPORT X509 *X509_new(void);
+OPENSSL_EXPORT X509 *X509_new(void);
 
 // X509_set_version sets |x509|'s version to |version|, which should be one of
 // the |X509V_VERSION_*| constants. It returns one on success and zero on error.
 //
 // If unsure, use |X509_VERSION_3|.
-// OPENSSL_EXPORT int X509_set_version(X509 *x509, long version);
+OPENSSL_EXPORT int X509_set_version(X509 *x509, long version);
 
 // X509_set_serialNumber sets |x509|'s serial number to |serial|. It returns one
 // on success and zero on error.
@@ -309,10 +309,10 @@
 // OPENSSL_EXPORT int X509_set1_notAfter(X509 *x509, const ASN1_TIME *tm);
 
 // X509_getm_notBefore returns a mutable pointer to |x509|'s notBefore time.
-// OPENSSL_EXPORT ASN1_TIME *X509_getm_notBefore(X509 *x509);
+OPENSSL_EXPORT ASN1_TIME *X509_getm_notBefore(X509 *x509);
 
 // X509_getm_notAfter returns a mutable pointer to |x509|'s notAfter time.
-// OPENSSL_EXPORT ASN1_TIME *X509_getm_notAfter(X509 *x);
+OPENSSL_EXPORT ASN1_TIME *X509_getm_notAfter(X509 *x);
 
 // X509_set_issuer_name sets |x509|'s issuer to a copy of |name|. It returns one
 // on success and zero on error.
@@ -325,7 +325,7 @@
 // X509_set_pubkey sets |x509|'s public key to |pkey|. It returns one on success
 // and zero on error. This function does not take ownership of |pkey| and
 // internally copies and updates reference counts as needed.
-// OPENSSL_EXPORT int X509_set_pubkey(X509 *x509, EVP_PKEY *pkey);
+OPENSSL_EXPORT int X509_set_pubkey(X509 *x509, EVP_PKEY *pkey);
 
 // X509_delete_ext removes the extension in |x| at index |loc| and returns the
 // removed extension, or NULL if |loc| was out of bounds. If non-NULL, the
@@ -345,7 +345,7 @@
 // signature fields. It returns one on success and zero on error. This function
 // uses digest algorithm |md|, or |pkey|'s default if NULL. Other signing
 // parameters use |pkey|'s defaults. To customize them, use |X509_sign_ctx|.
-// OPENSSL_EXPORT int X509_sign(X509 *x509, EVP_PKEY *pkey, const EVP_MD *md);
+OPENSSL_EXPORT int X509_sign(X509 *x509, EVP_PKEY *pkey, const EVP_MD *md);
 
 // X509_sign_ctx signs |x509| with |ctx| and replaces the signature algorithm
 // and signature fields. It returns one on success and zero on error. The
@@ -434,7 +434,7 @@
 // WARNING: In OpenSSL, this function did not set |*out_len| when the alias was
 // missing. Callers that target both OpenSSL and BoringSSL should set the value
 // to zero before calling this function.
-// OPENSSL_EXPORT unsigned char *X509_alias_get0(X509 *x509, int *out_len);
+OPENSSL_EXPORT unsigned char *X509_alias_get0(X509 *x509, int *out_len);
 
 // X509_keyid_get0 looks up |x509|'s key ID. If found, it sets |*out_len| to the
 // key ID's length and returns a pointer to a buffer containing the contents. If
@@ -462,14 +462,14 @@
 // Instead, mutation functions should only be used when issuing new CRLs, as
 // described in a later section.
 
-// DEFINE_STACK_OF(X509_CRL)
+DEFINE_STACK_OF(X509_CRL)
 
 // X509_CRL is an |ASN1_ITEM| whose ASN.1 type is X.509 CertificateList (RFC
 // 5280) and C type is |X509_CRL*|.
 // DECLARE_ASN1_ITEM(X509_CRL)
 
 // X509_CRL_up_ref adds one to the reference count of |crl| and returns one.
-// OPENSSL_EXPORT int X509_CRL_up_ref(X509_CRL *crl);
+OPENSSL_EXPORT int X509_CRL_up_ref(X509_CRL *crl);
 
 // X509_CRL_dup returns a newly-allocated copy of |crl|, or NULL on error. This
 // function works by serializing the structure, so if |crl| is incomplete, it
@@ -482,7 +482,7 @@
 
 // X509_CRL_free decrements |crl|'s reference count and, if zero, releases
 // memory associated with |crl|.
-// OPENSSL_EXPORT void X509_CRL_free(X509_CRL *crl);
+OPENSSL_EXPORT void X509_CRL_free(X509_CRL *crl);
 
 // d2i_X509_CRL parses up to |len| bytes from |*inp| as a DER-encoded X.509
 // CertificateList (RFC 5280), as described in |d2i_SAMPLE_with_reuse|.
@@ -835,8 +835,8 @@
 // moved to the subject alternative name extension. In modern usage, X.509 names
 // are primarily opaque identifiers to link a certificate with its issuer.
 
-// DEFINE_STACK_OF(X509_NAME_ENTRY)
-// DEFINE_STACK_OF(X509_NAME)
+DEFINE_STACK_OF(X509_NAME_ENTRY)
+DEFINE_STACK_OF(X509_NAME)
 
 // X509_NAME is an |ASN1_ITEM| whose ASN.1 type is X.509 Name (RFC 5280) and C
 // type is |X509_NAME*|.
@@ -844,10 +844,10 @@
 
 // X509_NAME_new returns a new, empty |X509_NAME_new|, or NULL on
 // error.
-// OPENSSL_EXPORT X509_NAME *X509_NAME_new(void);
+OPENSSL_EXPORT X509_NAME *X509_NAME_new(void);
 
 // X509_NAME_free releases memory associated with |name|.
-// OPENSSL_EXPORT void X509_NAME_free(X509_NAME *name);
+OPENSSL_EXPORT void X509_NAME_free(X509_NAME *name);
 
 // d2i_X509_NAME parses up to |len| bytes from |*inp| as a DER-encoded X.509
 // Name (RFC 5280), as described in |d2i_SAMPLE_with_reuse|.
@@ -867,7 +867,7 @@
 // TODO(https://crbug.com/boringssl/407): This function should be const and
 // thread-safe but is currently neither in some cases, notably if |name| was
 // mutated.
-// OPENSSL_EXPORT X509_NAME *X509_NAME_dup(X509_NAME *name);
+OPENSSL_EXPORT X509_NAME *X509_NAME_dup(X509_NAME *name);
 
 // X509_NAME_get0_der sets |*out_der| and |*out_der_len|
 //
@@ -887,7 +887,7 @@
 // OPENSSL_EXPORT int X509_NAME_set(X509_NAME **xn, X509_NAME *name);
 
 // X509_NAME_entry_count returns the number of entries in |name|.
-// OPENSSL_EXPORT int X509_NAME_entry_count(const X509_NAME *name);
+OPENSSL_EXPORT int X509_NAME_entry_count(const X509_NAME *name);
 
 // X509_NAME_get_index_by_NID returns the zero-based index of the first
 // attribute in |name| with type |nid|, or -1 if there is none. |nid| should be
@@ -895,8 +895,8 @@
 // searching at |lastpos+1|. To search all attributes, pass in -1, not zero.
 //
 // Indices from this function refer to |X509_NAME|'s flattened representation.
-// OPENSSL_EXPORT int X509_NAME_get_index_by_NID(const X509_NAME *name, int nid,
-//                                               int lastpos);
+OPENSSL_EXPORT int X509_NAME_get_index_by_NID(const X509_NAME *name, int nid,
+                                              int lastpos);
 
 // X509_NAME_get_index_by_OBJ behaves like |X509_NAME_get_index_by_NID| but
 // looks for attributes with type |obj|.
@@ -909,8 +909,8 @@
 // representation. This function returns a non-const pointer for OpenSSL
 // compatibility, but callers should not mutate the result. Doing so will break
 // internal invariants in the library.
-// OPENSSL_EXPORT X509_NAME_ENTRY *X509_NAME_get_entry(const X509_NAME *name,
-//                                                     int loc);
+OPENSSL_EXPORT X509_NAME_ENTRY *X509_NAME_get_entry(const X509_NAME *name,
+                                                    int loc);
 
 // X509_NAME_delete_entry removes and returns the attribute in |name| at index
 // |loc|, or NULL if |loc| is out of range. |loc| is interpreted using
@@ -953,10 +953,10 @@
 
 // X509_NAME_add_entry_by_txt behaves like |X509_NAME_add_entry_by_OBJ| but sets
 // the entry's attribute type to |field|, which is passed to |OBJ_txt2obj|.
-// OPENSSL_EXPORT int X509_NAME_add_entry_by_txt(X509_NAME *name,
-//                                               const char *field, int type,
-//                                               const uint8_t *bytes, int len,
-//                                               int loc, int set);
+OPENSSL_EXPORT int X509_NAME_add_entry_by_txt(X509_NAME *name,
+                                              const char *field, int type,
+                                              const uint8_t *bytes, int len,
+                                              int loc, int set);
 
 // X509_NAME_ENTRY is an |ASN1_ITEM| whose ASN.1 type is AttributeTypeAndValue
 // (RFC 5280) and C type is |X509_NAME_ENTRY*|.
@@ -1026,7 +1026,7 @@
 
 // X509_NAME_ENTRY_set returns the zero-based index of the RDN which contains
 // |entry|. Consecutive entries with the same index are part of the same RDN.
-// OPENSSL_EXPORT int X509_NAME_ENTRY_set(const X509_NAME_ENTRY *entry);
+OPENSSL_EXPORT int X509_NAME_ENTRY_set(const X509_NAME_ENTRY *entry);
 
 // X509_NAME_ENTRY_create_by_OBJ creates a new |X509_NAME_ENTRY| with attribute
 // type |obj|. The attribute value is determined from |type|, |bytes|, and |len|
@@ -1113,8 +1113,8 @@
 // X509_EXTENSION_get_data returns |ne|'s extension value. This function returns
 // a non-const pointer for OpenSSL compatibility, but callers should not mutate
 // the result.
-// OPENSSL_EXPORT ASN1_OCTET_STRING *X509_EXTENSION_get_data(
-//     const X509_EXTENSION *ne);
+OPENSSL_EXPORT ASN1_OCTET_STRING *X509_EXTENSION_get_data(
+    const X509_EXTENSION *ne);
 
 // X509_EXTENSION_get_critical returns one if |ex| is critical and zero
 // otherwise.
@@ -1354,8 +1354,8 @@
 // to |out|. |EVP_MD_CTX_size| bytes are written, which is at most
 // |EVP_MAX_MD_SIZE|. If |out_len| is not NULL, |*out_len| is set to the number
 // of bytes written. This function returns one on success and zero on error.
-// OPENSSL_EXPORT int X509_NAME_digest(const X509_NAME *name, const EVP_MD *md,
-//                                     uint8_t *out, unsigned *out_len);
+OPENSSL_EXPORT int X509_NAME_digest(const X509_NAME *name, const EVP_MD *md,
+                                    uint8_t *out, unsigned *out_len);
 
 // The following functions behave like the corresponding unsuffixed |d2i_*|
 // functions, but read the result from |bp| instead. Callers using these
@@ -1462,7 +1462,7 @@
 //                                                    CRYPTO_EX_free *free_func);
 // OPENSSL_EXPORT int X509_STORE_CTX_set_ex_data(X509_STORE_CTX *ctx, int idx,
 //                                               void *data);
-// OPENSSL_EXPORT void *X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx, int idx);
+OPENSSL_EXPORT void *X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx, int idx);
 
 
 // Deprecated functions.
@@ -1512,7 +1512,7 @@
 
 // X509_get_serialNumber returns a mutable pointer to |x509|'s serial number.
 // Prefer |X509_get0_serialNumber|.
-// OPENSSL_EXPORT ASN1_INTEGER *X509_get_serialNumber(X509 *x509);
+OPENSSL_EXPORT ASN1_INTEGER *X509_get_serialNumber(X509 *x509);
 
 // X509_NAME_get_text_by_OBJ finds the first attribute with type |obj| in
 // |name|. If found, it ignores the value's ASN.1 type, writes the raw
@@ -1753,7 +1753,7 @@
 
 // } /* X509_INFO */;
 
-// DEFINE_STACK_OF(X509_INFO)
+DEFINE_STACK_OF(X509_INFO)
 
 // The next 2 structures and their 8 routines were sent to me by
 // Pat Richard <patr@x509.com> and are used to manipulate
@@ -1776,7 +1776,7 @@
 // Note that decoding an |X509| object will not check for invalid extensions. To
 // detect the error case, call |X509_get_extensions_flags| and check the
 // |EXFLAG_INVALID| bit.
-// OPENSSL_EXPORT long X509_get_pathlen(X509 *x509);
+OPENSSL_EXPORT long X509_get_pathlen(X509 *x509);
 
 // X509_SIG_get0 sets |*out_alg| and |*out_digest| to non-owning pointers to
 // |sig|'s algorithm and digest fields, respectively. Either |out_alg| and
@@ -1792,13 +1792,13 @@
 // X509_verify_cert_error_string returns |err| as a human-readable string, where
 // |err| should be one of the |X509_V_*| values. If |err| is unknown, it returns
 // a default description.
-// OPENSSL_EXPORT const char *X509_verify_cert_error_string(long err);
+OPENSSL_EXPORT const char *X509_verify_cert_error_string(long err);
 
 // X509_verify checks that |x509| has a valid signature by |pkey|. It returns
 // one if the signature is valid and zero otherwise. Note this function only
 // checks the signature itself and does not perform a full certificate
 // validation.
-// OPENSSL_EXPORT int X509_verify(X509 *x509, EVP_PKEY *pkey);
+OPENSSL_EXPORT int X509_verify(X509 *x509, EVP_PKEY *pkey);
 
 // X509_REQ_verify checks that |req| has a valid signature by |pkey|. It returns
 // one if the signature is valid and zero otherwise.
@@ -1897,7 +1897,7 @@
 // success, or NULL on error. The caller must release the result with
 // |EVP_PKEY_free| when done. The |EVP_PKEY| is cached in |key|, so callers must
 // not mutate the result.
-// OPENSSL_EXPORT EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key);
+OPENSSL_EXPORT EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key);
 
 // DECLARE_ASN1_FUNCTIONS_const(X509_SIG)
 
@@ -1933,7 +1933,7 @@
 // DECLARE_ASN1_FUNCTIONS_const(NETSCAPE_SPKAC)
 
 // OPENSSL_EXPORT X509_INFO *X509_INFO_new(void);
-// OPENSSL_EXPORT void X509_INFO_free(X509_INFO *a);
+OPENSSL_EXPORT void X509_INFO_free(X509_INFO *a);
 // OPENSSL_EXPORT char *X509_NAME_oneline(const X509_NAME *a, char *buf, int size);
 
 // OPENSSL_EXPORT int ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data,
@@ -2090,12 +2090,12 @@
 // OPENSSL_EXPORT unsigned long X509_issuer_name_hash_old(X509 *a);
 // OPENSSL_EXPORT unsigned long X509_subject_name_hash_old(X509 *x);
 
-// OPENSSL_EXPORT int X509_cmp(const X509 *a, const X509 *b);
-// OPENSSL_EXPORT int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b);
+OPENSSL_EXPORT int X509_cmp(const X509 *a, const X509 *b);
+OPENSSL_EXPORT int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b);
 // OPENSSL_EXPORT unsigned long X509_NAME_hash(X509_NAME *x);
 // OPENSSL_EXPORT unsigned long X509_NAME_hash_old(X509_NAME *x);
 
-// OPENSSL_EXPORT int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b);
+OPENSSL_EXPORT int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b);
 // OPENSSL_EXPORT int X509_CRL_match(const X509_CRL *a, const X509_CRL *b);
 // OPENSSL_EXPORT int X509_print_ex_fp(FILE *bp, X509 *x, unsigned long nmflag,
 //                                     unsigned long cflag);
@@ -2106,8 +2106,8 @@
 //                                          int indent, unsigned long flags);
 
 // OPENSSL_EXPORT int X509_NAME_print(BIO *bp, const X509_NAME *name, int obase);
-// OPENSSL_EXPORT int X509_NAME_print_ex(BIO *out, const X509_NAME *nm, int indent,
-//                                       unsigned long flags);
+OPENSSL_EXPORT int X509_NAME_print_ex(BIO *out, const X509_NAME *nm, int indent,
+                                      unsigned long flags);
 // OPENSSL_EXPORT int X509_print_ex(BIO *bp, X509 *x, unsigned long nmflag,
 //                                  unsigned long cflag);
 // OPENSSL_EXPORT int X509_print(BIO *bp, X509 *x);
@@ -2121,8 +2121,8 @@
 //
 // WARNING: This function is difficult to use correctly. See the documentation
 // for |X509V3_get_d2i| for details.
-// OPENSSL_EXPORT void *X509_get_ext_d2i(const X509 *x509, int nid,
-//                                       int *out_critical, int *out_idx);
+OPENSSL_EXPORT void *X509_get_ext_d2i(const X509 *x509, int nid,
+                                      int *out_critical, int *out_idx);
 
 // X509_add1_ext_i2d behaves like |X509V3_add1_i2d| but adds the extension to
 // |x|'s extension list.
@@ -2130,8 +2130,8 @@
 // WARNING: This function may return zero or -1 on error. The caller must also
 // ensure |value|'s type matches |nid|. See the documentation for
 // |X509V3_add1_i2d| for details.
-// OPENSSL_EXPORT int X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,
-//                                      unsigned long flags);
+OPENSSL_EXPORT int X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,
+                                     unsigned long flags);
 
 // X509_CRL_get_ext_d2i behaves like |X509V3_get_d2i| but looks for the
 // extension in |crl|'s extension list.
@@ -2357,7 +2357,7 @@
 // OPENSSL_EXPORT ASN1_TYPE *X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr,
 //                                                    int idx);
 
-// OPENSSL_EXPORT int X509_verify_cert(X509_STORE_CTX *ctx);
+OPENSSL_EXPORT int X509_verify_cert(X509_STORE_CTX *ctx);
 
 // lookup a cert from a X509 STACK
 // OPENSSL_EXPORT X509 *X509_find_by_issuer_and_serial(STACK_OF(X509) *sk,
@@ -2440,7 +2440,7 @@
 
 // DECLARE_ASN1_FUNCTIONS_const(RSA_PSS_PARAMS)
 
-/*
+// /*
 // SSL_CTX -> X509_STORE
 //                 -> X509_LOOKUP
 //                         ->X509_LOOKUP_METHOD
@@ -2465,7 +2465,7 @@
 // DEFINE_STACK_OF(X509_OBJECT)
 // DEFINE_STACK_OF(X509_VERIFY_PARAM)
 
-// typedef int (*X509_STORE_CTX_verify_cb)(int, X509_STORE_CTX *);
+typedef int (*X509_STORE_CTX_verify_cb)(int, X509_STORE_CTX *);
 // typedef int (*X509_STORE_CTX_verify_fn)(X509_STORE_CTX *);
 // typedef int (*X509_STORE_CTX_get_issuer_fn)(X509 **issuer, X509_STORE_CTX *ctx,
 //                                             X509 *x);
@@ -2799,16 +2799,16 @@
 // OPENSSL_EXPORT void X509_OBJECT_free_contents(X509_OBJECT *a);
 // OPENSSL_EXPORT int X509_OBJECT_get_type(const X509_OBJECT *a);
 // OPENSSL_EXPORT X509 *X509_OBJECT_get0_X509(const X509_OBJECT *a);
-// OPENSSL_EXPORT X509_STORE *X509_STORE_new(void);
+OPENSSL_EXPORT X509_STORE *X509_STORE_new(void);
 // OPENSSL_EXPORT int X509_STORE_up_ref(X509_STORE *store);
-// OPENSSL_EXPORT void X509_STORE_free(X509_STORE *v);
+OPENSSL_EXPORT void X509_STORE_free(X509_STORE *v);
 
 // OPENSSL_EXPORT STACK_OF(X509_OBJECT) *X509_STORE_get0_objects(X509_STORE *st);
 // OPENSSL_EXPORT STACK_OF(X509) *X509_STORE_get1_certs(X509_STORE_CTX *st,
 //                                                      X509_NAME *nm);
 // OPENSSL_EXPORT STACK_OF(X509_CRL) *X509_STORE_get1_crls(X509_STORE_CTX *st,
 //                                                         X509_NAME *nm);
-// OPENSSL_EXPORT int X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags);
+OPENSSL_EXPORT int X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags);
 // OPENSSL_EXPORT int X509_STORE_set_purpose(X509_STORE *ctx, int purpose);
 // OPENSSL_EXPORT int X509_STORE_set_trust(X509_STORE *ctx, int trust);
 // OPENSSL_EXPORT int X509_STORE_set1_param(X509_STORE *ctx,
@@ -2822,8 +2822,8 @@
 // OPENSSL_EXPORT void X509_STORE_CTX_set_verify(X509_STORE_CTX *ctx,
 //                                               X509_STORE_CTX_verify_fn verify);
 // OPENSSL_EXPORT X509_STORE_CTX_verify_fn X509_STORE_get_verify(X509_STORE *ctx);
-// OPENSSL_EXPORT void X509_STORE_set_verify_cb(
-//     X509_STORE *ctx, X509_STORE_CTX_verify_cb verify_cb);
+OPENSSL_EXPORT void X509_STORE_set_verify_cb(
+    X509_STORE *ctx, X509_STORE_CTX_verify_cb verify_cb);
 // #define X509_STORE_set_verify_cb_func(ctx, func) \
 //   X509_STORE_set_verify_cb((ctx), (func))
 // OPENSSL_EXPORT X509_STORE_CTX_verify_cb
@@ -2867,17 +2867,17 @@
 // OPENSSL_EXPORT X509_STORE_CTX_cleanup_fn
 // X509_STORE_get_cleanup(X509_STORE *ctx);
 
-// OPENSSL_EXPORT X509_STORE_CTX *X509_STORE_CTX_new(void);
+OPENSSL_EXPORT X509_STORE_CTX *X509_STORE_CTX_new(void);
 
 // OPENSSL_EXPORT int X509_STORE_CTX_get1_issuer(X509 **issuer,
 //                                               X509_STORE_CTX *ctx, X509 *x);
 
 // OPENSSL_EXPORT void X509_STORE_CTX_zero(X509_STORE_CTX *ctx);
-// OPENSSL_EXPORT void X509_STORE_CTX_free(X509_STORE_CTX *ctx);
-// OPENSSL_EXPORT int X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store,
-//                                        X509 *x509, STACK_OF(X509) *chain);
-// OPENSSL_EXPORT void X509_STORE_CTX_trusted_stack(X509_STORE_CTX *ctx,
-//                                                  STACK_OF(X509) *sk);
+OPENSSL_EXPORT void X509_STORE_CTX_free(X509_STORE_CTX *ctx);
+OPENSSL_EXPORT int X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store,
+                                       X509 *x509, STACK_OF(X509) *chain);
+OPENSSL_EXPORT void X509_STORE_CTX_trusted_stack(X509_STORE_CTX *ctx,
+                                                 STACK_OF(X509) *sk);
 // OPENSSL_EXPORT void X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx);
 
 // OPENSSL_EXPORT X509_STORE *X509_STORE_CTX_get0_store(X509_STORE_CTX *ctx);
@@ -2889,8 +2889,8 @@
 // OPENSSL_EXPORT X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir(void);
 // OPENSSL_EXPORT X509_LOOKUP_METHOD *X509_LOOKUP_file(void);
 
-// OPENSSL_EXPORT int X509_STORE_add_cert(X509_STORE *ctx, X509 *x);
-// OPENSSL_EXPORT int X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x);
+OPENSSL_EXPORT int X509_STORE_add_cert(X509_STORE *ctx, X509 *x);
+OPENSSL_EXPORT int X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x);
 
 // OPENSSL_EXPORT int X509_STORE_get_by_subject(X509_STORE_CTX *vs, int type,
 //                                              X509_NAME *name, X509_OBJECT *ret);
@@ -2928,9 +2928,9 @@
 //                                              const char *dir);
 // OPENSSL_EXPORT int X509_STORE_set_default_paths(X509_STORE *ctx);
 // #endif
-// OPENSSL_EXPORT int X509_STORE_CTX_get_error(X509_STORE_CTX *ctx);
-// OPENSSL_EXPORT void X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int s);
-// OPENSSL_EXPORT int X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx);
+OPENSSL_EXPORT int X509_STORE_CTX_get_error(X509_STORE_CTX *ctx);
+OPENSSL_EXPORT void X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int s);
+OPENSSL_EXPORT int X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx);
 // OPENSSL_EXPORT X509 *X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx);
 // OPENSSL_EXPORT X509 *X509_STORE_CTX_get0_current_issuer(X509_STORE_CTX *ctx);
 // OPENSSL_EXPORT X509_CRL *X509_STORE_CTX_get0_current_crl(X509_STORE_CTX *ctx);
@@ -2942,10 +2942,10 @@
 // OPENSSL_EXPORT void X509_STORE_CTX_set_cert(X509_STORE_CTX *c, X509 *x);
 // OPENSSL_EXPORT void X509_STORE_CTX_set_chain(X509_STORE_CTX *c,
 //                                              STACK_OF(X509) *sk);
-// OPENSSL_EXPORT STACK_OF(X509) *X509_STORE_CTX_get0_untrusted(
-//     X509_STORE_CTX *ctx);
-// OPENSSL_EXPORT void X509_STORE_CTX_set0_crls(X509_STORE_CTX *c,
-//                                              STACK_OF(X509_CRL) *sk);
+OPENSSL_EXPORT STACK_OF(X509) *X509_STORE_CTX_get0_untrusted(
+    X509_STORE_CTX *ctx);
+OPENSSL_EXPORT void X509_STORE_CTX_set0_crls(X509_STORE_CTX *c,
+                                             STACK_OF(X509_CRL) *sk);
 // OPENSSL_EXPORT int X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose);
 // OPENSSL_EXPORT int X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust);
 // OPENSSL_EXPORT int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx,
@@ -2955,15 +2955,15 @@
 //                                              unsigned long flags);
 // OPENSSL_EXPORT void X509_STORE_CTX_set_time(X509_STORE_CTX *ctx,
 //                                             unsigned long flags, time_t t);
-// OPENSSL_EXPORT void X509_STORE_CTX_set_verify_cb(
-//     X509_STORE_CTX *ctx, int (*verify_cb)(int, X509_STORE_CTX *));
+OPENSSL_EXPORT void X509_STORE_CTX_set_verify_cb(
+    X509_STORE_CTX *ctx, int (*verify_cb)(int, X509_STORE_CTX *));
 
-// OPENSSL_EXPORT X509_VERIFY_PARAM *X509_STORE_CTX_get0_param(
-//     X509_STORE_CTX *ctx);
+OPENSSL_EXPORT X509_VERIFY_PARAM *X509_STORE_CTX_get0_param(
+    X509_STORE_CTX *ctx);
 // OPENSSL_EXPORT void X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx,
 //                                               X509_VERIFY_PARAM *param);
-// OPENSSL_EXPORT int X509_STORE_CTX_set_default(X509_STORE_CTX *ctx,
-//                                               const char *name);
+OPENSSL_EXPORT int X509_STORE_CTX_set_default(X509_STORE_CTX *ctx,
+                                              const char *name);
 
 // X509_VERIFY_PARAM functions
 
@@ -2971,14 +2971,14 @@
 // OPENSSL_EXPORT void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param);
 // OPENSSL_EXPORT int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *to,
 //                                              const X509_VERIFY_PARAM *from);
-// OPENSSL_EXPORT int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to,
-//                                           const X509_VERIFY_PARAM *from);
+OPENSSL_EXPORT int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to,
+                                          const X509_VERIFY_PARAM *from);
 // OPENSSL_EXPORT int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param,
 //                                                const char *name);
-// OPENSSL_EXPORT int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param,
-//                                                unsigned long flags);
-// OPENSSL_EXPORT int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param,
-//                                                  unsigned long flags);
+OPENSSL_EXPORT int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param,
+                                               unsigned long flags);
+OPENSSL_EXPORT int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param,
+                                                 unsigned long flags);
 // OPENSSL_EXPORT unsigned long X509_VERIFY_PARAM_get_flags(
 //     X509_VERIFY_PARAM *param);
 // OPENSSL_EXPORT int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param,
@@ -2987,8 +2987,8 @@
 //                                                int trust);
 // OPENSSL_EXPORT void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param,
 //                                                 int depth);
-// OPENSSL_EXPORT void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param,
-//                                                time_t t);
+OPENSSL_EXPORT void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param,
+                                               time_t t);
 // OPENSSL_EXPORT int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param,
 //                                                  ASN1_OBJECT *policy);
 // OPENSSL_EXPORT int X509_VERIFY_PARAM_set1_policies(
@@ -3024,42 +3024,42 @@
 // OPENSSL_EXPORT void X509_VERIFY_PARAM_table_cleanup(void);
 
 
-// #if defined(__cplusplus)
-// }  // extern C
-// #endif
+#if defined(__cplusplus)
+}  // extern C
+#endif
 
-// #if !defined(BORINGSSL_NO_CXX)
-// extern "C++" {
+#if !defined(BORINGSSL_NO_CXX)
+extern "C++" {
 
-// BSSL_NAMESPACE_BEGIN
+BSSL_NAMESPACE_BEGIN
 
 // BORINGSSL_MAKE_DELETER(NETSCAPE_SPKI, NETSCAPE_SPKI_free)
 // BORINGSSL_MAKE_DELETER(RSA_PSS_PARAMS, RSA_PSS_PARAMS_free)
-// BORINGSSL_MAKE_DELETER(X509, X509_free)
-// BORINGSSL_MAKE_UP_REF(X509, X509_up_ref)
+BORINGSSL_MAKE_DELETER(X509, X509_free)
+BORINGSSL_MAKE_UP_REF(X509, X509_up_ref)
 // BORINGSSL_MAKE_DELETER(X509_ALGOR, X509_ALGOR_free)
 // BORINGSSL_MAKE_DELETER(X509_ATTRIBUTE, X509_ATTRIBUTE_free)
-// BORINGSSL_MAKE_DELETER(X509_CRL, X509_CRL_free)
-// BORINGSSL_MAKE_UP_REF(X509_CRL, X509_CRL_up_ref)
+BORINGSSL_MAKE_DELETER(X509_CRL, X509_CRL_free)
+BORINGSSL_MAKE_UP_REF(X509_CRL, X509_CRL_up_ref)
 // BORINGSSL_MAKE_DELETER(X509_EXTENSION, X509_EXTENSION_free)
-// BORINGSSL_MAKE_DELETER(X509_INFO, X509_INFO_free)
+BORINGSSL_MAKE_DELETER(X509_INFO, X509_INFO_free)
 // BORINGSSL_MAKE_DELETER(X509_LOOKUP, X509_LOOKUP_free)
-// BORINGSSL_MAKE_DELETER(X509_NAME, X509_NAME_free)
+BORINGSSL_MAKE_DELETER(X509_NAME, X509_NAME_free)
 // BORINGSSL_MAKE_DELETER(X509_NAME_ENTRY, X509_NAME_ENTRY_free)
 // BORINGSSL_MAKE_DELETER(X509_PKEY, X509_PKEY_free)
 // BORINGSSL_MAKE_DELETER(X509_PUBKEY, X509_PUBKEY_free)
 // BORINGSSL_MAKE_DELETER(X509_REQ, X509_REQ_free)
 // BORINGSSL_MAKE_DELETER(X509_REVOKED, X509_REVOKED_free)
 // BORINGSSL_MAKE_DELETER(X509_SIG, X509_SIG_free)
-// BORINGSSL_MAKE_DELETER(X509_STORE, X509_STORE_free)
+BORINGSSL_MAKE_DELETER(X509_STORE, X509_STORE_free)
 // BORINGSSL_MAKE_UP_REF(X509_STORE, X509_STORE_up_ref)
-// BORINGSSL_MAKE_DELETER(X509_STORE_CTX, X509_STORE_CTX_free)
+BORINGSSL_MAKE_DELETER(X509_STORE_CTX, X509_STORE_CTX_free)
 // BORINGSSL_MAKE_DELETER(X509_VERIFY_PARAM, X509_VERIFY_PARAM_free)
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
-// #endif  // !BORINGSSL_NO_CXX
+}  // extern C++
+#endif  // !BORINGSSL_NO_CXX
 
 #ifdef ossl_X509_R_AKID_MISMATCH
 #define X509_R_AKID_MISMATCH ossl_X509_R_AKID_MISMATCH
@@ -3194,4 +3194,4 @@
 #define X509_R_NO_CRL_FOUND ossl_X509_R_NO_CRL_FOUND
 #endif
 
-// #endif
+#endif
