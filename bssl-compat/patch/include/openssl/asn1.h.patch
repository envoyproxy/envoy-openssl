--- a/include/openssl/asn1.h
+++ b/include/openssl/asn1.h
@@ -55,20 +55,20 @@
  * [including the GNU Public Licence.]
  */
 
-// #ifndef HEADER_ASN1_H
-// #define HEADER_ASN1_H
+#ifndef HEADER_ASN1_H
+#define HEADER_ASN1_H
 
-// #include <openssl/base.h>
+#include <openssl/base.h>
 
-// #include <time.h>
+#include <time.h>
 
-// #include <openssl/bio.h>
-// #include <openssl/bn.h>
-// #include <openssl/stack.h>
+#include <openssl/bio.h>
+#include <openssl/bn.h>
+#include <openssl/stack.h>
 
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // Legacy ASN.1 library.
@@ -296,7 +296,7 @@
 // DECLARE_ASN1_ITEM declares an |ASN1_ITEM| with name |name|. The |ASN1_ITEM|
 // may be referenced with |ASN1_ITEM_rptr|. Uses of this macro should document
 // the corresponding ASN.1 and C types.
-// #define DECLARE_ASN1_ITEM(name) extern OPENSSL_EXPORT const ASN1_ITEM name##_it;
+#define DECLARE_ASN1_ITEM(name) extern OPENSSL_EXPORT const ASN1_ITEM name##_it;
 
 // ASN1_ITEM_rptr returns the |const ASN1_ITEM *| named |name|.
 // #define ASN1_ITEM_rptr(name) (&(name##_it))
@@ -563,7 +563,7 @@
 // OPENSSL_EXPORT ASN1_STRING *ASN1_STRING_new(void);
 
 // ASN1_STRING_free releases memory associated with |str|.
-// OPENSSL_EXPORT void ASN1_STRING_free(ASN1_STRING *str);
+OPENSSL_EXPORT void ASN1_STRING_free(ASN1_STRING *str);
 
 // ASN1_STRING_copy sets |dst| to a copy of |str|. It returns one on success and
 // zero on error.
@@ -579,18 +579,18 @@
 // ASN1_STRING_get0_data returns a pointer to |str|'s contents. Callers should
 // use |ASN1_STRING_length| to determine the length of the string. The string
 // may have embedded NUL bytes and may not be NUL-terminated.
-// OPENSSL_EXPORT const unsigned char *ASN1_STRING_get0_data(
-//     const ASN1_STRING *str);
+OPENSSL_EXPORT const unsigned char *ASN1_STRING_get0_data(
+    const ASN1_STRING *str);
 
 // ASN1_STRING_data returns a mutable pointer to |str|'s contents. Callers
 // should use |ASN1_STRING_length| to determine the length of the string. The
 // string may have embedded NUL bytes and may not be NUL-terminated.
 //
 // Prefer |ASN1_STRING_get0_data|.
-// OPENSSL_EXPORT unsigned char *ASN1_STRING_data(ASN1_STRING *str);
+OPENSSL_EXPORT unsigned char *ASN1_STRING_data(ASN1_STRING *str);
 
 // ASN1_STRING_length returns the length of |str|, in bytes.
-// OPENSSL_EXPORT int ASN1_STRING_length(const ASN1_STRING *str);
+OPENSSL_EXPORT int ASN1_STRING_length(const ASN1_STRING *str);
 
 // ASN1_STRING_cmp compares |a| and |b|'s type and contents. It returns an
 // integer equal to, less than, or greater than zero if |a| is equal to, less
@@ -608,7 +608,7 @@
 // |data|. It returns one on success and zero on error. If |data| is NULL, it
 // updates the length and allocates the buffer as needed, but does not
 // initialize the contents.
-// OPENSSL_EXPORT int ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
+OPENSSL_EXPORT int ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
 
 // ASN1_STRING_set0 sets the contents of |str| to |len| bytes from |data|. It
 // takes ownership of |data|, which must have been allocated with
@@ -619,7 +619,7 @@
 // |V_ASN1_*| constant.
 // OPENSSL_EXPORT ASN1_BMPSTRING *ASN1_BMPSTRING_new(void);
 // OPENSSL_EXPORT ASN1_GENERALSTRING *ASN1_GENERALSTRING_new(void);
-// OPENSSL_EXPORT ASN1_IA5STRING *ASN1_IA5STRING_new(void);
+OPENSSL_EXPORT ASN1_IA5STRING *ASN1_IA5STRING_new(void);
 // OPENSSL_EXPORT ASN1_OCTET_STRING *ASN1_OCTET_STRING_new(void);
 // OPENSSL_EXPORT ASN1_PRINTABLESTRING *ASN1_PRINTABLESTRING_new(void);
 // OPENSSL_EXPORT ASN1_T61STRING *ASN1_T61STRING_new(void);
@@ -630,7 +630,7 @@
 // The following functions call |ASN1_STRING_free|.
 // OPENSSL_EXPORT void ASN1_BMPSTRING_free(ASN1_BMPSTRING *str);
 // OPENSSL_EXPORT void ASN1_GENERALSTRING_free(ASN1_GENERALSTRING *str);
-// OPENSSL_EXPORT void ASN1_IA5STRING_free(ASN1_IA5STRING *str);
+OPENSSL_EXPORT void ASN1_IA5STRING_free(ASN1_IA5STRING *str);
 // OPENSSL_EXPORT void ASN1_OCTET_STRING_free(ASN1_OCTET_STRING *str);
 // OPENSSL_EXPORT void ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING *str);
 // OPENSSL_EXPORT void ASN1_T61STRING_free(ASN1_T61STRING *str);
@@ -1037,10 +1037,10 @@
 
 // ASN1_INTEGER_new calls |ASN1_STRING_type_new| with |V_ASN1_INTEGER|. The
 // resulting object has value zero.
-// OPENSSL_EXPORT ASN1_INTEGER *ASN1_INTEGER_new(void);
+OPENSSL_EXPORT ASN1_INTEGER *ASN1_INTEGER_new(void);
 
 // ASN1_INTEGER_free calls |ASN1_STRING_free|.
-// OPENSSL_EXPORT void ASN1_INTEGER_free(ASN1_INTEGER *str);
+OPENSSL_EXPORT void ASN1_INTEGER_free(ASN1_INTEGER *str);
 
 // ASN1_INTEGER_dup calls |ASN1_STRING_dup|.
 // OPENSSL_EXPORT ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x);
@@ -1061,11 +1061,11 @@
 // DER-encoded INTEGER, excluding the tag and length. It behaves like
 // |d2i_SAMPLE_with_reuse| except, on success, it always consumes all |len|
 // bytes.
-//
+
 // TODO(https://crbug.com/boringssl/354): This function currently also accepts
 // some invalid inputs, but this will be removed in the future.
-// OPENSSL_EXPORT ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER **in,
-//                                               const uint8_t **outp, long len);
+OPENSSL_EXPORT ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER **in,
+                                              const uint8_t **outp, long len);
 
 // i2c_ASN1_INTEGER encodes |in| as the contents of a DER-encoded INTEGER,
 // excluding the tag and length. If |outp| is non-NULL, it writes the result to
@@ -1117,7 +1117,7 @@
 // ASN1_INTEGER_to_BN sets |bn| to the value of |ai| and returns |bn| on success
 // or NULL or error. If |bn| is NULL, it returns a newly-allocated |BIGNUM| on
 // success instead, which the caller must release with |BN_free|.
-// OPENSSL_EXPORT BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn);
+OPENSSL_EXPORT BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn);
 
 // ASN1_INTEGER_cmp compares the values of |x| and |y|. It returns an integer
 // equal to, less than, or greater than zero if |x| is equal to, less than, or
@@ -1318,10 +1318,10 @@
 // ASN1_TIME_new returns a newly-allocated |ASN1_TIME| with type -1, or NULL on
 // error. The resulting |ASN1_TIME| is not a valid X.509 Time until initialized
 // with a value.
-// OPENSSL_EXPORT ASN1_TIME *ASN1_TIME_new(void);
+OPENSSL_EXPORT ASN1_TIME *ASN1_TIME_new(void);
 
 // ASN1_TIME_free releases memory associated with |str|.
-// OPENSSL_EXPORT void ASN1_TIME_free(ASN1_TIME *str);
+OPENSSL_EXPORT void ASN1_TIME_free(ASN1_TIME *str);
 
 // d2i_ASN1_TIME parses up to |len| bytes from |*inp| as a DER-encoded X.509
 // Time (RFC 5280), as described in |d2i_SAMPLE_with_reuse|.
@@ -1349,8 +1349,8 @@
 //
 // Note this function may fail on overflow, or if |from| or |to| cannot be
 // decoded.
-// OPENSSL_EXPORT int ASN1_TIME_diff(int *out_days, int *out_seconds,
-//                                   const ASN1_TIME *from, const ASN1_TIME *to);
+OPENSSL_EXPORT int ASN1_TIME_diff(int *out_days, int *out_seconds,
+                                  const ASN1_TIME *from, const ASN1_TIME *to);
 
 // ASN1_TIME_set represents |t| as a GeneralizedTime or UTCTime and writes
 // the result to |s|. As in RFC 5280, section 4.1.2.5, it uses UTCTime when the
@@ -1358,7 +1358,7 @@
 // on error. If |s| is NULL, it returns a newly-allocated |ASN1_TIME| instead.
 //
 // Note this function may fail if the time is out of range for GeneralizedTime.
-// OPENSSL_EXPORT ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t);
+OPENSSL_EXPORT ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t);
 
 // ASN1_TIME_adj adds |offset_day| days and |offset_sec| seconds to
 // |t| and writes the result to |s|. As in RFC 5280, section 4.1.2.5, it uses
@@ -1368,8 +1368,8 @@
 //
 // Note this function may fail if the time overflows or is out of range for
 // GeneralizedTime.
-// OPENSSL_EXPORT ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t, int offset_day,
-//                                         long offset_sec);
+OPENSSL_EXPORT ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t, int offset_day,
+                                        long offset_sec);
 
 // ASN1_TIME_check returns one if |t| is a valid UTCTime or GeneralizedTime, and
 // zero otherwise. |t|'s type determines which check is performed. This
@@ -1837,38 +1837,38 @@
 // prototypes directly. Particularly when |type|, |itname|, or |name| differ,
 // the macros can be difficult to understand.
 
-// #define DECLARE_ASN1_FUNCTIONS(type) DECLARE_ASN1_FUNCTIONS_name(type, type)
+#define DECLARE_ASN1_FUNCTIONS(type) DECLARE_ASN1_FUNCTIONS_name(type, type)
 
-// #define DECLARE_ASN1_ALLOC_FUNCTIONS(type) \
-//   DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, type)
+#define DECLARE_ASN1_ALLOC_FUNCTIONS(type) \
+  DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, type)
 
-// #define DECLARE_ASN1_FUNCTIONS_name(type, name) \
-//   DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name) \
-//   DECLARE_ASN1_ENCODE_FUNCTIONS(type, name, name)
+#define DECLARE_ASN1_FUNCTIONS_name(type, name) \
+  DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name) \
+  DECLARE_ASN1_ENCODE_FUNCTIONS(type, name, name)
 
 // #define DECLARE_ASN1_FUNCTIONS_fname(type, itname, name) \
 //   DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name)          \
 //   DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)
 
-// #define DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)             \
-//   OPENSSL_EXPORT type *d2i_##name(type **a, const unsigned char **in, \
-//                                   long len);                          \
-//   OPENSSL_EXPORT int i2d_##name(type *a, unsigned char **out);        \
-//   DECLARE_ASN1_ITEM(itname)
-
-// #define DECLARE_ASN1_ENCODE_FUNCTIONS_const(type, name)               \
-//   OPENSSL_EXPORT type *d2i_##name(type **a, const unsigned char **in, \
-//                                   long len);                          \
-//   OPENSSL_EXPORT int i2d_##name(const type *a, unsigned char **out);  \
-//   DECLARE_ASN1_ITEM(name)
-
-// #define DECLARE_ASN1_FUNCTIONS_const(name) \
-//   DECLARE_ASN1_ALLOC_FUNCTIONS(name)       \
-//   DECLARE_ASN1_ENCODE_FUNCTIONS_const(name, name)
-
-// #define DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name) \
-//   OPENSSL_EXPORT type *name##_new(void);              \
-//   OPENSSL_EXPORT void name##_free(type *a);
+#define DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)             \
+  OPENSSL_EXPORT type *d2i_##name(type **a, const unsigned char **in, \
+                                  long len);                          \
+  OPENSSL_EXPORT int i2d_##name(type *a, unsigned char **out);        \
+  DECLARE_ASN1_ITEM(itname)
+
+#define DECLARE_ASN1_ENCODE_FUNCTIONS_const(type, name)               \
+  OPENSSL_EXPORT type *d2i_##name(type **a, const unsigned char **in, \
+                                  long len);                          \
+  OPENSSL_EXPORT int i2d_##name(const type *a, unsigned char **out);  \
+  DECLARE_ASN1_ITEM(name)
+
+#define DECLARE_ASN1_FUNCTIONS_const(name) \
+  DECLARE_ASN1_ALLOC_FUNCTIONS(name)       \
+  DECLARE_ASN1_ENCODE_FUNCTIONS_const(name, name)
+
+#define DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name) \
+  OPENSSL_EXPORT type *name##_new(void);              \
+  OPENSSL_EXPORT void name##_free(type *a);
 
 
 // Deprecated functions.
@@ -1987,22 +1987,22 @@
 // DECLARE_ASN1_ITEM(ASN1_PRINTABLE)
 
 
-// #if defined(__cplusplus)
-// }  // extern C
+#if defined(__cplusplus)
+}  // extern C
 
-// extern "C++" {
+extern "C++" {
 
-// BSSL_NAMESPACE_BEGIN
+BSSL_NAMESPACE_BEGIN
 
 // BORINGSSL_MAKE_DELETER(ASN1_OBJECT, ASN1_OBJECT_free)
-// BORINGSSL_MAKE_DELETER(ASN1_STRING, ASN1_STRING_free)
+BORINGSSL_MAKE_DELETER(ASN1_STRING, ASN1_STRING_free)
 // BORINGSSL_MAKE_DELETER(ASN1_TYPE, ASN1_TYPE_free)
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
+}  // extern C++
 
-// #endif
+#endif
 
 #ifdef ossl_ASN1_R_ASN1_LENGTH_MISMATCH
 #define ASN1_R_ASN1_LENGTH_MISMATCH ossl_ASN1_R_ASN1_LENGTH_MISMATCH
@@ -2296,4 +2296,4 @@
 #define ASN1_R_INVALID_INTEGER ossl_ASN1_R_INVALID_INTEGER
 #endif
 
-// #endif
+#endif
