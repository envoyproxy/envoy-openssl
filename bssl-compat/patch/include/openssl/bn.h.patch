--- a/include/openssl/bn.h
+++ b/include/openssl/bn.h
@@ -120,18 +120,20 @@
  * Sheueling Chang Shantz and Douglas Stebila of Sun Microsystems
  * Laboratories. */
 
-// #ifndef OPENSSL_HEADER_BN_H
-// #define OPENSSL_HEADER_BN_H
+#ifndef OPENSSL_HEADER_BN_H
+#define OPENSSL_HEADER_BN_H
 
-// #include <openssl/base.h>
-// #include <openssl/thread.h>
+#include <openssl/base.h>
+#include <openssl/thread.h>
 
-// #include <inttypes.h>  // for PRIu64 and friends
-// #include <stdio.h>  // for FILE*
+#include <inttypes.h>  // for PRIu64 and friends
+#include <stdio.h>  // for FILE*
 
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#include <ossl/openssl/bn.h>
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // BN provides support for working with arbitrary sized integers. For example,
@@ -147,36 +149,36 @@
 // this is a public header, bn.h does not define |__STDC_FORMAT_MACROS| itself.
 // Projects which use |BN_*_FMT*| with outdated C headers may need to define it
 // externally.
-// #if defined(OPENSSL_64_BIT)
-// typedef uint64_t BN_ULONG;
-// #define BN_BITS2 64
-// #define BN_DEC_FMT1 "%" PRIu64
-// #define BN_DEC_FMT2 "%019" PRIu64
-// #define BN_HEX_FMT1 "%" PRIx64
-// #define BN_HEX_FMT2 "%016" PRIx64
-// #elif defined(OPENSSL_32_BIT)
-// typedef uint32_t BN_ULONG;
-// #define BN_BITS2 32
-// #define BN_DEC_FMT1 "%" PRIu32
-// #define BN_DEC_FMT2 "%09" PRIu32
-// #define BN_HEX_FMT1 "%" PRIx32
-// #define BN_HEX_FMT2 "%08" PRIx32
-// #else
-// #error "Must define either OPENSSL_32_BIT or OPENSSL_64_BIT"
-// #endif
+#if defined(OPENSSL_64_BIT)
+typedef uint64_t BN_ULONG;
+#define BN_BITS2 64
+#define BN_DEC_FMT1 "%" PRIu64
+#define BN_DEC_FMT2 "%019" PRIu64
+#define BN_HEX_FMT1 "%" PRIx64
+#define BN_HEX_FMT2 "%016" PRIx64
+#elif defined(OPENSSL_32_BIT)
+typedef uint32_t BN_ULONG;
+#define BN_BITS2 32
+#define BN_DEC_FMT1 "%" PRIu32
+#define BN_DEC_FMT2 "%09" PRIu32
+#define BN_HEX_FMT1 "%" PRIx32
+#define BN_HEX_FMT2 "%08" PRIx32
+#else
+#error "Must define either OPENSSL_32_BIT or OPENSSL_64_BIT"
+#endif
 
 
 // Allocation and freeing.
 
 // BN_new creates a new, allocated BIGNUM and initialises it.
-// OPENSSL_EXPORT BIGNUM *BN_new(void);
+OPENSSL_EXPORT BIGNUM *BN_new(void);
 
 // BN_init initialises a stack allocated |BIGNUM|.
 // OPENSSL_EXPORT void BN_init(BIGNUM *bn);
 
 // BN_free frees the data referenced by |bn| and, if |bn| was originally
 // allocated on the heap, frees |bn| also.
-// OPENSSL_EXPORT void BN_free(BIGNUM *bn);
+OPENSSL_EXPORT void BN_free(BIGNUM *bn);
 
 // BN_clear_free erases and frees the data referenced by |bn| and, if |bn| was
 // originally allocated on the heap, frees |bn| also.
@@ -184,7 +186,7 @@
 
 // BN_dup allocates a new BIGNUM and sets it equal to |src|. It returns the
 // allocated BIGNUM on success or NULL otherwise.
-// OPENSSL_EXPORT BIGNUM *BN_dup(const BIGNUM *src);
+OPENSSL_EXPORT BIGNUM *BN_dup(const BIGNUM *src);
 
 // BN_copy sets |dest| equal to |src| and returns |dest| or NULL on allocation
 // failure.
@@ -201,7 +203,7 @@
 
 // BN_num_bits returns the minimum number of bits needed to represent the
 // absolute value of |bn|.
-// OPENSSL_EXPORT unsigned BN_num_bits(const BIGNUM *bn);
+OPENSSL_EXPORT unsigned BN_num_bits(const BIGNUM *bn);
 
 // BN_num_bytes returns the minimum number of bytes needed to represent the
 // absolute value of |bn|.
@@ -216,7 +218,7 @@
 
 // BN_set_word sets |bn| to |value|. It returns one on success or zero on
 // allocation failure.
-// OPENSSL_EXPORT int BN_set_word(BIGNUM *bn, BN_ULONG value);
+OPENSSL_EXPORT int BN_set_word(BIGNUM *bn, BN_ULONG value);
 
 // BN_set_u64 sets |bn| to |value|. It returns one on success or zero on
 // allocation failure.
@@ -267,7 +269,7 @@
 // BN_bn2hex returns an allocated string that contains a NUL-terminated, hex
 // representation of |bn|. If |bn| is negative, the first char in the resulting
 // string will be '-'. Returns NULL on allocation failure.
-// OPENSSL_EXPORT char *BN_bn2hex(const BIGNUM *bn);
+OPENSSL_EXPORT char *BN_bn2hex(const BIGNUM *bn);
 
 // BN_hex2bn parses the leading hex number from |in|, which may be proceeded by
 // a '-' to indicate a negative number and may contain trailing, non-hex data.
@@ -275,7 +277,7 @@
 // stores it in |*outp|. If |*outp| is NULL then it allocates a new BIGNUM and
 // updates |*outp|. It returns the number of bytes of |in| processed or zero on
 // error.
-// OPENSSL_EXPORT int BN_hex2bn(BIGNUM **outp, const char *in);
+OPENSSL_EXPORT int BN_hex2bn(BIGNUM **outp, const char *in);
 
 // BN_bn2dec returns an allocated string that contains a NUL-terminated,
 // decimal representation of |bn|. If |bn| is negative, the first char in the
@@ -374,7 +376,7 @@
 // OPENSSL_EXPORT int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
 
 // BN_add_word adds |w| to |a|. It returns one on success and zero otherwise.
-// OPENSSL_EXPORT int BN_add_word(BIGNUM *a, BN_ULONG w);
+OPENSSL_EXPORT int BN_add_word(BIGNUM *a, BN_ULONG w);
 
 // BN_sub sets |r| = |a| - |b|, where |r| may be the same pointer as either |a|
 // or |b|. It returns one on success and zero on allocation failure.
@@ -436,7 +438,7 @@
 // BN_ucmp returns a value less than, equal to or greater than zero if the
 // absolute value of |a| is less than, equal to or greater than the absolute
 // value of |b|, respectively.
-// OPENSSL_EXPORT int BN_ucmp(const BIGNUM *a, const BIGNUM *b);
+OPENSSL_EXPORT int BN_ucmp(const BIGNUM *a, const BIGNUM *b);
 
 // BN_equal_consttime returns one if |a| is equal to |b|, and zero otherwise.
 // It takes an amount of time dependent on the sizes of |a| and |b|, but
@@ -1018,13 +1020,13 @@
 // directly.
 
 
-// #if defined(__cplusplus)
-// }  // extern C
+#if defined(__cplusplus)
+}  // extern C
 
-// #if !defined(BORINGSSL_NO_CXX)
-// extern "C++" {
+#if !defined(BORINGSSL_NO_CXX)
+extern "C++" {
 
-// BSSL_NAMESPACE_BEGIN
+BSSL_NAMESPACE_BEGIN
 
 // BORINGSSL_MAKE_DELETER(BIGNUM, BN_free)
 // BORINGSSL_MAKE_DELETER(BN_CTX, BN_CTX_free)
@@ -1042,12 +1044,12 @@
 //   BN_CTXScope &operator=(BN_CTXScope &) = delete;
 // };
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
-// #endif
+}  // extern C++
+#endif
 
-// #endif
+#endif
 
 #ifdef ossl_BN_R_ARG2_LT_ARG3
 #define BN_R_ARG2_LT_ARG3 ossl_BN_R_ARG2_LT_ARG3
@@ -1110,4 +1112,4 @@
 #define BN_R_INVALID_INPUT ossl_BN_R_INVALID_INPUT
 #endif
 
-// #endif  // OPENSSL_HEADER_BN_H
+#endif  // OPENSSL_HEADER_BN_H
