--- a/include/openssl/bio.h
+++ b/include/openssl/bio.h
@@ -54,22 +54,22 @@
  * copied and put under another distribution licence
  * [including the GNU Public Licence.] */
 
-// #ifndef OPENSSL_HEADER_BIO_H
-// #define OPENSSL_HEADER_BIO_H
+#ifndef OPENSSL_HEADER_BIO_H
+#define OPENSSL_HEADER_BIO_H
 
-// #include <openssl/base.h>
+#include <openssl/base.h>
 
-// #include <stdio.h>  // For FILE
+#include <stdio.h>  // For FILE
 
-// #include <openssl/buffer.h>
-// #include <openssl/err.h>  // for ERR_print_errors_fp
-// #include <openssl/ex_data.h>
-// #include <openssl/stack.h>
-// #include <openssl/thread.h>
-
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#include <openssl/buffer.h>
+#include <openssl/err.h>  // for ERR_print_errors_fp
+#include <openssl/ex_data.h>
+#include <openssl/stack.h>
+#include <openssl/thread.h>
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // BIO abstracts over a file-descriptor like interface.
@@ -81,7 +81,7 @@
 
 // BIO_new creates a new BIO with the given method and a reference count of one.
 // It returns the fresh |BIO|, or NULL on error.
-// OPENSSL_EXPORT BIO *BIO_new(const BIO_METHOD *method);
+OPENSSL_EXPORT BIO *BIO_new(const BIO_METHOD *method);
 
 // BIO_free decrements the reference count of |bio|. If the reference count
 // drops to zero, it calls the destroy callback, if present, on the method and
@@ -89,7 +89,7 @@
 // any.
 //
 // It returns one on success or zero otherwise.
-// OPENSSL_EXPORT int BIO_free(BIO *bio);
+OPENSSL_EXPORT int BIO_free(BIO *bio);
 
 // BIO_vfree performs the same actions as |BIO_free|, but has a void return
 // value. This is provided for API-compat.
@@ -98,14 +98,14 @@
 // OPENSSL_EXPORT void BIO_vfree(BIO *bio);
 
 // BIO_up_ref increments the reference count of |bio| and returns one.
-// OPENSSL_EXPORT int BIO_up_ref(BIO *bio);
+OPENSSL_EXPORT int BIO_up_ref(BIO *bio);
 
 
 // Basic I/O.
 
 // BIO_read attempts to read |len| bytes into |data|. It returns the number of
 // bytes read, zero on EOF, or a negative number on error.
-// OPENSSL_EXPORT int BIO_read(BIO *bio, void *data, int len);
+OPENSSL_EXPORT int BIO_read(BIO *bio, void *data, int len);
 
 // BIO_gets "reads a line" from |bio| and puts at most |size| bytes into |buf|.
 // It returns the number of bytes read or a negative number on error. The
@@ -119,7 +119,7 @@
 
 // BIO_write writes |len| bytes from |data| to |bio|. It returns the number of
 // bytes written or a negative number on error.
-// OPENSSL_EXPORT int BIO_write(BIO *bio, const void *data, int len);
+OPENSSL_EXPORT int BIO_write(BIO *bio, const void *data, int len);
 
 // BIO_write_all writes |len| bytes from |data| to |bio|, looping as necessary.
 // It returns one if all bytes were successfully written and zero on error.
@@ -127,7 +127,7 @@
 
 // BIO_puts writes a NUL terminated string from |buf| to |bio|. It returns the
 // number of bytes written or a negative number on error.
-// OPENSSL_EXPORT int BIO_puts(BIO *bio, const char *buf);
+OPENSSL_EXPORT int BIO_puts(BIO *bio, const char *buf);
 
 // BIO_flush flushes any buffered output. It returns one on success and zero
 // otherwise.
@@ -155,7 +155,7 @@
 // BIO_reset resets |bio| to its initial state, the precise meaning of which
 // depends on the concrete type of |bio|. It returns one on success and zero
 // otherwise.
-// OPENSSL_EXPORT int BIO_reset(BIO *bio);
+OPENSSL_EXPORT int BIO_reset(BIO *bio);
 
 // BIO_eof returns non-zero when |bio| has reached end-of-file. The precise
 // meaning of which depends on the concrete type of |bio|. Note that in the
@@ -171,12 +171,12 @@
 // BIO_should_read returns non-zero if |bio| encountered a temporary error
 // while reading (i.e. EAGAIN), indicating that the caller should retry the
 // read.
-// OPENSSL_EXPORT int BIO_should_read(const BIO *bio);
+OPENSSL_EXPORT int BIO_should_read(const BIO *bio);
 
 // BIO_should_write returns non-zero if |bio| encountered a temporary error
 // while writing (i.e. EAGAIN), indicating that the caller should retry the
 // write.
-// OPENSSL_EXPORT int BIO_should_write(const BIO *bio);
+OPENSSL_EXPORT int BIO_should_write(const BIO *bio);
 
 // BIO_should_retry returns non-zero if the reason that caused a failed I/O
 // operation is temporary and thus the operation should be retried. Otherwise,
@@ -208,11 +208,11 @@
 
 // BIO_set_retry_read sets the |BIO_FLAGS_READ| and |BIO_FLAGS_SHOULD_RETRY|
 // flags on |bio|.
-// OPENSSL_EXPORT void BIO_set_retry_read(BIO *bio);
+OPENSSL_EXPORT void BIO_set_retry_read(BIO *bio);
 
 // BIO_set_retry_write sets the |BIO_FLAGS_WRITE| and |BIO_FLAGS_SHOULD_RETRY|
 // flags on |bio|.
-// OPENSSL_EXPORT void BIO_set_retry_write(BIO *bio);
+OPENSSL_EXPORT void BIO_set_retry_write(BIO *bio);
 
 // BIO_get_retry_flags gets the |BIO_FLAGS_READ|, |BIO_FLAGS_WRITE|,
 // |BIO_FLAGS_IO_SPECIAL| and |BIO_FLAGS_SHOULD_RETRY| flags from |bio|.
@@ -220,7 +220,7 @@
 
 // BIO_clear_retry_flags clears the |BIO_FLAGS_READ|, |BIO_FLAGS_WRITE|,
 // |BIO_FLAGS_IO_SPECIAL| and |BIO_FLAGS_SHOULD_RETRY| flags from |bio|.
-// OPENSSL_EXPORT void BIO_clear_retry_flags(BIO *bio);
+OPENSSL_EXPORT void BIO_clear_retry_flags(BIO *bio);
 
 // BIO_method_type returns the type of |bio|, which is one of the |BIO_TYPE_*|
 // values.
@@ -243,8 +243,8 @@
 // with |BIO_CB_RETURN| if the callback is being made after the operation in
 // question. In that case, |return_value| will contain the return value from
 // the operation.
-// typedef long (*bio_info_cb)(BIO *bio, int event, const char *parg, int cmd,
-//                             long larg, long return_value);
+typedef long (*bio_info_cb)(BIO *bio, int event, const char *parg, int cmd,
+                            long larg, long return_value);
 
 // BIO_callback_ctrl allows the callback function to be manipulated. The |cmd|
 // arg will generally be |BIO_CTRL_SET_CALLBACK| but arbitrary command values
@@ -317,8 +317,8 @@
 
 // BIO_printf behaves like |printf| but outputs to |bio| rather than a |FILE|.
 // It returns the number of bytes written or a negative number on error.
-// OPENSSL_EXPORT int BIO_printf(BIO *bio, const char *format, ...)
-//     OPENSSL_PRINTF_FORMAT_FUNC(2, 3);
+OPENSSL_EXPORT int BIO_printf(BIO *bio, const char *format, ...)
+    OPENSSL_PRINTF_FORMAT_FUNC(2, 3);
 
 
 // Utility functions.
@@ -348,8 +348,8 @@
 //
 // If the function fails then some unknown amount of data may have been read
 // from |bio|.
-// OPENSSL_EXPORT int BIO_read_asn1(BIO *bio, uint8_t **out, size_t *out_len,
-//                                  size_t max_len);
+OPENSSL_EXPORT int BIO_read_asn1(BIO *bio, uint8_t **out, size_t *out_len,
+                                 size_t max_len);
 
 
 // Memory BIOs.
@@ -374,7 +374,7 @@
 // #define BIO_CLOSE 1
 
 // BIO_s_mem returns a |BIO_METHOD| that uses a in-memory buffer.
-// OPENSSL_EXPORT const BIO_METHOD *BIO_s_mem(void);
+OPENSSL_EXPORT const BIO_METHOD *BIO_s_mem(void);
 
 // BIO_new_mem_buf creates read-only BIO that reads from |len| bytes at |buf|.
 // It returns the BIO or NULL on error. This function does not copy or take
@@ -383,14 +383,14 @@
 //
 // If |len| is negative, then |buf| is treated as a NUL-terminated string, but
 // don't depend on this in new code.
-// OPENSSL_EXPORT BIO *BIO_new_mem_buf(const void *buf, int len);
+OPENSSL_EXPORT BIO *BIO_new_mem_buf(const void *buf, int len);
 
 // BIO_mem_contents sets |*out_contents| to point to the current contents of
 // |bio| and |*out_len| to contain the length of that data. It returns one on
 // success and zero otherwise.
-// OPENSSL_EXPORT int BIO_mem_contents(const BIO *bio,
-//                                     const uint8_t **out_contents,
-//                                     size_t *out_len);
+OPENSSL_EXPORT int BIO_mem_contents(const BIO *bio,
+                                    const uint8_t **out_contents,
+                                    size_t *out_len);
 
 // BIO_get_mem_data sets |*contents| to point to the current contents of |bio|
 // and returns the length of the data.
@@ -419,7 +419,7 @@
 //
 // For a read-only BIO, the default is zero (EOF). For a writable BIO, the
 // default is -1 so that additional data can be written once exhausted.
-// OPENSSL_EXPORT int BIO_set_mem_eof_return(BIO *bio, int eof_value);
+OPENSSL_EXPORT int BIO_set_mem_eof_return(BIO *bio, int eof_value);
 
 
 // File descriptor BIOs.
@@ -561,7 +561,7 @@
 // be provided with |BIO_set_conn_port|.
 //
 // It returns the new BIO on success, or NULL on error.
-// OPENSSL_EXPORT BIO *BIO_new_connect(const char *host_and_optional_port);
+OPENSSL_EXPORT BIO *BIO_new_connect(const char *host_and_optional_port);
 
 // BIO_set_conn_hostname sets |host_and_optional_port| as the hostname and
 // optional port that |bio| will connect to. If the port is omitted, it must be
@@ -617,22 +617,22 @@
 // data written to one can be read from the other and vice versa. The
 // |writebuf1| argument gives the size of the buffer used in |*out1| and
 // |writebuf2| for |*out2|. It returns one on success and zero on error.
-// OPENSSL_EXPORT int BIO_new_bio_pair(BIO **out1, size_t writebuf1, BIO **out2,
-//                                     size_t writebuf2);
+OPENSSL_EXPORT int BIO_new_bio_pair(BIO **out1, size_t writebuf1, BIO **out2,
+                                    size_t writebuf2);
 
 // BIO_ctrl_get_read_request returns the number of bytes that the other side of
 // |bio| tried (unsuccessfully) to read.
-// OPENSSL_EXPORT size_t BIO_ctrl_get_read_request(BIO *bio);
+OPENSSL_EXPORT size_t BIO_ctrl_get_read_request(BIO *bio);
 
 // BIO_ctrl_get_write_guarantee returns the number of bytes that |bio| (which
 // must have been returned by |BIO_new_bio_pair|) will accept on the next
 // |BIO_write| call.
-// OPENSSL_EXPORT size_t BIO_ctrl_get_write_guarantee(BIO *bio);
+OPENSSL_EXPORT size_t BIO_ctrl_get_write_guarantee(BIO *bio);
 
 // BIO_shutdown_wr marks |bio| as closed, from the point of view of the other
 // side of the pair. Future |BIO_write| calls on |bio| will fail. It returns
 // one on success and zero otherwise.
-// OPENSSL_EXPORT int BIO_shutdown_wr(BIO *bio);
+OPENSSL_EXPORT int BIO_shutdown_wr(BIO *bio);
 
 
 // Custom BIOs.
@@ -793,10 +793,10 @@
 
 // These are the 'types' of BIOs
 // #define BIO_TYPE_NONE 0
-// #define BIO_TYPE_MEM (1 | 0x0400)
+#define BIO_TYPE_MEM (1 | 0x0400)
 // #define BIO_TYPE_FILE (2 | 0x0400)
 // #define BIO_TYPE_FD (4 | 0x0400 | 0x0100)
-// #define BIO_TYPE_SOCKET (5 | 0x0400 | 0x0100)
+#define BIO_TYPE_SOCKET (5 | 0x0400 | 0x0100)
 // #define BIO_TYPE_NULL (6 | 0x0400)
 // #define BIO_TYPE_SSL (7 | 0x0200)
 // #define BIO_TYPE_MD (8 | 0x0200)                 // passive filter
@@ -826,19 +826,19 @@
 // flag bits aside, may exceed this value.
 // #define BIO_TYPE_START 128
 
-// struct bio_method_st {
-//   int type;
-//   const char *name;
-//   int (*bwrite)(BIO *, const char *, int);
-//   int (*bread)(BIO *, char *, int);
-//   // TODO(fork): remove bputs.
-//   int (*bputs)(BIO *, const char *);
-//   int (*bgets)(BIO *, char *, int);
-//   long (*ctrl)(BIO *, int, long, void *);
-//   int (*create)(BIO *);
-//   int (*destroy)(BIO *);
-//   long (*callback_ctrl)(BIO *, int, bio_info_cb);
-// };
+struct bio_method_st {
+  int type;
+  const char *name;
+  int (*bwrite)(BIO *, const char *, int);
+  int (*bread)(BIO *, char *, int);
+  // TODO(fork): remove bputs.
+  int (*bputs)(BIO *, const char *);
+  int (*bgets)(BIO *, char *, int);
+  long (*ctrl)(BIO *, int, long, void *);
+  int (*create)(BIO *);
+  int (*destroy)(BIO *);
+  long (*callback_ctrl)(BIO *, int, bio_info_cb);
+};
 
 // struct bio_st {
 //   const BIO_METHOD *method;
@@ -920,22 +920,22 @@
 // #define BIO_C_GET_EX_ARG 154
 
 
-// #if defined(__cplusplus)
-// }  // extern C
+#if defined(__cplusplus)
+}  // extern C
 
-// extern "C++" {
+extern "C++" {
 
-// BSSL_NAMESPACE_BEGIN
+BSSL_NAMESPACE_BEGIN
 
-// BORINGSSL_MAKE_DELETER(BIO, BIO_free)
-// BORINGSSL_MAKE_UP_REF(BIO, BIO_up_ref)
+BORINGSSL_MAKE_DELETER(BIO, BIO_free)
+BORINGSSL_MAKE_UP_REF(BIO, BIO_up_ref)
 // BORINGSSL_MAKE_DELETER(BIO_METHOD, BIO_meth_free)
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
+}  // extern C++
 
-// #endif
+#endif
 
 #ifdef ossl_BIO_R_BAD_FOPEN_MODE
 #define BIO_R_BAD_FOPEN_MODE ossl_BIO_R_BAD_FOPEN_MODE
@@ -989,4 +989,4 @@
 #define BIO_R_WRITE_TO_READ_ONLY_BIO ossl_BIO_R_WRITE_TO_READ_ONLY_BIO
 #endif
 
-// #endif  // OPENSSL_HEADER_BIO_H
+#endif  // OPENSSL_HEADER_BIO_H
