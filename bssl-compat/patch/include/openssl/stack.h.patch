--- a/source/include/openssl/stack.h	2025-08-28 17:41:22.808667240 +0200
+++ b/source/include/openssl/stack.h	2025-08-29 10:24:58.150108167 +0200
@@ -248,6 +248,7 @@
 // An OPENSSL_STACK contains an array of pointers. It is not designed to be used
 // directly, rather the wrapper macros should be used.
 typedef struct stack_st OPENSSL_STACK;
+#define OPENSSL_STACK ossl_OPENSSL_STACK
 
 // The following are raw stack functions. They implement the corresponding typed
 // |sk_SAMPLE_*| functions generated by |DEFINE_STACK_OF|. Callers shouldn't be
@@ -295,7 +296,7 @@
 // TODO(b/290792019, b/290785937): Ideally these would at least be inline
 // functions, so we do not squat the symbols.
 
-typedef OPENSSL_STACK _STACK;
+#define _STACK ossl_OPENSSL_STACK
 
 // The following functions call the corresponding |OPENSSL_sk_*| function.
 OPENSSL_EXPORT OPENSSL_DEPRECATED OPENSSL_STACK *sk_new_null(void);
@@ -360,9 +361,6 @@
    * positive warning. */                                                      \
   OPENSSL_MSVC_PRAGMA(warning(push))                                           \
   OPENSSL_MSVC_PRAGMA(warning(disable : 4191))                                 \
-  OPENSSL_CLANG_PRAGMA("clang diagnostic push")                                \
-  OPENSSL_CLANG_PRAGMA("clang diagnostic ignored \"-Wunknown-warning-option\"") \
-  OPENSSL_CLANG_PRAGMA("clang diagnostic ignored \"-Wcast-function-type-strict\"") \
                                                                                \
   DECLARE_STACK_OF(name)                                                       \
                                                                                \
@@ -389,11 +387,7 @@
     /* |cmp_func| expects an extra layer of pointers to match qsort. */        \
     return ((sk_##name##_cmp_func)cmp_func)(&a_ptr, &b_ptr);                   \
   }                                                                            \
-                                                                               \
-  OPENSSL_INLINE int sk_##name##_call_delete_if_func(                          \
-      OPENSSL_sk_delete_if_func func, void *obj, void *data) {                 \
-    return ((sk_##name##_delete_if_func)func)((ptrtype)obj, data);             \
-  }                                                                            \
+                                                                               \
                                                                                \
   OPENSSL_INLINE STACK_OF(name) *sk_##name##_new(sk_##name##_cmp_func comp) {  \
     return (STACK_OF(name) *)OPENSSL_sk_new((OPENSSL_sk_cmp_func)comp);        \
@@ -446,12 +440,7 @@
     return (ptrtype)OPENSSL_sk_delete_ptr((OPENSSL_STACK *)sk,                 \
                                           (const void *)p);                    \
   }                                                                            \
-                                                                               \
-  OPENSSL_INLINE void sk_##name##_delete_if(                                   \
-      STACK_OF(name) *sk, sk_##name##_delete_if_func func, void *data) {       \
-    OPENSSL_sk_delete_if((OPENSSL_STACK *)sk, sk_##name##_call_delete_if_func, \
-                         (OPENSSL_sk_delete_if_func)func, data);               \
-  }                                                                            \
+                                                                               \
                                                                                \
   OPENSSL_INLINE int sk_##name##_find(const STACK_OF(name) *sk,                \
                                       size_t *out_index, constptrtype p) {     \
@@ -496,10 +485,8 @@
         (const OPENSSL_STACK *)sk, sk_##name##_call_copy_func,                 \
         (OPENSSL_sk_copy_func)copy_func, sk_##name##_call_free_func,           \
         (OPENSSL_sk_free_func)free_func);                                      \
-  }                                                                            \
-                                                                               \
-  OPENSSL_CLANG_PRAGMA("clang diagnostic pop")                                 \
-  OPENSSL_MSVC_PRAGMA(warning(pop))
+  }
+                                                                               
 
 
 // Built-in stacks.
@@ -539,12 +526,8 @@
     // sk_FOO_pop_free is defined by macros and bound by name, so we cannot
     // access it from C++ here.
     using Type = typename StackTraits<Stack>::Type;
-    OPENSSL_sk_pop_free_ex(
-        reinterpret_cast<OPENSSL_STACK *>(sk),
-        [](OPENSSL_sk_free_func /* unused */, void *ptr) {
-          DeleterImpl<Type>::Free(reinterpret_cast<Type *>(ptr));
-        },
-        nullptr);
+    ossl_OPENSSL_sk_pop_free(reinterpret_cast<ossl_OPENSSL_STACK *>(sk),
+                   reinterpret_cast<void (*)(void *)>(DeleterImpl<Type>::Free));
   }
 };
 
@@ -606,7 +589,6 @@
 
 BSSL_NAMESPACE_END
 
-// Define begin() and end() for stack types so C++ range for loops work.
 template <typename Stack>
 inline bssl::internal::StackIterator<Stack> begin(const Stack *sk) {
   return bssl::internal::StackIterator<Stack>(sk, 0);
