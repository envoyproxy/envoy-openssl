--- a/include/openssl/rsa.h
+++ b/include/openssl/rsa.h
@@ -54,18 +54,18 @@
  * copied and put under another distribution licence
  * [including the GNU Public Licence.] */
 
-// #ifndef OPENSSL_HEADER_RSA_H
-// #define OPENSSL_HEADER_RSA_H
+#ifndef OPENSSL_HEADER_RSA_H
+#define OPENSSL_HEADER_RSA_H
 
-// #include <openssl/base.h>
+#include <openssl/base.h>
 
-// #include <openssl/engine.h>
-// #include <openssl/ex_data.h>
-// #include <openssl/thread.h>
-
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#include <openssl/engine.h>
+#include <openssl/ex_data.h>
+#include <openssl/thread.h>
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // rsa.h contains functions for handling encryption and signature using RSA.
@@ -80,14 +80,14 @@
 // functions which take a non-|const| pointer are mutating.
 
 // RSA_new returns a new, empty |RSA| object or NULL on error.
-// OPENSSL_EXPORT RSA *RSA_new(void);
+OPENSSL_EXPORT RSA *RSA_new(void);
 
 // RSA_new_method acts the same as |RSA_new| but takes an explicit |ENGINE|.
 // OPENSSL_EXPORT RSA *RSA_new_method(const ENGINE *engine);
 
 // RSA_free decrements the reference count of |rsa| and frees it if the
 // reference count drops to zero.
-// OPENSSL_EXPORT void RSA_free(RSA *rsa);
+OPENSSL_EXPORT void RSA_free(RSA *rsa);
 
 // RSA_up_ref increments the reference count of |rsa| and returns one. It does
 // not mutate |rsa| for thread-safety purposes and may be used concurrently.
@@ -97,7 +97,7 @@
 // Properties.
 
 // RSA_bits returns the size of |rsa|, in bits.
-// OPENSSL_EXPORT unsigned RSA_bits(const RSA *rsa);
+OPENSSL_EXPORT unsigned RSA_bits(const RSA *rsa);
 
 // RSA_get0_n returns |rsa|'s public modulus.
 // OPENSSL_EXPORT const BIGNUM *RSA_get0_n(const RSA *rsa);
@@ -132,21 +132,21 @@
 // RSA_get0_key sets |*out_n|, |*out_e|, and |*out_d|, if non-NULL, to |rsa|'s
 // modulus, public exponent, and private exponent, respectively. If |rsa| is a
 // public key, the private exponent will be set to NULL.
-// OPENSSL_EXPORT void RSA_get0_key(const RSA *rsa, const BIGNUM **out_n,
-//                                  const BIGNUM **out_e, const BIGNUM **out_d);
+OPENSSL_EXPORT void RSA_get0_key(const RSA *rsa, const BIGNUM **out_n,
+                                 const BIGNUM **out_e, const BIGNUM **out_d);
 
 // RSA_get0_factors sets |*out_p| and |*out_q|, if non-NULL, to |rsa|'s prime
 // factors. If |rsa| is a public key, they will be set to NULL.
-// OPENSSL_EXPORT void RSA_get0_factors(const RSA *rsa, const BIGNUM **out_p,
-//                                      const BIGNUM **out_q);
+OPENSSL_EXPORT void RSA_get0_factors(const RSA *rsa, const BIGNUM **out_p,
+                                     const BIGNUM **out_q);
 
 // RSA_get0_crt_params sets |*out_dmp1|, |*out_dmq1|, and |*out_iqmp|, if
 // non-NULL, to |rsa|'s CRT parameters. These are d (mod p-1), d (mod q-1) and
 // q^-1 (mod p), respectively. If |rsa| is a public key, each parameter will be
 // set to NULL.
-// OPENSSL_EXPORT void RSA_get0_crt_params(const RSA *rsa, const BIGNUM **out_dmp1,
-//                                         const BIGNUM **out_dmq1,
-//                                         const BIGNUM **out_iqmp);
+OPENSSL_EXPORT void RSA_get0_crt_params(const RSA *rsa, const BIGNUM **out_dmp1,
+                                        const BIGNUM **out_dmq1,
+                                        const BIGNUM **out_iqmp);
 
 // RSA_set0_key sets |rsa|'s modulus, public exponent, and private exponent to
 // |n|, |e|, and |d| respectively, if non-NULL. On success, it takes ownership
@@ -157,7 +157,7 @@
 //
 // It is an error to call this function after |rsa| has been used for a
 // cryptographic operation. Construct a new |RSA| object instead.
-// OPENSSL_EXPORT int RSA_set0_key(RSA *rsa, BIGNUM *n, BIGNUM *e, BIGNUM *d);
+OPENSSL_EXPORT int RSA_set0_key(RSA *rsa, BIGNUM *n, BIGNUM *e, BIGNUM *d);
 
 // RSA_set0_factors sets |rsa|'s prime factors to |p| and |q|, if non-NULL, and
 // takes ownership of them. On success, it takes ownership of each argument and
@@ -167,7 +167,7 @@
 //
 // It is an error to call this function after |rsa| has been used for a
 // cryptographic operation. Construct a new |RSA| object instead.
-// OPENSSL_EXPORT int RSA_set0_factors(RSA *rsa, BIGNUM *p, BIGNUM *q);
+OPENSSL_EXPORT int RSA_set0_factors(RSA *rsa, BIGNUM *p, BIGNUM *q);
 
 // RSA_set0_crt_params sets |rsa|'s CRT parameters to |dmp1|, |dmq1|, and
 // |iqmp|, if non-NULL, and takes ownership of them. On success, it takes
@@ -177,8 +177,8 @@
 //
 // It is an error to call this function after |rsa| has been used for a
 // cryptographic operation. Construct a new |RSA| object instead.
-// OPENSSL_EXPORT int RSA_set0_crt_params(RSA *rsa, BIGNUM *dmp1, BIGNUM *dmq1,
-//                                        BIGNUM *iqmp);
+OPENSSL_EXPORT int RSA_set0_crt_params(RSA *rsa, BIGNUM *dmp1, BIGNUM *dmq1,
+                                       BIGNUM *iqmp);
 
 
 // Key generation.
@@ -191,8 +191,8 @@
 // with event=3 when a suitable value for |p| is found.
 //
 // It returns one on success or zero on error.
-// OPENSSL_EXPORT int RSA_generate_key_ex(RSA *rsa, int bits, const BIGNUM *e,
-//                                        BN_GENCB *cb);
+OPENSSL_EXPORT int RSA_generate_key_ex(RSA *rsa, int bits, const BIGNUM *e,
+                                       BN_GENCB *cb);
 
 // RSA_generate_key_fips behaves like |RSA_generate_key_ex| but performs
 // additional checks for FIPS compliance. The public exponent is always 65537
@@ -237,9 +237,9 @@
 // The |padding| argument must be one of the |RSA_*_PADDING| values. If in
 // doubt, use |RSA_PKCS1_OAEP_PADDING| for new protocols but
 // |RSA_PKCS1_PADDING| is most common.
-// OPENSSL_EXPORT int RSA_encrypt(RSA *rsa, size_t *out_len, uint8_t *out,
-//                                size_t max_out, const uint8_t *in, size_t in_len,
-//                                int padding);
+OPENSSL_EXPORT int RSA_encrypt(RSA *rsa, size_t *out_len, uint8_t *out,
+                               size_t max_out, const uint8_t *in, size_t in_len,
+                               int padding);
 
 // RSA_decrypt decrypts |in_len| bytes from |in| with the private key from
 // |rsa| and writes, at most, |max_out| bytes of plaintext to |out|. The
@@ -256,9 +256,9 @@
 // or other mitigation. See "Chosen Ciphertext Attacks Against Protocols Based
 // on the RSA Encryption Standard PKCS #1", Daniel Bleichenbacher, Advances in
 // Cryptology (Crypto '98).
-// OPENSSL_EXPORT int RSA_decrypt(RSA *rsa, size_t *out_len, uint8_t *out,
-//                                size_t max_out, const uint8_t *in, size_t in_len,
-//                                int padding);
+OPENSSL_EXPORT int RSA_decrypt(RSA *rsa, size_t *out_len, uint8_t *out,
+                               size_t max_out, const uint8_t *in, size_t in_len,
+                               int padding);
 
 // RSA_public_encrypt encrypts |flen| bytes from |from| to the public key in
 // |rsa| and writes the encrypted data to |to|. The |to| buffer must have at
@@ -305,9 +305,9 @@
 // WARNING: |digest| must be the result of hashing the data to be signed with
 // |hash_nid|. Passing unhashed inputs will not result in a secure signature
 // scheme.
-// OPENSSL_EXPORT int RSA_sign(int hash_nid, const uint8_t *digest,
-//                             unsigned digest_len, uint8_t *out,
-//                             unsigned *out_len, RSA *rsa);
+OPENSSL_EXPORT int RSA_sign(int hash_nid, const uint8_t *digest,
+                            unsigned digest_len, uint8_t *out,
+                            unsigned *out_len, RSA *rsa);
 
 // RSA_sign_pss_mgf1 signs |digest_len| bytes from |digest| with the public key
 // from |rsa| using RSASSA-PSS with MGF1 as the mask generation function. It
@@ -368,9 +368,9 @@
 // WARNING: |digest| must be the result of hashing the data to be verified with
 // |hash_nid|. Passing unhashed input will not result in a secure signature
 // scheme.
-// OPENSSL_EXPORT int RSA_verify(int hash_nid, const uint8_t *digest,
-//                               size_t digest_len, const uint8_t *sig,
-//                               size_t sig_len, RSA *rsa);
+OPENSSL_EXPORT int RSA_verify(int hash_nid, const uint8_t *digest,
+                              size_t digest_len, const uint8_t *sig,
+                              size_t sig_len, RSA *rsa);
 
 // RSA_verify_pss_mgf1 verifies that |sig_len| bytes from |sig| are a valid,
 // RSASSA-PSS signature of |digest_len| bytes at |digest| by |rsa|. It returns
@@ -449,7 +449,7 @@
 
 // RSA_size returns the number of bytes in the modulus, which is also the size
 // of a signature or encrypted value using |rsa|.
-// OPENSSL_EXPORT unsigned RSA_size(const RSA *rsa);
+OPENSSL_EXPORT unsigned RSA_size(const RSA *rsa);
 
 // RSA_is_opaque returns one if |rsa| is opaque and doesn't expose its key
 // material. Otherwise it returns zero.
@@ -466,7 +466,7 @@
 // RSA_check_key performs basic validity tests on |rsa|. It returns one if
 // they pass and zero otherwise. Opaque keys and public keys always pass. If it
 // returns zero then a more detailed error is available on the error queue.
-// OPENSSL_EXPORT int RSA_check_key(const RSA *rsa);
+OPENSSL_EXPORT int RSA_check_key(const RSA *rsa);
 
 // RSA_check_fips performs public key validity tests on |key|. It returns one if
 // they pass and zero otherwise. Opaque keys always fail. This function does not
@@ -526,10 +526,10 @@
 // DigestInfo header for the given hash function and sets |out_msg| to point to
 // it. On successful return, if |*is_alloced| is one, the caller must release
 // |*out_msg| with |OPENSSL_free|.
-// OPENSSL_EXPORT int RSA_add_pkcs1_prefix(uint8_t **out_msg, size_t *out_msg_len,
-//                                         int *is_alloced, int hash_nid,
-//                                         const uint8_t *digest,
-//                                         size_t digest_len);
+OPENSSL_EXPORT int RSA_add_pkcs1_prefix(uint8_t **out_msg, size_t *out_msg_len,
+                                        int *is_alloced, int hash_nid,
+                                        const uint8_t *digest,
+                                        size_t digest_len);
 
 
 // ASN.1 functions.
@@ -541,7 +541,7 @@
 
 // RSA_public_key_from_bytes parses |in| as a DER-encoded RSAPublicKey structure
 // (RFC 8017). It returns a newly-allocated |RSA| or NULL on error.
-// OPENSSL_EXPORT RSA *RSA_public_key_from_bytes(const uint8_t *in, size_t in_len);
+OPENSSL_EXPORT RSA *RSA_public_key_from_bytes(const uint8_t *in, size_t in_len);
 
 // RSA_marshal_public_key marshals |rsa| as a DER-encoded RSAPublicKey structure
 // (RFC 8017) and appends the result to |cbb|. It returns one on success and
@@ -562,8 +562,8 @@
 
 // RSA_private_key_from_bytes parses |in| as a DER-encoded RSAPrivateKey
 // structure (RFC 8017). It returns a newly-allocated |RSA| or NULL on error.
-// OPENSSL_EXPORT RSA *RSA_private_key_from_bytes(const uint8_t *in,
-//                                                size_t in_len);
+OPENSSL_EXPORT RSA *RSA_private_key_from_bytes(const uint8_t *in,
+                                               size_t in_len);
 
 // RSA_marshal_private_key marshals |rsa| as a DER-encoded RSAPrivateKey
 // structure (RFC 8017) and appends the result to |cbb|. It returns one on
@@ -612,7 +612,7 @@
 // RSA public exponent values.
 
 // #define RSA_3 0x3
-// #define RSA_F4 0x10001
+#define RSA_F4 ossl_RSA_F4
 
 
 // Deprecated functions.
@@ -797,21 +797,21 @@
 // };
 
 
-// #if defined(__cplusplus)
-// }  // extern C
+#if defined(__cplusplus)
+}  // extern C
 
-// extern "C++" {
+extern "C++" {
 
-// BSSL_NAMESPACE_BEGIN
+BSSL_NAMESPACE_BEGIN
 
-// BORINGSSL_MAKE_DELETER(RSA, RSA_free)
+BORINGSSL_MAKE_DELETER(RSA, RSA_free)
 // BORINGSSL_MAKE_UP_REF(RSA, RSA_up_ref)
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
+}  // extern C++
 
-// #endif
+#endif
 
 #ifdef ossl_RSA_R_BAD_ENCODING
 #define RSA_R_BAD_ENCODING ossl_RSA_R_BAD_ENCODING
@@ -961,4 +961,4 @@
 #define RSA_R_BLOCK_TYPE_IS_NOT_02 ossl_RSA_R_BLOCK_TYPE_IS_NOT_02
 #endif
 
-// #endif  // OPENSSL_HEADER_RSA_H
+#endif  // OPENSSL_HEADER_RSA_H
