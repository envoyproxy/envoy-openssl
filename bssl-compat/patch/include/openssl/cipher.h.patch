--- a/include/openssl/cipher.h
+++ b/include/openssl/cipher.h
@@ -54,14 +54,14 @@
  * copied and put under another distribution licence
  * [including the GNU Public Licence.] */
 
-// #ifndef OPENSSL_HEADER_CIPHER_H
-// #define OPENSSL_HEADER_CIPHER_H
+#ifndef OPENSSL_HEADER_CIPHER_H
+#define OPENSSL_HEADER_CIPHER_H
 
-// #include <openssl/base.h>
+#include <openssl/base.h>
 
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // Ciphers.
@@ -87,7 +87,7 @@
 // OPENSSL_EXPORT const EVP_CIPHER *EVP_aes_128_ofb(void);
 
 // OPENSSL_EXPORT const EVP_CIPHER *EVP_aes_256_ecb(void);
-// OPENSSL_EXPORT const EVP_CIPHER *EVP_aes_256_cbc(void);
+OPENSSL_EXPORT const EVP_CIPHER *EVP_aes_256_cbc(void);
 // OPENSSL_EXPORT const EVP_CIPHER *EVP_aes_256_ctr(void);
 // OPENSSL_EXPORT const EVP_CIPHER *EVP_aes_256_ofb(void);
 // OPENSSL_EXPORT const EVP_CIPHER *EVP_aes_256_xts(void);
@@ -123,7 +123,7 @@
 
 // EVP_CIPHER_CTX_new allocates a fresh |EVP_CIPHER_CTX|, calls
 // |EVP_CIPHER_CTX_init| and returns it, or NULL on allocation failure.
-// OPENSSL_EXPORT EVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void);
+OPENSSL_EXPORT EVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void);
 
 // EVP_CIPHER_CTX_cleanup frees any memory referenced by |ctx|. It returns
 // one.
@@ -131,7 +131,7 @@
 
 // EVP_CIPHER_CTX_free calls |EVP_CIPHER_CTX_cleanup| on |ctx| and then frees
 // |ctx| itself.
-// OPENSSL_EXPORT void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *ctx);
+OPENSSL_EXPORT void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *ctx);
 
 // EVP_CIPHER_CTX_copy sets |out| to be a duplicate of the current state of
 // |in|. The |out| argument must have been previously initialised.
@@ -158,14 +158,14 @@
 //                                      int enc);
 
 // EVP_EncryptInit_ex calls |EVP_CipherInit_ex| with |enc| equal to one.
-// OPENSSL_EXPORT int EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx,
-//                                       const EVP_CIPHER *cipher, ENGINE *impl,
-//                                       const uint8_t *key, const uint8_t *iv);
+OPENSSL_EXPORT int EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx,
+                                      const EVP_CIPHER *cipher, ENGINE *impl,
+                                      const uint8_t *key, const uint8_t *iv);
 
 // EVP_DecryptInit_ex calls |EVP_CipherInit_ex| with |enc| equal to zero.
-// OPENSSL_EXPORT int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx,
-//                                       const EVP_CIPHER *cipher, ENGINE *impl,
-//                                       const uint8_t *key, const uint8_t *iv);
+OPENSSL_EXPORT int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx,
+                                      const EVP_CIPHER *cipher, ENGINE *impl,
+                                      const uint8_t *key, const uint8_t *iv);
 
 
 // Cipher operations.
@@ -179,9 +179,9 @@
 // function instead adds |in_len| bytes from |in| to the AAD and sets |*out_len|
 // to |in_len|. The AAD must be fully specified in this way before this function
 // is used to encrypt plaintext.
-// OPENSSL_EXPORT int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, uint8_t *out,
-//                                      int *out_len, const uint8_t *in,
-//                                      int in_len);
+OPENSSL_EXPORT int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, uint8_t *out,
+                                     int *out_len, const uint8_t *in,
+                                     int in_len);
 
 // EVP_EncryptFinal_ex writes at most a block of ciphertext to |out| and sets
 // |*out_len| to the number of bytes written. If padding is enabled (the
@@ -189,8 +189,8 @@
 // padding is disabled (with |EVP_CIPHER_CTX_set_padding|) then any partial
 // block remaining will cause an error. The function returns one on success and
 // zero otherwise.
-// OPENSSL_EXPORT int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, uint8_t *out,
-//                                        int *out_len);
+OPENSSL_EXPORT int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, uint8_t *out,
+                                       int *out_len);
 
 // EVP_DecryptUpdate decrypts |in_len| bytes from |in| to |out|. The number of
 // output bytes may be up to |in_len| plus the block length minus one and |out|
@@ -201,9 +201,9 @@
 // function instead adds |in_len| bytes from |in| to the AAD and sets |*out_len|
 // to |in_len|. The AAD must be fully specified in this way before this function
 // is used to decrypt ciphertext.
-// OPENSSL_EXPORT int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, uint8_t *out,
-//                                      int *out_len, const uint8_t *in,
-//                                      int in_len);
+OPENSSL_EXPORT int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, uint8_t *out,
+                                     int *out_len, const uint8_t *in,
+                                     int in_len);
 
 // EVP_DecryptFinal_ex writes at most a block of ciphertext to |out| and sets
 // |*out_len| to the number of bytes written. If padding is enabled (the
@@ -211,8 +211,8 @@
 //
 // WARNING: it is unsafe to call this function with unauthenticated
 // ciphertext if padding is enabled.
-// OPENSSL_EXPORT int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, uint8_t *out,
-//                                        int *out_len);
+OPENSSL_EXPORT int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, uint8_t *out,
+                                       int *out_len);
 
 // EVP_Cipher performs a one-shot encryption/decryption operation for non-AEAD
 // ciphers. No partial blocks are maintained between calls. However, any
@@ -318,17 +318,17 @@
 
 // EVP_CIPHER_block_size returns the block size, in bytes, for |cipher|, or one
 // if |cipher| is a stream cipher.
-// OPENSSL_EXPORT unsigned EVP_CIPHER_block_size(const EVP_CIPHER *cipher);
+OPENSSL_EXPORT unsigned EVP_CIPHER_block_size(const EVP_CIPHER *cipher);
 
 // EVP_CIPHER_key_length returns the key size, in bytes, for |cipher|. If
 // |cipher| can take a variable key length then this function returns the
 // default key length and |EVP_CIPHER_flags| will return a value with
 // |EVP_CIPH_VARIABLE_LENGTH| set.
-// OPENSSL_EXPORT unsigned EVP_CIPHER_key_length(const EVP_CIPHER *cipher);
+OPENSSL_EXPORT unsigned EVP_CIPHER_key_length(const EVP_CIPHER *cipher);
 
 // EVP_CIPHER_iv_length returns the IV size, in bytes, of |cipher|, or zero if
 // |cipher| doesn't take an IV.
-// OPENSSL_EXPORT unsigned EVP_CIPHER_iv_length(const EVP_CIPHER *cipher);
+OPENSSL_EXPORT unsigned EVP_CIPHER_iv_length(const EVP_CIPHER *cipher);
 
 // EVP_CIPHER_flags returns a value which is the OR of zero or more
 // |EVP_CIPH_*| flags.
@@ -601,26 +601,26 @@
 // } EVP_CIPHER_INFO;
 
 
-// #if defined(__cplusplus)
-// }  // extern C
+#if defined(__cplusplus)
+}  // extern C
 
-// #if !defined(BORINGSSL_NO_CXX)
-// extern "C++" {
+#if !defined(BORINGSSL_NO_CXX)
+extern "C++" {
 
-// BSSL_NAMESPACE_BEGIN
+BSSL_NAMESPACE_BEGIN
 
-// BORINGSSL_MAKE_DELETER(EVP_CIPHER_CTX, EVP_CIPHER_CTX_free)
+BORINGSSL_MAKE_DELETER(EVP_CIPHER_CTX, EVP_CIPHER_CTX_free)
 
 // using ScopedEVP_CIPHER_CTX =
 //     internal::StackAllocated<EVP_CIPHER_CTX, int, EVP_CIPHER_CTX_init,
 //                              EVP_CIPHER_CTX_cleanup>;
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
-// #endif
+}  // extern C++
+#endif
 
-// #endif
+#endif
 
 #ifdef ossl_CIPHER_R_AES_KEY_SETUP_FAILED
 #define CIPHER_R_AES_KEY_SETUP_FAILED ossl_CIPHER_R_AES_KEY_SETUP_FAILED
@@ -701,4 +701,4 @@
 #define CIPHER_R_INVALID_NONCE ossl_CIPHER_R_INVALID_NONCE
 #endif
 
-// #endif  // OPENSSL_HEADER_CIPHER_H
+#endif  // OPENSSL_HEADER_CIPHER_H
