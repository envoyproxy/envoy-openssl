--- a/include/openssl/sha.h
+++ b/include/openssl/sha.h
@@ -54,14 +54,14 @@
  * copied and put under another distribution licence
  * [including the GNU Public Licence.] */
 
-// #ifndef OPENSSL_HEADER_SHA_H
-// #define OPENSSL_HEADER_SHA_H
+#ifndef OPENSSL_HEADER_SHA_H
+#define OPENSSL_HEADER_SHA_H
 
-// #include <openssl/base.h>
+#include <openssl/base.h>
 
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // The SHA family of hash functions (SHA-1 and SHA-2).
@@ -71,7 +71,7 @@
 // #define SHA_CBLOCK 64
 
 // SHA_DIGEST_LENGTH is the length of a SHA-1 digest.
-// #define SHA_DIGEST_LENGTH 20
+#define SHA_DIGEST_LENGTH 20
 
 // SHA1_Init initialises |sha| and returns one.
 // OPENSSL_EXPORT int SHA1_Init(SHA_CTX *sha);
@@ -87,8 +87,8 @@
 // SHA1 writes the digest of |len| bytes from |data| to |out| and returns
 // |out|. There must be at least |SHA_DIGEST_LENGTH| bytes of space in
 // |out|.
-// OPENSSL_EXPORT uint8_t *SHA1(const uint8_t *data, size_t len,
-//                              uint8_t out[SHA_DIGEST_LENGTH]);
+OPENSSL_EXPORT uint8_t *SHA1(const uint8_t *data, size_t len,
+                             uint8_t out[SHA_DIGEST_LENGTH]);
 
 // SHA1_Transform is a low-level function that performs a single, SHA-1 block
 // transformation using the state from |sha| and |SHA_CBLOCK| bytes from
@@ -125,7 +125,7 @@
 // #define SHA224_CBLOCK 64
 
 // SHA224_DIGEST_LENGTH is the length of a SHA-224 digest.
-// #define SHA224_DIGEST_LENGTH 28
+#define SHA224_DIGEST_LENGTH 28
 
 // SHA224_Init initialises |sha| and returns 1.
 // OPENSSL_EXPORT int SHA224_Init(SHA256_CTX *sha);
@@ -142,8 +142,8 @@
 // SHA224 writes the digest of |len| bytes from |data| to |out| and returns
 // |out|. There must be at least |SHA224_DIGEST_LENGTH| bytes of space in
 // |out|.
-// OPENSSL_EXPORT uint8_t *SHA224(const uint8_t *data, size_t len,
-//                                uint8_t out[SHA224_DIGEST_LENGTH]);
+OPENSSL_EXPORT uint8_t *SHA224(const uint8_t *data, size_t len,
+                               uint8_t out[SHA224_DIGEST_LENGTH]);
 
 
 // SHA-256.
@@ -152,7 +152,7 @@
 // #define SHA256_CBLOCK 64
 
 // SHA256_DIGEST_LENGTH is the length of a SHA-256 digest.
-// #define SHA256_DIGEST_LENGTH 32
+#define SHA256_DIGEST_LENGTH 32
 
 // SHA256_Init initialises |sha| and returns 1.
 // OPENSSL_EXPORT int SHA256_Init(SHA256_CTX *sha);
@@ -169,8 +169,8 @@
 // SHA256 writes the digest of |len| bytes from |data| to |out| and returns
 // |out|. There must be at least |SHA256_DIGEST_LENGTH| bytes of space in
 // |out|.
-// OPENSSL_EXPORT uint8_t *SHA256(const uint8_t *data, size_t len,
-//                                uint8_t out[SHA256_DIGEST_LENGTH]);
+OPENSSL_EXPORT uint8_t *SHA256(const uint8_t *data, size_t len,
+                               uint8_t out[SHA256_DIGEST_LENGTH]);
 
 // SHA256_Transform is a low-level function that performs a single, SHA-256
 // block transformation using the state from |sha| and |SHA256_CBLOCK| bytes
@@ -200,7 +200,7 @@
 // #define SHA384_CBLOCK 128
 
 // SHA384_DIGEST_LENGTH is the length of a SHA-384 digest.
-// #define SHA384_DIGEST_LENGTH 48
+#define SHA384_DIGEST_LENGTH 48
 
 // SHA384_Init initialises |sha| and returns 1.
 // OPENSSL_EXPORT int SHA384_Init(SHA512_CTX *sha);
@@ -217,8 +217,8 @@
 // SHA384 writes the digest of |len| bytes from |data| to |out| and returns
 // |out|. There must be at least |SHA384_DIGEST_LENGTH| bytes of space in
 // |out|.
-// OPENSSL_EXPORT uint8_t *SHA384(const uint8_t *data, size_t len,
-//                                uint8_t out[SHA384_DIGEST_LENGTH]);
+OPENSSL_EXPORT uint8_t *SHA384(const uint8_t *data, size_t len,
+                               uint8_t out[SHA384_DIGEST_LENGTH]);
 
 
 // SHA-512.
@@ -227,7 +227,7 @@
 // #define SHA512_CBLOCK 128
 
 // SHA512_DIGEST_LENGTH is the length of a SHA-512 digest.
-// #define SHA512_DIGEST_LENGTH 64
+#define SHA512_DIGEST_LENGTH 64
 
 // SHA512_Init initialises |sha| and returns 1.
 // OPENSSL_EXPORT int SHA512_Init(SHA512_CTX *sha);
@@ -244,8 +244,8 @@
 // SHA512 writes the digest of |len| bytes from |data| to |out| and returns
 // |out|. There must be at least |SHA512_DIGEST_LENGTH| bytes of space in
 // |out|.
-// OPENSSL_EXPORT uint8_t *SHA512(const uint8_t *data, size_t len,
-//                                uint8_t out[SHA512_DIGEST_LENGTH]);
+OPENSSL_EXPORT uint8_t *SHA512(const uint8_t *data, size_t len,
+                               uint8_t out[SHA512_DIGEST_LENGTH]);
 
 // SHA512_Transform is a low-level function that performs a single, SHA-512
 // block transformation using the state from |sha| and |SHA512_CBLOCK| bytes
@@ -265,7 +265,7 @@
 //
 // See https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf section 5.3.6
 
-// #define SHA512_256_DIGEST_LENGTH 32
+#define SHA512_256_DIGEST_LENGTH 32
 
 // SHA512_256_Init initialises |sha| and returns 1.
 // OPENSSL_EXPORT int SHA512_256_Init(SHA512_CTX *sha);
@@ -283,12 +283,12 @@
 // SHA512_256 writes the digest of |len| bytes from |data| to |out| and returns
 // |out|. There must be at least |SHA512_256_DIGEST_LENGTH| bytes of space in
 // |out|.
-// OPENSSL_EXPORT uint8_t *SHA512_256(const uint8_t *data, size_t len,
-//                                    uint8_t out[SHA512_256_DIGEST_LENGTH]);
+OPENSSL_EXPORT uint8_t *SHA512_256(const uint8_t *data, size_t len,
+                                   uint8_t out[SHA512_256_DIGEST_LENGTH]);
 
 
-// #if defined(__cplusplus)
-// }  // extern C
-// #endif
+#if defined(__cplusplus)
+}  // extern C
+#endif
 
-// #endif  // OPENSSL_HEADER_SHA_H
+#endif  // OPENSSL_HEADER_SHA_H
