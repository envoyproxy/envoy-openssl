--- a/include/openssl/digest.h
+++ b/include/openssl/digest.h
@@ -54,14 +54,14 @@
  * copied and put under another distribution licence
  * [including the GNU Public Licence.] */
 
-// #ifndef OPENSSL_HEADER_DIGEST_H
-// #define OPENSSL_HEADER_DIGEST_H
+#ifndef OPENSSL_HEADER_DIGEST_H
+#define OPENSSL_HEADER_DIGEST_H
 
-// #include <openssl/base.h>
+#include <openssl/base.h>
 
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // Digest functions.
@@ -76,19 +76,19 @@
 // The following functions return |EVP_MD| objects that implement the named hash
 // function.
 
-// OPENSSL_EXPORT const EVP_MD *EVP_md4(void);
-// OPENSSL_EXPORT const EVP_MD *EVP_md5(void);
-// OPENSSL_EXPORT const EVP_MD *EVP_sha1(void);
-// OPENSSL_EXPORT const EVP_MD *EVP_sha224(void);
-// OPENSSL_EXPORT const EVP_MD *EVP_sha256(void);
-// OPENSSL_EXPORT const EVP_MD *EVP_sha384(void);
-// OPENSSL_EXPORT const EVP_MD *EVP_sha512(void);
-// OPENSSL_EXPORT const EVP_MD *EVP_sha512_256(void);
+OPENSSL_EXPORT const EVP_MD *EVP_md4(void);
+OPENSSL_EXPORT const EVP_MD *EVP_md5(void);
+OPENSSL_EXPORT const EVP_MD *EVP_sha1(void);
+OPENSSL_EXPORT const EVP_MD *EVP_sha224(void);
+OPENSSL_EXPORT const EVP_MD *EVP_sha256(void);
+OPENSSL_EXPORT const EVP_MD *EVP_sha384(void);
+OPENSSL_EXPORT const EVP_MD *EVP_sha512(void);
+OPENSSL_EXPORT const EVP_MD *EVP_sha512_256(void);
 // OPENSSL_EXPORT const EVP_MD *EVP_blake2b256(void);
 
 // EVP_md5_sha1 is a TLS-specific |EVP_MD| which computes the concatenation of
 // MD5 and SHA-1, as used in TLS 1.1 and below.
-// OPENSSL_EXPORT const EVP_MD *EVP_md5_sha1(void);
+OPENSSL_EXPORT const EVP_MD *EVP_md5_sha1(void);
 
 // EVP_get_digestbynid returns an |EVP_MD| for the given NID, or NULL if no
 // such digest is known.
@@ -111,7 +111,7 @@
 // EVP_MD_CTX_new allocates and initialises a fresh |EVP_MD_CTX| and returns
 // it, or NULL on allocation failure. The caller must use |EVP_MD_CTX_free| to
 // release the resulting object.
-// OPENSSL_EXPORT EVP_MD_CTX *EVP_MD_CTX_new(void);
+OPENSSL_EXPORT EVP_MD_CTX *EVP_MD_CTX_new(void);
 
 // EVP_MD_CTX_cleanup frees any resources owned by |ctx| and resets it to a
 // freshly initialised state. It does not free |ctx| itself. It returns one.
@@ -125,19 +125,19 @@
 // OPENSSL_EXPORT void EVP_MD_CTX_cleanse(EVP_MD_CTX *ctx);
 
 // EVP_MD_CTX_free calls |EVP_MD_CTX_cleanup| and then frees |ctx| itself.
-// OPENSSL_EXPORT void EVP_MD_CTX_free(EVP_MD_CTX *ctx);
+OPENSSL_EXPORT void EVP_MD_CTX_free(EVP_MD_CTX *ctx);
 
 // EVP_MD_CTX_copy_ex sets |out|, which must already be initialised, to be a
 // copy of |in|. It returns one on success and zero on allocation failure.
-// OPENSSL_EXPORT int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in);
+OPENSSL_EXPORT int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in);
 
 // EVP_MD_CTX_move sets |out|, which must already be initialised, to the hash
 // state in |in|. |in| is mutated and left in an empty state.
-// OPENSSL_EXPORT void EVP_MD_CTX_move(EVP_MD_CTX *out, EVP_MD_CTX *in);
+OPENSSL_EXPORT void EVP_MD_CTX_move(EVP_MD_CTX *out, EVP_MD_CTX *in);
 
 // EVP_MD_CTX_reset calls |EVP_MD_CTX_cleanup| followed by |EVP_MD_CTX_init|. It
 // returns one.
-// OPENSSL_EXPORT int EVP_MD_CTX_reset(EVP_MD_CTX *ctx);
+OPENSSL_EXPORT int EVP_MD_CTX_reset(EVP_MD_CTX *ctx);
 
 
 // Digest operations.
@@ -145,8 +145,8 @@
 // EVP_DigestInit_ex configures |ctx|, which must already have been
 // initialised, for a fresh hashing operation using |type|. It returns one on
 // success and zero on allocation failure.
-// OPENSSL_EXPORT int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type,
-//                                      ENGINE *engine);
+OPENSSL_EXPORT int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type,
+                                     ENGINE *engine);
 
 // EVP_DigestInit acts like |EVP_DigestInit_ex| except that |ctx| is
 // initialised before use.
@@ -154,13 +154,13 @@
 
 // EVP_DigestUpdate hashes |len| bytes from |data| into the hashing operation
 // in |ctx|. It returns one.
-// OPENSSL_EXPORT int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *data,
-//                                     size_t len);
+OPENSSL_EXPORT int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *data,
+                                    size_t len);
 
 // EVP_MAX_MD_SIZE is the largest digest size supported, in bytes.
 // Functions that output a digest generally require the buffer have
 // at least this much space.
-// #define EVP_MAX_MD_SIZE 64  // SHA-512 is the longest so far.
+#define EVP_MAX_MD_SIZE ossl_EVP_MAX_MD_SIZE
 
 // EVP_MAX_MD_BLOCK_SIZE is the largest digest block size supported, in
 // bytes.
@@ -172,8 +172,8 @@
 // number of bytes written. It returns one. After this call, the hash cannot be
 // updated or finished again until |EVP_DigestInit_ex| is called to start
 // another hashing operation.
-// OPENSSL_EXPORT int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, uint8_t *md_out,
-//                                       unsigned int *out_size);
+OPENSSL_EXPORT int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, uint8_t *md_out,
+                                      unsigned int *out_size);
 
 // EVP_DigestFinal acts like |EVP_DigestFinal_ex| except that
 // |EVP_MD_CTX_cleanup| is called on |ctx| before returning.
@@ -203,7 +203,7 @@
 // OPENSSL_EXPORT uint32_t EVP_MD_flags(const EVP_MD *md);
 
 // EVP_MD_size returns the digest size of |md|, in bytes.
-// OPENSSL_EXPORT size_t EVP_MD_size(const EVP_MD *md);
+OPENSSL_EXPORT size_t EVP_MD_size(const EVP_MD *md);
 
 // EVP_MD_block_size returns the native block-size of |md|, in bytes.
 // OPENSSL_EXPORT size_t EVP_MD_block_size(const EVP_MD *md);
@@ -327,26 +327,48 @@
 // } /* EVP_MD_CTX */;
 
 
-// #if defined(__cplusplus)
-// }  // extern C
+#if defined(__cplusplus)
+}  // extern C
 
-// #if !defined(BORINGSSL_NO_CXX)
-// extern "C++" {
+#if !defined(BORINGSSL_NO_CXX)
+extern "C++" {
 
-// BSSL_NAMESPACE_BEGIN
+BSSL_NAMESPACE_BEGIN
 
 // BORINGSSL_MAKE_DELETER(EVP_MD_CTX, EVP_MD_CTX_free)
 
-// using ScopedEVP_MD_CTX =
-//     internal::StackAllocatedMovable<EVP_MD_CTX, int, EVP_MD_CTX_init,
-//                                     EVP_MD_CTX_cleanup, EVP_MD_CTX_move>;
+class ScopedEVP_MD_CTX {
+  public:
+    ScopedEVP_MD_CTX() : ctx_(EVP_MD_CTX_new()) {}
+    ~ScopedEVP_MD_CTX() { EVP_MD_CTX_free(ctx_); }
+
+    ScopedEVP_MD_CTX(ScopedEVP_MD_CTX &&other) {
+      EVP_MD_CTX_move(ctx_, other.ctx_);
+    }
+    ScopedEVP_MD_CTX &operator=(ScopedEVP_MD_CTX &&other) {
+      EVP_MD_CTX_move(ctx_, other.ctx_);
+      return *this;
+    }
+
+    EVP_MD_CTX *get() { return ctx_; }
+    const EVP_MD_CTX *get() const { return ctx_; }
+
+    EVP_MD_CTX *operator->() { return ctx_; }
+    const EVP_MD_CTX *operator->() const { return ctx_; }
+
+    void Reset() {
+      EVP_MD_CTX_reset(ctx_);
+    }
+  private:
+    EVP_MD_CTX *ctx_;
+};
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
-// #endif
+}  // extern C++
+#endif
 
-// #endif
+#endif
 
 #ifdef ossl_DIGEST_R_INPUT_NOT_INITIALIZED
 #define DIGEST_R_INPUT_NOT_INITIALIZED ossl_DIGEST_R_INPUT_NOT_INITIALIZED
@@ -358,4 +380,4 @@
 #define DIGEST_R_UNKNOWN_HASH ossl_DIGEST_R_UNKNOWN_HASH
 #endif
 
-// #endif  // OPENSSL_HEADER_DIGEST_H
+#endif  // OPENSSL_HEADER_DIGEST_H
