--- a/include/openssl/err.h
+++ b/include/openssl/err.h
@@ -106,16 +106,17 @@
  * (eay@cryptsoft.com).  This product includes software written by Tim
  * Hudson (tjh@cryptsoft.com). */
 
-// #ifndef OPENSSL_HEADER_ERR_H
-// #define OPENSSL_HEADER_ERR_H
+#ifndef OPENSSL_HEADER_ERR_H
+#define OPENSSL_HEADER_ERR_H
 
-// #include <stdio.h>
+#include <stdio.h>
 
-// #include <openssl/base.h>
+#include <openssl/base.h>
+#include <ossl/openssl/err.h>
 
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // Error queue handling functions.
@@ -163,17 +164,17 @@
 
 // ERR_GET_LIB returns the library code for the error. This is one of
 // the |ERR_LIB_*| values.
-// #define ERR_GET_LIB(packed_error) ((int)(((packed_error) >> 24) & 0xff))
+#define ERR_GET_LIB(packed_error) ossl_ERR_GET_LIB(packed_error)
 
 // ERR_GET_REASON returns the reason code for the error. This is one of
 // library-specific |LIB_R_*| values where |LIB| is the library (see
 // |ERR_GET_LIB|). Note that reason codes are specific to the library.
-// #define ERR_GET_REASON(packed_error) ((int)((packed_error) & 0xfff))
+#define ERR_GET_REASON(packed_error) ossl_ERR_GET_REASON(packed_error)
 
 // ERR_get_error gets the packed error code for the least recent error and
 // removes that error from the queue. If there are no errors in the queue then
 // it returns zero.
-// OPENSSL_EXPORT uint32_t ERR_get_error(void);
+OPENSSL_EXPORT uint32_t ERR_get_error(void);
 
 // ERR_get_error_line acts like |ERR_get_error|, except that the file and line
 // number of the call that added the error are also returned.
@@ -224,17 +225,17 @@
 //
 // error code is an 8 digit hexadecimal number; library name and reason string
 // are ASCII text.
-// OPENSSL_EXPORT char *ERR_error_string_n(uint32_t packed_error, char *buf,
-//                                         size_t len);
+OPENSSL_EXPORT char *ERR_error_string_n(uint32_t packed_error, char *buf,
+                                        size_t len);
 
 // ERR_lib_error_string returns a string representation of the library that
 // generated |packed_error|, or a placeholder string is the library is
 // unrecognized.
-// OPENSSL_EXPORT const char *ERR_lib_error_string(uint32_t packed_error);
+OPENSSL_EXPORT const char *ERR_lib_error_string(uint32_t packed_error);
 
 // ERR_reason_error_string returns a string representation of the reason for
 // |packed_error|, or a placeholder string if the reason is unrecognized.
-// OPENSSL_EXPORT const char *ERR_reason_error_string(uint32_t packed_error);
+OPENSSL_EXPORT const char *ERR_reason_error_string(uint32_t packed_error);
 
 // ERR_print_errors_callback_t is the type of a function used by
 // |ERR_print_errors_cb|. It takes a pointer to a human readable string (and
@@ -263,13 +264,13 @@
 
 // ERR_print_errors_fp clears the current thread's error queue, printing each
 // error to |file|. See |ERR_print_errors_cb| for the format.
-// OPENSSL_EXPORT void ERR_print_errors_fp(FILE *file);
+OPENSSL_EXPORT void ERR_print_errors_fp(FILE *file);
 
 
 // Clearing errors.
 
 // ERR_clear_error clears the error queue for the current thread.
-// OPENSSL_EXPORT void ERR_clear_error(void);
+OPENSSL_EXPORT void ERR_clear_error(void);
 
 // ERR_set_mark "marks" the most recent error for use with |ERR_pop_to_mark|.
 // It returns one if an error was marked and zero if there are no errors.
@@ -293,7 +294,7 @@
 // Built-in library and reason codes.
 
 // The following values are built-in library codes.
-// enum {
+enum {
 #ifdef ossl_ERR_LIB_NONE
   ERR_LIB_NONE = ossl_ERR_LIB_NONE,
 #endif
@@ -393,8 +394,8 @@
 #ifdef ossl_ERR_LIB_USER
   ERR_LIB_USER = ossl_ERR_LIB_USER,
 #endif
-//   ERR_NUM_LIBS
-// };
+  ERR_NUM_LIBS
+};
 
 // The following reason codes used to denote an error occuring in another
 // library. They are sometimes used for a stack trace.
@@ -561,8 +562,8 @@
 // Use |ERR_error_string_n| instead.
 //
 // TODO(fork): remove this function.
-// OPENSSL_EXPORT char *ERR_error_string(uint32_t packed_error, char *buf);
-// #define ERR_ERROR_STRING_BUF_LEN 120
+OPENSSL_EXPORT char *ERR_error_string(uint32_t packed_error, char *buf);
+#define ERR_ERROR_STRING_BUF_LEN 120
 
 // ERR_GET_FUNC returns zero. BoringSSL errors do not report a function code.
 // #define ERR_GET_FUNC(packed_error) 0
@@ -580,8 +581,8 @@
 
 // OPENSSL_PUT_ERROR is used by OpenSSL code to add an error to the error
 // queue.
-// #define OPENSSL_PUT_ERROR(library, reason) \
-//   ERR_put_error(ERR_LIB_##library, 0, reason, __FILE__, __LINE__)
+#define OPENSSL_PUT_ERROR(library, reason) \
+  ERR_put_error(ERR_LIB_##library, 0, reason, __FILE__, __LINE__)
 
 // OPENSSL_PUT_SYSTEM_ERROR is used by OpenSSL code to add an error from the
 // operating system to the error queue.
@@ -591,8 +592,8 @@
 
 // ERR_put_error adds an error to the error queue, dropping the least recent
 // error if necessary for space reasons.
-// OPENSSL_EXPORT void ERR_put_error(int library, int unused, int reason,
-//                                   const char *file, unsigned line);
+OPENSSL_EXPORT void ERR_put_error(int library, int unused, int reason,
+                                  const char *file, unsigned line);
 
 // ERR_add_error_data takes a variable number (|count|) of const char*
 // pointers, concatenates them and sets the result as the data on the most
@@ -621,8 +622,7 @@
 #define ERR_NUM_ERRORS ossl_ERR_NUM_ERRORS
 #endif
 
-// #define ERR_PACK(lib, reason)                                              \
-//   (((((uint32_t)(lib)) & 0xff) << 24) | ((((uint32_t)(reason)) & 0xfff)))
+#define ERR_PACK(lib, reason) ossl_ERR_PACK(lib, 0, reason)
 
 // OPENSSL_DECLARE_ERROR_REASON is used by util/make_errors.h (which generates
 // the error defines) to recognise that an additional reason value is needed.
@@ -632,8 +632,8 @@
 // #define OPENSSL_DECLARE_ERROR_REASON(lib, reason)
 
 
-// #if defined(__cplusplus)
-// }  // extern C
-// #endif
+#if defined(__cplusplus)
+}  // extern C
+#endif
 
-// #endif  // OPENSSL_HEADER_ERR_H
+#endif  // OPENSSL_HEADER_ERR_H
