--- a/include/openssl/base.h
+++ b/include/openssl/base.h
@@ -50,123 +50,127 @@
  * (eay@cryptsoft.com).  This product includes software written by Tim
  * Hudson (tjh@cryptsoft.com). */
 
-// #ifndef OPENSSL_HEADER_BASE_H
-// #define OPENSSL_HEADER_BASE_H
+#ifndef OPENSSL_HEADER_BASE_H
+#define OPENSSL_HEADER_BASE_H
 
 
 // This file should be the first included by all BoringSSL headers.
 
-// #include <stddef.h>
-// #include <stdint.h>
-// #include <sys/types.h>
+#include <stddef.h>
+#include <stdint.h>
+#include <sys/types.h>
 
-// #if defined(__MINGW32__)
+#if defined(__MINGW32__)
 // stdio.h is needed on MinGW for __MINGW_PRINTF_FORMAT.
-// #include <stdio.h>
-// #endif
+#include <stdio.h>
+#endif
 
-// #if defined(__APPLE__)
-// #include <TargetConditionals.h>
-// #endif
+#if defined(__APPLE__)
+#include <TargetConditionals.h>
+#endif
 
 // Include a BoringSSL-only header so consumers including this header without
 // setting up include paths do not accidentally pick up the system
 // opensslconf.h.
-// #include <openssl/is_boringssl.h>
-// #include <openssl/opensslconf.h>
+#include <openssl/is_boringssl.h>
+#include <openssl/opensslconf.h>
 
-// #if defined(BORINGSSL_PREFIX)
-// #include <boringssl_prefix_symbols.h>
-// #endif
-
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
-
-
-// #if defined(__x86_64) || defined(_M_AMD64) || defined(_M_X64)
-// #define OPENSSL_64_BIT
-// #define OPENSSL_X86_64
-// #elif defined(__x86) || defined(__i386) || defined(__i386__) || defined(_M_IX86)
-// #define OPENSSL_32_BIT
-// #define OPENSSL_X86
-// #elif defined(__AARCH64EL__) || defined(_M_ARM64)
-// #define OPENSSL_64_BIT
-// #define OPENSSL_AARCH64
-// #elif defined(__ARMEL__) || defined(_M_ARM)
-// #define OPENSSL_32_BIT
-// #define OPENSSL_ARM
-// #elif (defined(__PPC64__) || defined(__powerpc64__)) && defined(_LITTLE_ENDIAN)
-// #define OPENSSL_64_BIT
-// #define OPENSSL_PPC64LE
-// #elif defined(__MIPSEL__) && !defined(__LP64__)
-// #define OPENSSL_32_BIT
-// #define OPENSSL_MIPS
-// #elif defined(__MIPSEL__) && defined(__LP64__)
-// #define OPENSSL_64_BIT
-// #define OPENSSL_MIPS64
-// #elif defined(__riscv) && __SIZEOF_POINTER__ == 8
-// #define OPENSSL_64_BIT
-// #elif defined(__riscv) && __SIZEOF_POINTER__ == 4
-// #define OPENSSL_32_BIT
-// #elif defined(__pnacl__)
-// #define OPENSSL_32_BIT
-// #define OPENSSL_PNACL
-// #elif defined(__wasm__)
-// #define OPENSSL_32_BIT
-// #elif defined(__asmjs__)
-// #define OPENSSL_32_BIT
-// #elif defined(__myriad2__)
-// #define OPENSSL_32_BIT
-// #elif defined(__riscv) && __riscv_xlen == 64
-// #define OPENSSL_64_BIT
-// #else
+#if defined(BORINGSSL_PREFIX)
+#include <boringssl_prefix_symbols.h>
+#endif
+
+#define BSSL_COMPAT
+#include <ossl/openssl/types.h>
+#include <ossl/openssl/ssl.h>
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+
+#if defined(__x86_64) || defined(_M_AMD64) || defined(_M_X64)
+#define OPENSSL_64_BIT
+#define OPENSSL_X86_64
+#elif defined(__x86) || defined(__i386) || defined(__i386__) || defined(_M_IX86)
+#define OPENSSL_32_BIT
+#define OPENSSL_X86
+#elif defined(__AARCH64EL__) || defined(_M_ARM64)
+#define OPENSSL_64_BIT
+#define OPENSSL_AARCH64
+#elif defined(__ARMEL__) || defined(_M_ARM)
+#define OPENSSL_32_BIT
+#define OPENSSL_ARM
+#elif (defined(__PPC64__) || defined(__powerpc64__)) && defined(_LITTLE_ENDIAN)
+#define OPENSSL_64_BIT
+#define OPENSSL_PPC64LE
+#elif defined(__MIPSEL__) && !defined(__LP64__)
+#define OPENSSL_32_BIT
+#define OPENSSL_MIPS
+#elif defined(__MIPSEL__) && defined(__LP64__)
+#define OPENSSL_64_BIT
+#define OPENSSL_MIPS64
+#elif defined(__riscv) && __SIZEOF_POINTER__ == 8
+#define OPENSSL_64_BIT
+#elif defined(__riscv) && __SIZEOF_POINTER__ == 4
+#define OPENSSL_32_BIT
+#elif defined(__pnacl__)
+#define OPENSSL_32_BIT
+#define OPENSSL_PNACL
+#elif defined(__wasm__)
+#define OPENSSL_32_BIT
+#elif defined(__asmjs__)
+#define OPENSSL_32_BIT
+#elif defined(__myriad2__)
+#define OPENSSL_32_BIT
+#elif defined(__riscv) && __riscv_xlen == 64
+#define OPENSSL_64_BIT
+#else
 // Note BoringSSL only supports standard 32-bit and 64-bit two's-complement,
 // little-endian architectures. Functions will not produce the correct answer
 // on other systems. Run the crypto_test binary, notably
 // crypto/compiler_test.cc, before adding a new architecture.
-// #error "Unknown target CPU"
-// #endif
+#error "Unknown target CPU"
+#endif
 
-// #if defined(__APPLE__)
-// #define OPENSSL_APPLE
+#if defined(__APPLE__)
+#define OPENSSL_APPLE
 // Note |TARGET_OS_MAC| is set for all Apple OS variants. |TARGET_OS_OSX|
 // targets macOS specifically.
-// #if defined(TARGET_OS_OSX) && TARGET_OS_OSX
-// #define OPENSSL_MACOS
-// #endif
-// #if defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE
-// #define OPENSSL_IOS
-// #endif
-// #endif
-
-// #if defined(_WIN32)
-// #define OPENSSL_WINDOWS
-// #endif
+#if defined(TARGET_OS_OSX) && TARGET_OS_OSX
+#define OPENSSL_MACOS
+#endif
+#if defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE
+#define OPENSSL_IOS
+#endif
+#endif
+
+#if defined(_WIN32)
+#define OPENSSL_WINDOWS
+#endif
 
 // Trusty isn't Linux but currently defines __linux__. As a workaround, we
 // exclude it here.
 // TODO(b/169780122): Remove this workaround once Trusty no longer defines it.
-// #if defined(__linux__) && !defined(__TRUSTY__)
-// #define OPENSSL_LINUX
-// #endif
-
-// #if defined(__Fuchsia__)
-// #define OPENSSL_FUCHSIA
-// #endif
-
-// #if defined(__TRUSTY__)
-// #define OPENSSL_TRUSTY
-// #define OPENSSL_NO_THREADS_CORRUPT_MEMORY_AND_LEAK_SECRETS_IF_THREADED
-// #endif
-
-// #if defined(__ANDROID_API__)
-// #define OPENSSL_ANDROID
-// #endif
-
-// #if defined(__FreeBSD__)
-// #define OPENSSL_FREEBSD
-// #endif
+#if defined(__linux__) && !defined(__TRUSTY__)
+#define OPENSSL_LINUX
+#endif
+
+#if defined(__Fuchsia__)
+#define OPENSSL_FUCHSIA
+#endif
+
+#if defined(__TRUSTY__)
+#define OPENSSL_TRUSTY
+#define OPENSSL_NO_THREADS_CORRUPT_MEMORY_AND_LEAK_SECRETS_IF_THREADED
+#endif
+
+#if defined(__ANDROID_API__)
+#define OPENSSL_ANDROID
+#endif
+
+#if defined(__FreeBSD__)
+#define OPENSSL_FREEBSD
+#endif
 
 // BoringSSL requires platform's locking APIs to make internal global state
 // thread-safe, including the PRNG. On some single-threaded embedded platforms,
@@ -181,13 +185,13 @@
 // Do not set this flag on any platform where threads are possible. BoringSSL
 // maintainers will not provide support for any consumers that do so. Changes
 // which break such unsupported configurations will not be reverted.
-// #if !defined(OPENSSL_NO_THREADS_CORRUPT_MEMORY_AND_LEAK_SECRETS_IF_THREADED)
-// #define OPENSSL_THREADS
-// #endif
-
-// #define OPENSSL_IS_BORINGSSL
-// #define OPENSSL_VERSION_NUMBER 0x1010107f
-// #define SSLEAY_VERSION_NUMBER OPENSSL_VERSION_NUMBER
+#if !defined(OPENSSL_NO_THREADS_CORRUPT_MEMORY_AND_LEAK_SECRETS_IF_THREADED)
+#define OPENSSL_THREADS
+#endif
+
+#define OPENSSL_IS_BORINGSSL
+#define OPENSSL_VERSION_NUMBER 0x1010107f
+#define SSLEAY_VERSION_NUMBER OPENSSL_VERSION_NUMBER
 
 // BORINGSSL_API_VERSION is a positive integer that increments as BoringSSL
 // changes over time. The value itself is not meaningful. It will be incremented
@@ -197,63 +201,63 @@
 // A consumer may use this symbol in the preprocessor to temporarily build
 // against multiple revisions of BoringSSL at the same time. It is not
 // recommended to do so for longer than is necessary.
-// #define BORINGSSL_API_VERSION 18
+#define BORINGSSL_API_VERSION 18
 
-// #if defined(BORINGSSL_SHARED_LIBRARY)
+#if defined(BORINGSSL_SHARED_LIBRARY)
 
-// #if defined(OPENSSL_WINDOWS)
+#if defined(OPENSSL_WINDOWS)
 
-// #if defined(BORINGSSL_IMPLEMENTATION)
-// #define OPENSSL_EXPORT __declspec(dllexport)
-// #else
-// #define OPENSSL_EXPORT __declspec(dllimport)
-// #endif
+#if defined(BORINGSSL_IMPLEMENTATION)
+#define OPENSSL_EXPORT __declspec(dllexport)
+#else
+#define OPENSSL_EXPORT __declspec(dllimport)
+#endif
 
-// #else  // defined(OPENSSL_WINDOWS)
+#else  // defined(OPENSSL_WINDOWS)
 
-// #if defined(BORINGSSL_IMPLEMENTATION)
-// #define OPENSSL_EXPORT __attribute__((visibility("default")))
-// #else
-// #define OPENSSL_EXPORT
-// #endif
+#if defined(BORINGSSL_IMPLEMENTATION)
+#define OPENSSL_EXPORT __attribute__((visibility("default")))
+#else
+#define OPENSSL_EXPORT
+#endif
 
-// #endif  // defined(OPENSSL_WINDOWS)
+#endif  // defined(OPENSSL_WINDOWS)
 
-// #else  // defined(BORINGSSL_SHARED_LIBRARY)
+#else  // defined(BORINGSSL_SHARED_LIBRARY)
 
-// #define OPENSSL_EXPORT
+#define OPENSSL_EXPORT
 
-// #endif  // defined(BORINGSSL_SHARED_LIBRARY)
+#endif  // defined(BORINGSSL_SHARED_LIBRARY)
 
 
-// #if defined(__GNUC__) || defined(__clang__)
+#if defined(__GNUC__) || defined(__clang__)
 // MinGW has two different printf implementations. Ensure the format macro
 // matches the selected implementation. See
 // https://sourceforge.net/p/mingw-w64/wiki2/gnu%20printf/.
-// #if defined(__MINGW_PRINTF_FORMAT)
-// #define OPENSSL_PRINTF_FORMAT_FUNC(string_index, first_to_check) \
-//   __attribute__(                                                 \
-//       (__format__(__MINGW_PRINTF_FORMAT, string_index, first_to_check)))
-// #else
-// #define OPENSSL_PRINTF_FORMAT_FUNC(string_index, first_to_check) \
-//   __attribute__((__format__(__printf__, string_index, first_to_check)))
-// #endif
-// #else
-// #define OPENSSL_PRINTF_FORMAT_FUNC(string_index, first_to_check)
-// #endif
+#if defined(__MINGW_PRINTF_FORMAT)
+#define OPENSSL_PRINTF_FORMAT_FUNC(string_index, first_to_check) \
+  __attribute__(                                                 \
+      (__format__(__MINGW_PRINTF_FORMAT, string_index, first_to_check)))
+#else
+#define OPENSSL_PRINTF_FORMAT_FUNC(string_index, first_to_check) \
+  __attribute__((__format__(__printf__, string_index, first_to_check)))
+#endif
+#else
+#define OPENSSL_PRINTF_FORMAT_FUNC(string_index, first_to_check)
+#endif
 
 // OPENSSL_MSVC_PRAGMA emits a pragma on MSVC and nothing on other compilers.
-// #if defined(_MSC_VER)
-// #define OPENSSL_MSVC_PRAGMA(arg) __pragma(arg)
-// #else
-// #define OPENSSL_MSVC_PRAGMA(arg)
-// #endif
-
-// #if defined(__GNUC__) || defined(__clang__)
-// #define OPENSSL_UNUSED __attribute__((unused))
-// #else
-// #define OPENSSL_UNUSED
-// #endif
+#if defined(_MSC_VER)
+#define OPENSSL_MSVC_PRAGMA(arg) __pragma(arg)
+#else
+#define OPENSSL_MSVC_PRAGMA(arg)
+#endif
+
+#if defined(__GNUC__) || defined(__clang__)
+#define OPENSSL_UNUSED __attribute__((unused))
+#else
+#define OPENSSL_UNUSED
+#endif
 
 // C and C++ handle inline functions differently. In C++, an inline function is
 // defined in just the header file, potentially emitted in multiple compilation
@@ -275,60 +279,60 @@
 // not used much in practice, extern inline is tedious, and there are conflicts
 // with the old gnu89 model:
 // https://stackoverflow.com/questions/216510/extern-inline
-// #if defined(__cplusplus)
-// #define OPENSSL_INLINE inline
-// #else
+#if defined(__cplusplus)
+#define OPENSSL_INLINE inline
+#else
 // Add OPENSSL_UNUSED so that, should an inline function be emitted via macro
 // (e.g. a |STACK_OF(T)| implementation) in a source file without tripping
 // clang's -Wunused-function.
-// #define OPENSSL_INLINE static inline OPENSSL_UNUSED
-// #endif
+#define OPENSSL_INLINE static inline OPENSSL_UNUSED
+#endif
 
-// #if defined(BORINGSSL_UNSAFE_FUZZER_MODE) && \
-//     !defined(BORINGSSL_UNSAFE_DETERMINISTIC_MODE)
-// #define BORINGSSL_UNSAFE_DETERMINISTIC_MODE
-// #endif
-
-// #if defined(__has_feature)
-// #if __has_feature(address_sanitizer)
-// #define OPENSSL_ASAN
-// #endif
-// #if __has_feature(thread_sanitizer)
-// #define OPENSSL_TSAN
-// #endif
-// #if __has_feature(memory_sanitizer)
-// #define OPENSSL_MSAN
-// #define OPENSSL_ASM_INCOMPATIBLE
-// #endif
-// #endif
-
-// #if defined(OPENSSL_ASM_INCOMPATIBLE)
-// #undef OPENSSL_ASM_INCOMPATIBLE
-// #if !defined(OPENSSL_NO_ASM)
-// #define OPENSSL_NO_ASM
-// #endif
-// #endif  // OPENSSL_ASM_INCOMPATIBLE
+#if defined(BORINGSSL_UNSAFE_FUZZER_MODE) && \
+    !defined(BORINGSSL_UNSAFE_DETERMINISTIC_MODE)
+#define BORINGSSL_UNSAFE_DETERMINISTIC_MODE
+#endif
+
+#if defined(__has_feature)
+#if __has_feature(address_sanitizer)
+#define OPENSSL_ASAN
+#endif
+#if __has_feature(thread_sanitizer)
+#define OPENSSL_TSAN
+#endif
+#if __has_feature(memory_sanitizer)
+#define OPENSSL_MSAN
+#define OPENSSL_ASM_INCOMPATIBLE
+#endif
+#endif
+
+#if defined(OPENSSL_ASM_INCOMPATIBLE)
+#undef OPENSSL_ASM_INCOMPATIBLE
+#if !defined(OPENSSL_NO_ASM)
+#define OPENSSL_NO_ASM
+#endif
+#endif  // OPENSSL_ASM_INCOMPATIBLE
 
-// #if defined(__cplusplus)
+#if defined(__cplusplus)
 // enums can be predeclared, but only in C++ and only if given an explicit type.
 // C doesn't support setting an explicit type for enums thus a #define is used
 // to do this only for C++. However, the ABI type between C and C++ need to have
 // equal sizes, which is confirmed in a unittest.
-// #define BORINGSSL_ENUM_INT : int
-// enum ssl_early_data_reason_t BORINGSSL_ENUM_INT;
-// enum ssl_encryption_level_t BORINGSSL_ENUM_INT;
-// enum ssl_private_key_result_t BORINGSSL_ENUM_INT;
-// enum ssl_renegotiate_mode_t BORINGSSL_ENUM_INT;
-// enum ssl_select_cert_result_t BORINGSSL_ENUM_INT;
-// enum ssl_select_cert_result_t BORINGSSL_ENUM_INT;
-// enum ssl_ticket_aead_result_t BORINGSSL_ENUM_INT;
-// enum ssl_verify_result_t BORINGSSL_ENUM_INT;
-// #else
-// #define BORINGSSL_ENUM_INT
-// #endif
+#define BORINGSSL_ENUM_INT : int
+enum ssl_early_data_reason_t BORINGSSL_ENUM_INT;
+enum ssl_encryption_level_t BORINGSSL_ENUM_INT;
+enum ssl_private_key_result_t BORINGSSL_ENUM_INT;
+enum ssl_renegotiate_mode_t BORINGSSL_ENUM_INT;
+enum ssl_select_cert_result_t BORINGSSL_ENUM_INT;
+enum ssl_select_cert_result_t BORINGSSL_ENUM_INT;
+enum ssl_ticket_aead_result_t BORINGSSL_ENUM_INT;
+enum ssl_verify_result_t BORINGSSL_ENUM_INT;
+#else
+#define BORINGSSL_ENUM_INT
+#endif
 
 // CRYPTO_THREADID is a dummy value.
-// typedef int CRYPTO_THREADID;
+typedef int CRYPTO_THREADID;
 
 // An |ASN1_NULL| is an opaque type. asn1.h represents the ASN.1 NULL value as
 // an opaque, non-NULL |ASN1_NULL*| pointer.
@@ -336,20 +340,20 @@
 
 // typedef int ASN1_BOOLEAN;
 // typedef struct ASN1_ITEM_st ASN1_ITEM;
-// typedef struct asn1_object_st ASN1_OBJECT;
+typedef ossl_ASN1_OBJECT ASN1_OBJECT;
 // typedef struct asn1_pctx_st ASN1_PCTX;
 // typedef struct asn1_string_st ASN1_BIT_STRING;
 // typedef struct asn1_string_st ASN1_BMPSTRING;
 // typedef struct asn1_string_st ASN1_ENUMERATED;
 // typedef struct asn1_string_st ASN1_GENERALIZEDTIME;
 // typedef struct asn1_string_st ASN1_GENERALSTRING;
-// typedef struct asn1_string_st ASN1_IA5STRING;
-// typedef struct asn1_string_st ASN1_INTEGER;
+typedef ossl_ASN1_IA5STRING ASN1_IA5STRING;
+typedef ossl_ASN1_INTEGER ASN1_INTEGER;
 // typedef struct asn1_string_st ASN1_OCTET_STRING;
 // typedef struct asn1_string_st ASN1_PRINTABLESTRING;
-// typedef struct asn1_string_st ASN1_STRING;
+typedef ossl_ASN1_STRING ASN1_STRING;
 // typedef struct asn1_string_st ASN1_T61STRING;
-// typedef struct asn1_string_st ASN1_TIME;
+typedef ossl_ASN1_TIME ASN1_TIME;
 // typedef struct asn1_string_st ASN1_UNIVERSALSTRING;
 // typedef struct asn1_string_st ASN1_UTCTIME;
 // typedef struct asn1_string_st ASN1_UTF8STRING;
@@ -364,45 +368,45 @@
 // typedef struct Netscape_spkac_st NETSCAPE_SPKAC;
 // typedef struct Netscape_spki_st NETSCAPE_SPKI;
 // typedef struct RIPEMD160state_st RIPEMD160_CTX;
-// typedef struct X509_VERIFY_PARAM_st X509_VERIFY_PARAM;
+typedef ossl_X509_VERIFY_PARAM X509_VERIFY_PARAM;
 // typedef struct X509_algor_st X509_ALGOR;
 // typedef struct X509_crl_st X509_CRL;
 // typedef struct X509_extension_st X509_EXTENSION;
 // typedef struct X509_info_st X509_INFO;
-// typedef struct X509_name_entry_st X509_NAME_ENTRY;
-// typedef struct X509_name_st X509_NAME;
+typedef ossl_X509_NAME_ENTRY X509_NAME_ENTRY;
+typedef ossl_X509_NAME X509_NAME;
 // typedef struct X509_pubkey_st X509_PUBKEY;
 // typedef struct X509_req_st X509_REQ;
 // typedef struct X509_sig_st X509_SIG;
 // typedef struct bignum_ctx BN_CTX;
-// typedef struct bignum_st BIGNUM;
-// typedef struct bio_method_st BIO_METHOD;
-// typedef struct bio_st BIO;
+typedef ossl_BIGNUM BIGNUM;
+typedef struct bio_method_st BIO_METHOD;
+typedef ossl_BIO BIO;
 // typedef struct blake2b_state_st BLAKE2B_CTX;
-// typedef struct bn_gencb_st BN_GENCB;
+typedef ossl_BN_GENCB BN_GENCB;
 // typedef struct bn_mont_ctx_st BN_MONT_CTX;
 // typedef struct buf_mem_st BUF_MEM;
-// typedef struct cbb_st CBB;
-// typedef struct cbs_st CBS;
+typedef struct cbb_st CBB;
+typedef struct cbs_st CBS;
 // typedef struct cmac_ctx_st CMAC_CTX;
 // typedef struct conf_st CONF;
 // typedef struct conf_value_st CONF_VALUE;
-// typedef struct crypto_buffer_pool_st CRYPTO_BUFFER_POOL;
-// typedef struct crypto_buffer_st CRYPTO_BUFFER;
+typedef struct crypto_buffer_pool_st CRYPTO_BUFFER_POOL;
+typedef struct crypto_buffer_st CRYPTO_BUFFER;
 // typedef struct dh_st DH;
 // typedef struct dsa_st DSA;
-// typedef struct ec_group_st EC_GROUP;
-// typedef struct ec_key_st EC_KEY;
+typedef ossl_EC_GROUP EC_GROUP;
+typedef ossl_EC_KEY EC_KEY;
 // typedef struct ec_point_st EC_POINT;
 // typedef struct ecdsa_method_st ECDSA_METHOD;
 // typedef struct ecdsa_sig_st ECDSA_SIG;
-// typedef struct engine_st ENGINE;
-// typedef struct env_md_ctx_st EVP_MD_CTX;
-// typedef struct env_md_st EVP_MD;
+typedef ossl_ENGINE ENGINE;
+typedef ossl_EVP_MD_CTX EVP_MD_CTX;
+typedef ossl_EVP_MD EVP_MD;
 // typedef struct evp_aead_st EVP_AEAD;
 // typedef struct evp_aead_ctx_st EVP_AEAD_CTX;
-// typedef struct evp_cipher_ctx_st EVP_CIPHER_CTX;
-// typedef struct evp_cipher_st EVP_CIPHER;
+typedef ossl_EVP_CIPHER_CTX EVP_CIPHER_CTX;
+typedef ossl_EVP_CIPHER EVP_CIPHER;
 // typedef struct evp_encode_ctx_st EVP_ENCODE_CTX;
 // typedef struct evp_hpke_aead_st EVP_HPKE_AEAD;
 // typedef struct evp_hpke_ctx_st EVP_HPKE_CTX;
@@ -410,35 +414,35 @@
 // typedef struct evp_hpke_kem_st EVP_HPKE_KEM;
 // typedef struct evp_hpke_key_st EVP_HPKE_KEY;
 // typedef struct evp_pkey_asn1_method_st EVP_PKEY_ASN1_METHOD;
-// typedef struct evp_pkey_ctx_st EVP_PKEY_CTX;
+typedef ossl_EVP_PKEY_CTX EVP_PKEY_CTX;
 // typedef struct evp_pkey_method_st EVP_PKEY_METHOD;
-// typedef struct evp_pkey_st EVP_PKEY;
-// typedef struct hmac_ctx_st HMAC_CTX;
+typedef ossl_EVP_PKEY EVP_PKEY;
+typedef ossl_HMAC_CTX HMAC_CTX;
 // typedef struct md4_state_st MD4_CTX;
 // typedef struct md5_state_st MD5_CTX;
 // typedef struct ossl_init_settings_st OPENSSL_INIT_SETTINGS;
-// typedef struct pkcs12_st PKCS12;
+typedef struct ossl_PKCS12_st PKCS12;
 // typedef struct pkcs8_priv_key_info_st PKCS8_PRIV_KEY_INFO;
 // typedef struct private_key_st X509_PKEY;
 // typedef struct rand_meth_st RAND_METHOD;
 // typedef struct rc4_key_st RC4_KEY;
 // typedef struct rsa_meth_st RSA_METHOD;
 // typedef struct rsa_pss_params_st RSA_PSS_PARAMS;
-// typedef struct rsa_st RSA;
+typedef ossl_RSA RSA;
 // typedef struct sha256_state_st SHA256_CTX;
 // typedef struct sha512_state_st SHA512_CTX;
 // typedef struct sha_state_st SHA_CTX;
 // typedef struct spake2_ctx_st SPAKE2_CTX;
 // typedef struct srtp_protection_profile_st SRTP_PROTECTION_PROFILE;
-// typedef struct ssl_cipher_st SSL_CIPHER;
-// typedef struct ssl_ctx_st SSL_CTX;
-// typedef struct ssl_early_callback_ctx SSL_CLIENT_HELLO;
+typedef ossl_SSL_CIPHER SSL_CIPHER;
+typedef ossl_SSL_CTX SSL_CTX;
+typedef struct ssl_early_callback_ctx SSL_CLIENT_HELLO;
 // typedef struct ssl_ech_keys_st SSL_ECH_KEYS;
-// typedef struct ssl_method_st SSL_METHOD;
-// typedef struct ssl_private_key_method_st SSL_PRIVATE_KEY_METHOD;
+typedef ossl_SSL_METHOD SSL_METHOD;
+typedef struct ssl_private_key_method_st SSL_PRIVATE_KEY_METHOD;
 // typedef struct ssl_quic_method_st SSL_QUIC_METHOD;
-// typedef struct ssl_session_st SSL_SESSION;
-// typedef struct ssl_st SSL;
+typedef ossl_SSL_SESSION SSL_SESSION;
+typedef ossl_SSL SSL;
 // typedef struct ssl_ticket_aead_method_st SSL_TICKET_AEAD_METHOD;
 // typedef struct st_ERR_FNS ERR_FNS;
 // typedef struct trust_token_st TRUST_TOKEN;
@@ -451,110 +455,110 @@
 // typedef struct x509_lookup_method_st X509_LOOKUP_METHOD;
 // typedef struct x509_object_st X509_OBJECT;
 // typedef struct x509_revoked_st X509_REVOKED;
-// typedef struct x509_st X509;
-// typedef struct x509_store_ctx_st X509_STORE_CTX;
-// typedef struct x509_store_st X509_STORE;
+typedef ossl_X509 X509;
+typedef ossl_X509_STORE_CTX X509_STORE_CTX;
+typedef ossl_X509_STORE X509_STORE;
 // typedef struct x509_trust_st X509_TRUST;
 
 // typedef void *OPENSSL_BLOCK;
 
 
-// #if defined(__cplusplus)
-// }  // extern C
-// #elif !defined(BORINGSSL_NO_CXX)
-// #define BORINGSSL_NO_CXX
-// #endif
-
-// #if defined(BORINGSSL_PREFIX)
-// #define BSSL_NAMESPACE_BEGIN \
-//   namespace bssl {           \
-//   inline namespace BORINGSSL_PREFIX {
-// #define BSSL_NAMESPACE_END \
-//   }                        \
-//   }
-// #else
-// #define BSSL_NAMESPACE_BEGIN namespace bssl {
-// #define BSSL_NAMESPACE_END }
-// #endif
+#if defined(__cplusplus)
+}  // extern C
+#elif !defined(BORINGSSL_NO_CXX)
+#define BORINGSSL_NO_CXX
+#endif
+
+#if defined(BORINGSSL_PREFIX)
+#define BSSL_NAMESPACE_BEGIN \
+  namespace bssl {           \
+  inline namespace BORINGSSL_PREFIX {
+#define BSSL_NAMESPACE_END \
+  }                        \
+  }
+#else
+#define BSSL_NAMESPACE_BEGIN namespace bssl {
+#define BSSL_NAMESPACE_END }
+#endif
 
 // MSVC doesn't set __cplusplus to 201103 to indicate C++11 support (see
 // https://connect.microsoft.com/VisualStudio/feedback/details/763051/a-value-of-predefined-macro-cplusplus-is-still-199711l)
 // so MSVC is just assumed to support C++11.
-// #if !defined(BORINGSSL_NO_CXX) && __cplusplus < 201103L && !defined(_MSC_VER)
-// #define BORINGSSL_NO_CXX
-// #endif
+#if !defined(BORINGSSL_NO_CXX) && __cplusplus < 201103L && !defined(_MSC_VER)
+#define BORINGSSL_NO_CXX
+#endif
 
-// #if !defined(BORINGSSL_NO_CXX)
+#if !defined(BORINGSSL_NO_CXX)
 
-// extern "C++" {
+extern "C++" {
 
-// #include <memory>
+#include <memory>
 
 // STLPort, used by some Android consumers, not have std::unique_ptr.
-// #if defined(_STLPORT_VERSION)
-// #define BORINGSSL_NO_CXX
-// #endif
+#if defined(_STLPORT_VERSION)
+#define BORINGSSL_NO_CXX
+#endif
 
-// }  // extern C++
-// #endif  // !BORINGSSL_NO_CXX
+}  // extern C++
+#endif  // !BORINGSSL_NO_CXX
 
-// #if defined(BORINGSSL_NO_CXX)
+#if defined(BORINGSSL_NO_CXX)
 
-// #define BORINGSSL_MAKE_DELETER(type, deleter)
-// #define BORINGSSL_MAKE_UP_REF(type, up_ref_func)
+#define BORINGSSL_MAKE_DELETER(type, deleter)
+#define BORINGSSL_MAKE_UP_REF(type, up_ref_func)
 
-// #else
+#else
 
-// extern "C++" {
+extern "C++" {
 
-// BSSL_NAMESPACE_BEGIN
+BSSL_NAMESPACE_BEGIN
 
-// namespace internal {
+namespace internal {
 
 // The Enable parameter is ignored and only exists so specializations can use
 // SFINAE.
-// template <typename T, typename Enable = void>
-// struct DeleterImpl {};
-
-// template <typename T>
-// struct Deleter {
-//   void operator()(T *ptr) {
-//     // Rather than specialize Deleter for each type, we specialize
-//     // DeleterImpl. This allows bssl::UniquePtr<T> to be used while only
-//     // including base.h as long as the destructor is not emitted. This matches
-//     // std::unique_ptr's behavior on forward-declared types.
-//     //
-//     // DeleterImpl itself is specialized in the corresponding module's header
-//     // and must be included to release an object. If not included, the compiler
-//     // will error that DeleterImpl<T> does not have a method Free.
-//     DeleterImpl<T>::Free(ptr);
-//   }
-// };
-
-// template <typename T, typename CleanupRet, void (*init)(T *),
-//           CleanupRet (*cleanup)(T *)>
-// class StackAllocated {
-//  public:
-//   StackAllocated() { init(&ctx_); }
-//   ~StackAllocated() { cleanup(&ctx_); }
-
-//   StackAllocated(const StackAllocated &) = delete;
-//   StackAllocated& operator=(const StackAllocated &) = delete;
-
-//   T *get() { return &ctx_; }
-//   const T *get() const { return &ctx_; }
-
-//   T *operator->() { return &ctx_; }
-//   const T *operator->() const { return &ctx_; }
-
-//   void Reset() {
-//     cleanup(&ctx_);
-//     init(&ctx_);
-//   }
+template <typename T, typename Enable = void>
+struct DeleterImpl {};
 
-//  private:
-//   T ctx_;
-// };
+template <typename T>
+struct Deleter {
+  void operator()(T *ptr) {
+    // Rather than specialize Deleter for each type, we specialize
+    // DeleterImpl. This allows bssl::UniquePtr<T> to be used while only
+    // including base.h as long as the destructor is not emitted. This matches
+    // std::unique_ptr's behavior on forward-declared types.
+    //
+    // DeleterImpl itself is specialized in the corresponding module's header
+    // and must be included to release an object. If not included, the compiler
+    // will error that DeleterImpl<T> does not have a method Free.
+    DeleterImpl<T>::Free(ptr);
+  }
+};
+
+template <typename T, typename CleanupRet, void (*init)(T *),
+          CleanupRet (*cleanup)(T *)>
+class StackAllocated {
+ public:
+  StackAllocated() { init(&ctx_); }
+  ~StackAllocated() { cleanup(&ctx_); }
+
+  StackAllocated(const StackAllocated &) = delete;
+  StackAllocated& operator=(const StackAllocated &) = delete;
+
+  T *get() { return &ctx_; }
+  const T *get() const { return &ctx_; }
+
+  T *operator->() { return &ctx_; }
+  const T *operator->() const { return &ctx_; }
+
+  void Reset() {
+    cleanup(&ctx_);
+    init(&ctx_);
+  }
+
+ private:
+  T ctx_;
+};
 
 // template <typename T, typename CleanupRet, void (*init)(T *),
 //           CleanupRet (*cleanup)(T *), void (*move)(T *, T *)>
@@ -587,38 +591,38 @@
 //   T ctx_;
 // };
 
-// }  // namespace internal
+}  // namespace internal
 
-// #define BORINGSSL_MAKE_DELETER(type, deleter)     \
-//   namespace internal {                            \
-//   template <>                                     \
-//   struct DeleterImpl<type> {                      \
-//     static void Free(type *ptr) { deleter(ptr); } \
-//   };                                              \
-//   }
+#define BORINGSSL_MAKE_DELETER(type, deleter)     \
+  namespace internal {                            \
+  template <>                                     \
+  struct DeleterImpl<type> {                      \
+    static void Free(type *ptr) { deleter(ptr); } \
+  };                                              \
+  }
 
 // Holds ownership of heap-allocated BoringSSL structures. Sample usage:
 //   bssl::UniquePtr<RSA> rsa(RSA_new());
 //   bssl::UniquePtr<BIO> bio(BIO_new(BIO_s_mem()));
-// template <typename T>
-// using UniquePtr = std::unique_ptr<T, internal::Deleter<T>>;
+template <typename T>
+using UniquePtr = std::unique_ptr<T, internal::Deleter<T>>;
 
-// #define BORINGSSL_MAKE_UP_REF(type, up_ref_func)             \
-//   inline UniquePtr<type> UpRef(type *v) {                    \
-//     if (v != nullptr) {                                      \
-//       up_ref_func(v);                                        \
-//     }                                                        \
-//     return UniquePtr<type>(v);                               \
-//   }                                                          \
-//                                                              \
-//   inline UniquePtr<type> UpRef(const UniquePtr<type> &ptr) { \
-//     return UpRef(ptr.get());                                 \
-//   }
+#define BORINGSSL_MAKE_UP_REF(type, up_ref_func)             \
+  inline UniquePtr<type> UpRef(type *v) {                    \
+    if (v != nullptr) {                                      \
+      up_ref_func(v);                                        \
+    }                                                        \
+    return UniquePtr<type>(v);                               \
+  }                                                          \
+                                                             \
+  inline UniquePtr<type> UpRef(const UniquePtr<type> &ptr) { \
+    return UpRef(ptr.get());                                 \
+  }
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
+}  // extern C++
 
-// #endif  // !BORINGSSL_NO_CXX
+#endif  // !BORINGSSL_NO_CXX
 
-// #endif  // OPENSSL_HEADER_BASE_H
+#endif  // OPENSSL_HEADER_BASE_H
