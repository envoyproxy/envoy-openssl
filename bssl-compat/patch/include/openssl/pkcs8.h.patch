--- a/include/openssl/pkcs8.h
+++ b/include/openssl/pkcs8.h
@@ -54,16 +54,16 @@
  * Hudson (tjh@cryptsoft.com). */
 
 
-// #ifndef OPENSSL_HEADER_PKCS8_H
-// #define OPENSSL_HEADER_PKCS8_H
+#ifndef OPENSSL_HEADER_PKCS8_H
+#define OPENSSL_HEADER_PKCS8_H
 
-// #include <openssl/base.h>
-// #include <openssl/x509.h>
+#include <openssl/base.h>
+#include <openssl/x509.h>
 
 
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // PKCS8_encrypt serializes and encrypts a PKCS8_PRIV_KEY_INFO with PBES1 or
@@ -149,7 +149,7 @@
 //                                   size_t ber_len);
 
 // d2i_PKCS12_bio acts like |d2i_PKCS12| but reads from a |BIO|.
-// OPENSSL_EXPORT PKCS12* d2i_PKCS12_bio(BIO *bio, PKCS12 **out_p12);
+OPENSSL_EXPORT PKCS12* d2i_PKCS12_bio(BIO *bio, PKCS12 **out_p12);
 
 // d2i_PKCS12_fp acts like |d2i_PKCS12| but reads from a |FILE|.
 // OPENSSL_EXPORT PKCS12* d2i_PKCS12_fp(FILE *fp, PKCS12 **out_p12);
@@ -184,9 +184,9 @@
 // It returns one on success and zero on error.
 //
 // Use |PKCS12_get_key_and_certs| instead.
-// OPENSSL_EXPORT int PKCS12_parse(const PKCS12 *p12, const char *password,
-//                                 EVP_PKEY **out_pkey, X509 **out_cert,
-//                                 STACK_OF(X509) **out_ca_certs);
+OPENSSL_EXPORT int PKCS12_parse(const PKCS12 *p12, const char *password,
+                                EVP_PKEY **out_pkey, X509 **out_cert,
+                                STACK_OF(X509) **out_ca_certs);
 
 // PKCS12_verify_mac returns one if |password| is a valid password for |p12|
 // and zero otherwise. Since |PKCS12_parse| doesn't take a length parameter,
@@ -236,21 +236,21 @@
 // OPENSSL_EXPORT void PKCS12_free(PKCS12 *p12);
 
 
-// #if defined(__cplusplus)
-// }  // extern C
+#if defined(__cplusplus)
+}  // extern C
 
-// extern "C++" {
+extern "C++" {
 
-// BSSL_NAMESPACE_BEGIN
+BSSL_NAMESPACE_BEGIN
 
 // BORINGSSL_MAKE_DELETER(PKCS12, PKCS12_free)
 // BORINGSSL_MAKE_DELETER(PKCS8_PRIV_KEY_INFO, PKCS8_PRIV_KEY_INFO_free)
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
+}  // extern C++
 
-// #endif
+#endif
 
 #ifdef ossl_PKCS8_R_BAD_PKCS12_DATA
 #define PKCS8_R_BAD_PKCS12_DATA ossl_PKCS8_R_BAD_PKCS12_DATA
@@ -355,4 +355,4 @@
 #define PKCS8_R_AMBIGUOUS_FRIENDLY_NAME ossl_PKCS8_R_AMBIGUOUS_FRIENDLY_NAME
 #endif
 
-// #endif  // OPENSSL_HEADER_PKCS8_H
+#endif  // OPENSSL_HEADER_PKCS8_H
