--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -139,37 +139,38 @@
  * OTHERWISE.
  */
 
-// #ifndef OPENSSL_HEADER_SSL_H
-// #define OPENSSL_HEADER_SSL_H
+#ifndef OPENSSL_HEADER_SSL_H
+#define OPENSSL_HEADER_SSL_H
 
-// #include <openssl/base.h>
+#include <openssl/base.h>
 
-// #include <openssl/bio.h>
-// #include <openssl/buf.h>
-// #include <openssl/pem.h>
-// #include <openssl/span.h>
-// #include <openssl/ssl3.h>
-// #include <openssl/thread.h>
-// #include <openssl/tls1.h>
-// #include <openssl/x509.h>
-
-// #if !defined(OPENSSL_WINDOWS)
-// #include <sys/time.h>
-// #endif
+#include <openssl/stack.h>
+#include <openssl/bio.h>
+#include <openssl/buf.h>
+#include <openssl/pem.h>
+#include <openssl/span.h>
+#include <openssl/ssl3.h>
+#include <openssl/thread.h>
+#include <openssl/tls1.h>
+#include <openssl/x509.h>
+
+#if !defined(OPENSSL_WINDOWS)
+#include <sys/time.h>
+#endif
 
 // NGINX needs this #include. Consider revisiting this after NGINX 1.14.0 has
 // been out for a year or so (assuming that they fix it in that release.) See
 // https://boringssl-review.googlesource.com/c/boringssl/+/21664.
-// #include <openssl/hmac.h>
+#include <openssl/hmac.h>
 
 // Forward-declare struct timeval. On Windows, it is defined in winsock2.h and
 // Windows headers define too many macros to be included in public headers.
 // However, only a forward declaration is needed.
-// struct timeval;
+struct timeval;
 
-// #if defined(__cplusplus)
-// extern "C" {
-// #endif
+#if defined(__cplusplus)
+extern "C" {
+#endif
 
 
 // SSL implementation.
@@ -186,7 +187,7 @@
 // configuration may not be used.
 
 // TLS_method is the |SSL_METHOD| used for TLS connections.
-// OPENSSL_EXPORT const SSL_METHOD *TLS_method(void);
+OPENSSL_EXPORT const SSL_METHOD *TLS_method(void);
 
 // DTLS_method is the |SSL_METHOD| used for DTLS connections.
 // OPENSSL_EXPORT const SSL_METHOD *DTLS_method(void);
@@ -195,7 +196,7 @@
 // crypto/x509. All client connections created with |TLS_with_buffers_method|
 // will fail unless a certificate verifier is installed with
 // |SSL_set_custom_verify| or |SSL_CTX_set_custom_verify|.
-// OPENSSL_EXPORT const SSL_METHOD *TLS_with_buffers_method(void);
+OPENSSL_EXPORT const SSL_METHOD *TLS_with_buffers_method(void);
 
 // DTLS_with_buffers_method is like |DTLS_method|, but avoids all use of
 // crypto/x509.
@@ -203,13 +204,13 @@
 
 // SSL_CTX_new returns a newly-allocated |SSL_CTX| with default settings or NULL
 // on error.
-// OPENSSL_EXPORT SSL_CTX *SSL_CTX_new(const SSL_METHOD *method);
+OPENSSL_EXPORT SSL_CTX *SSL_CTX_new(const SSL_METHOD *method);
 
 // SSL_CTX_up_ref increments the reference count of |ctx|. It returns one.
-// OPENSSL_EXPORT int SSL_CTX_up_ref(SSL_CTX *ctx);
+OPENSSL_EXPORT int SSL_CTX_up_ref(SSL_CTX *ctx);
 
 // SSL_CTX_free releases memory associated with |ctx|.
-// OPENSSL_EXPORT void SSL_CTX_free(SSL_CTX *ctx);
+OPENSSL_EXPORT void SSL_CTX_free(SSL_CTX *ctx);
 
 
 // SSL connections.
@@ -224,25 +225,25 @@
 //
 // On creation, an |SSL| is not configured to be either a client or server. Call
 // |SSL_set_connect_state| or |SSL_set_accept_state| to set this.
-// OPENSSL_EXPORT SSL *SSL_new(SSL_CTX *ctx);
+OPENSSL_EXPORT SSL *SSL_new(SSL_CTX *ctx);
 
 // SSL_free releases memory associated with |ssl|.
-// OPENSSL_EXPORT void SSL_free(SSL *ssl);
+OPENSSL_EXPORT void SSL_free(SSL *ssl);
 
 // SSL_get_SSL_CTX returns the |SSL_CTX| associated with |ssl|. If
 // |SSL_set_SSL_CTX| is called, it returns the new |SSL_CTX|, not the initial
 // one.
-// OPENSSL_EXPORT SSL_CTX *SSL_get_SSL_CTX(const SSL *ssl);
+OPENSSL_EXPORT SSL_CTX *SSL_get_SSL_CTX(const SSL *ssl);
 
 // SSL_set_connect_state configures |ssl| to be a client.
-// OPENSSL_EXPORT void SSL_set_connect_state(SSL *ssl);
+OPENSSL_EXPORT void SSL_set_connect_state(SSL *ssl);
 
 // SSL_set_accept_state configures |ssl| to be a server.
 // OPENSSL_EXPORT void SSL_set_accept_state(SSL *ssl);
 
 // SSL_is_server returns one if |ssl| is configured as a server and zero
 // otherwise.
-// OPENSSL_EXPORT int SSL_is_server(const SSL *ssl);
+OPENSSL_EXPORT int SSL_is_server(const SSL *ssl);
 
 // SSL_is_dtls returns one if |ssl| is a DTLS connection and zero otherwise.
 // OPENSSL_EXPORT int SSL_is_dtls(const SSL *ssl);
@@ -272,14 +273,14 @@
 //
 // Note that, although this function and |SSL_set0_wbio| may be called on the
 // same |BIO|, each call takes a reference. Use |BIO_up_ref| to balance this.
-// OPENSSL_EXPORT void SSL_set0_rbio(SSL *ssl, BIO *rbio);
+OPENSSL_EXPORT void SSL_set0_rbio(SSL *ssl, BIO *rbio);
 
 // SSL_set0_wbio configures |ssl| to write to |wbio|. It takes ownership of
 // |wbio|.
 //
 // Note that, although this function and |SSL_set0_rbio| may be called on the
 // same |BIO|, each call takes a reference. Use |BIO_up_ref| to balance this.
-// OPENSSL_EXPORT void SSL_set0_wbio(SSL *ssl, BIO *wbio);
+OPENSSL_EXPORT void SSL_set0_wbio(SSL *ssl, BIO *wbio);
 
 // SSL_get_rbio returns the |BIO| that |ssl| reads from.
 // OPENSSL_EXPORT BIO *SSL_get_rbio(const SSL *ssl);
@@ -313,7 +314,7 @@
 // |fd|.
 //
 // On Windows, |fd| is cast to a |SOCKET| and used with Winsock APIs.
-// OPENSSL_EXPORT int SSL_set_fd(SSL *ssl, int fd);
+OPENSSL_EXPORT int SSL_set_fd(SSL *ssl, int fd);
 
 // SSL_set_rfd configures |ssl| to read from |fd|. It returns one on success and
 // zero on allocation error. The caller retains ownership of |fd|.
@@ -340,15 +341,15 @@
 //
 // TODO(davidben): Ensure 0 is only returned on transport EOF.
 // https://crbug.com/466303.
-// OPENSSL_EXPORT int SSL_do_handshake(SSL *ssl);
+OPENSSL_EXPORT int SSL_do_handshake(SSL *ssl);
 
 // SSL_connect configures |ssl| as a client, if unconfigured, and calls
 // |SSL_do_handshake|.
-// OPENSSL_EXPORT int SSL_connect(SSL *ssl);
+OPENSSL_EXPORT int SSL_connect(SSL *ssl);
 
 // SSL_accept configures |ssl| as a server, if unconfigured, and calls
 // |SSL_do_handshake|.
-// OPENSSL_EXPORT int SSL_accept(SSL *ssl);
+OPENSSL_EXPORT int SSL_accept(SSL *ssl);
 
 // SSL_read reads up to |num| bytes from |ssl| into |buf|. It implicitly runs
 // any pending handshakes, including renegotiations when enabled. On success, it
@@ -357,7 +358,7 @@
 //
 // TODO(davidben): Ensure 0 is only returned on transport EOF.
 // https://crbug.com/466303.
-// OPENSSL_EXPORT int SSL_read(SSL *ssl, void *buf, int num);
+OPENSSL_EXPORT int SSL_read(SSL *ssl, void *buf, int num);
 
 // SSL_peek behaves like |SSL_read| but does not consume any bytes returned.
 // OPENSSL_EXPORT int SSL_peek(SSL *ssl, void *buf, int num);
@@ -413,7 +414,7 @@
 //
 // TODO(davidben): Ensure 0 is only returned on transport EOF.
 // https://crbug.com/466303.
-// OPENSSL_EXPORT int SSL_write(SSL *ssl, const void *buf, int num);
+OPENSSL_EXPORT int SSL_write(SSL *ssl, const void *buf, int num);
 
 // SSL_KEY_UPDATE_REQUESTED indicates that the peer should reply to a KeyUpdate
 // message with its own, thus updating traffic secrets for both directions on
@@ -452,7 +453,7 @@
 // primarily used for uncommon protocols where the underlying transport is
 // reused after TLS completes. Additionally, DTLS uses an unordered transport
 // and is unordered, so the second stage is a no-op in DTLS.
-// OPENSSL_EXPORT int SSL_shutdown(SSL *ssl);
+OPENSSL_EXPORT int SSL_shutdown(SSL *ssl);
 
 // SSL_CTX_set_quiet_shutdown sets quiet shutdown on |ctx| to |mode|. If
 // enabled, |SSL_shutdown| will not send a close_notify alert or wait for one
@@ -475,7 +476,7 @@
 // SSL_get_error returns a |SSL_ERROR_*| value for the most recent operation on
 // |ssl|. It should be called after an operation failed to determine whether the
 // error was fatal and, if not, when to retry.
-// OPENSSL_EXPORT int SSL_get_error(const SSL *ssl, int ret_code);
+OPENSSL_EXPORT int SSL_get_error(const SSL *ssl, int ret_code);
 
 // SSL_ERROR_NONE indicates the operation succeeded.
 #ifdef ossl_SSL_ERROR_NONE
@@ -634,7 +635,7 @@
 // SSL_error_description returns a string representation of |err|, where |err|
 // is one of the |SSL_ERROR_*| constants returned by |SSL_get_error|, or NULL
 // if the value is unrecognized.
-// OPENSSL_EXPORT const char *SSL_error_description(int err);
+OPENSSL_EXPORT const char *SSL_error_description(int err);
 
 // SSL_set_mtu sets the |ssl|'s MTU in DTLS to |mtu|. It returns one on success
 // and zero on failure.
@@ -716,14 +717,14 @@
 // SSL_CTX_set_min_proto_version sets the minimum protocol version for |ctx| to
 // |version|. If |version| is zero, the default minimum version is used. It
 // returns one on success and zero if |version| is invalid.
-// OPENSSL_EXPORT int SSL_CTX_set_min_proto_version(SSL_CTX *ctx,
-//                                                  uint16_t version);
+OPENSSL_EXPORT int SSL_CTX_set_min_proto_version(SSL_CTX *ctx,
+                                                 uint16_t version);
 
 // SSL_CTX_set_max_proto_version sets the maximum protocol version for |ctx| to
 // |version|. If |version| is zero, the default maximum version is used. It
 // returns one on success and zero if |version| is invalid.
-// OPENSSL_EXPORT int SSL_CTX_set_max_proto_version(SSL_CTX *ctx,
-//                                                  uint16_t version);
+OPENSSL_EXPORT int SSL_CTX_set_max_proto_version(SSL_CTX *ctx,
+                                                 uint16_t version);
 
 // SSL_CTX_get_min_proto_version returns the minimum protocol version for |ctx|
 // OPENSSL_EXPORT uint16_t SSL_CTX_get_min_proto_version(const SSL_CTX *ctx);
@@ -928,7 +929,7 @@
 
 // SSL_CTX_use_certificate sets |ctx|'s leaf certificate to |x509|. It returns
 // one on success and zero on failure.
-// OPENSSL_EXPORT int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x509);
+OPENSSL_EXPORT int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x509);
 
 // SSL_use_certificate sets |ssl|'s leaf certificate to |x509|. It returns one
 // on success and zero on failure.
@@ -1074,10 +1075,10 @@
 // OPENSSL_EXPORT int SSL_check_private_key(const SSL *ssl);
 
 // SSL_CTX_get0_certificate returns |ctx|'s leaf certificate.
-// OPENSSL_EXPORT X509 *SSL_CTX_get0_certificate(const SSL_CTX *ctx);
+OPENSSL_EXPORT X509 *SSL_CTX_get0_certificate(const SSL_CTX *ctx);
 
 // SSL_get_certificate returns |ssl|'s leaf certificate.
-// OPENSSL_EXPORT X509 *SSL_get_certificate(const SSL *ssl);
+OPENSSL_EXPORT X509 *SSL_get_certificate(const SSL *ssl);
 
 // SSL_CTX_get0_privatekey returns |ctx|'s private key.
 // OPENSSL_EXPORT EVP_PKEY *SSL_CTX_get0_privatekey(const SSL_CTX *ctx);
@@ -1129,23 +1130,23 @@
 // SSL_set_ocsp_response sets the OCSP response that is sent to clients which
 // request it. It returns one on success and zero on error. The caller retains
 // ownership of |response|.
-// OPENSSL_EXPORT int SSL_set_ocsp_response(SSL *ssl,
-//                                          const uint8_t *response,
-//                                          size_t response_len);
+OPENSSL_EXPORT int SSL_set_ocsp_response(SSL *ssl,
+                                         const uint8_t *response,
+                                         size_t response_len);
 
 // SSL_SIGN_* are signature algorithm values as defined in TLS 1.3.
-// #define SSL_SIGN_RSA_PKCS1_SHA1 0x0201
-// #define SSL_SIGN_RSA_PKCS1_SHA256 0x0401
-// #define SSL_SIGN_RSA_PKCS1_SHA384 0x0501
-// #define SSL_SIGN_RSA_PKCS1_SHA512 0x0601
-// #define SSL_SIGN_ECDSA_SHA1 0x0203
-// #define SSL_SIGN_ECDSA_SECP256R1_SHA256 0x0403
-// #define SSL_SIGN_ECDSA_SECP384R1_SHA384 0x0503
-// #define SSL_SIGN_ECDSA_SECP521R1_SHA512 0x0603
-// #define SSL_SIGN_RSA_PSS_RSAE_SHA256 0x0804
-// #define SSL_SIGN_RSA_PSS_RSAE_SHA384 0x0805
-// #define SSL_SIGN_RSA_PSS_RSAE_SHA512 0x0806
-// #define SSL_SIGN_ED25519 0x0807
+#define SSL_SIGN_RSA_PKCS1_SHA1 0x0201
+#define SSL_SIGN_RSA_PKCS1_SHA256 0x0401
+#define SSL_SIGN_RSA_PKCS1_SHA384 0x0501
+#define SSL_SIGN_RSA_PKCS1_SHA512 0x0601
+#define SSL_SIGN_ECDSA_SHA1 0x0203
+#define SSL_SIGN_ECDSA_SECP256R1_SHA256 0x0403
+#define SSL_SIGN_ECDSA_SECP384R1_SHA384 0x0503
+#define SSL_SIGN_ECDSA_SECP521R1_SHA512 0x0603
+#define SSL_SIGN_RSA_PSS_RSAE_SHA256 0x0804
+#define SSL_SIGN_RSA_PSS_RSAE_SHA384 0x0805
+#define SSL_SIGN_RSA_PSS_RSAE_SHA512 0x0806
+#define SSL_SIGN_ED25519 0x0807
 
 // SSL_SIGN_RSA_PKCS1_MD5_SHA1 is an internal signature algorithm used to
 // specify raw RSASSA-PKCS1-v1_5 with an MD5/SHA-1 concatenation, as used in TLS
@@ -1254,8 +1255,8 @@
 // |type| parameter is one of the |SSL_FILETYPE_*| values and determines whether
 // the file's contents are read as PEM or DER.
 
-// #define SSL_FILETYPE_PEM 1
-// #define SSL_FILETYPE_ASN1 2
+#define SSL_FILETYPE_PEM ossl_SSL_FILETYPE_PEM
+#define SSL_FILETYPE_ASN1 ossl_SSL_FILETYPE_ASN1
 
 // OPENSSL_EXPORT int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx,
 //                                                   const char *file,
@@ -1268,8 +1269,8 @@
 // OPENSSL_EXPORT int SSL_use_certificate_file(SSL *ssl, const char *file,
 //                                             int type);
 
-// OPENSSL_EXPORT int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file,
-//                                                int type);
+OPENSSL_EXPORT int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file,
+                                               int type);
 // OPENSSL_EXPORT int SSL_use_PrivateKey_file(SSL *ssl, const char *file,
 //                                            int type);
 
@@ -1277,8 +1278,8 @@
 // reads the contents of |file| as a PEM-encoded leaf certificate followed
 // optionally by the certificate chain to send to the peer. It returns one on
 // success and zero on failure.
-// OPENSSL_EXPORT int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx,
-//                                                       const char *file);
+OPENSSL_EXPORT int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx,
+                                                      const char *file);
 
 // SSL_CTX_set_default_passwd_cb sets the password callback for PEM-based
 // convenience functions called on |ctx|.
@@ -1391,7 +1392,7 @@
 //
 // |SSL_CIPHER| objects represent cipher suites.
 
-// DEFINE_CONST_STACK_OF(SSL_CIPHER)
+DEFINE_CONST_STACK_OF(SSL_CIPHER)
 
 // SSL_get_cipher_by_value returns the structure representing a TLS cipher
 // suite based on its assigned number, or NULL if unknown. See
@@ -1445,7 +1446,7 @@
 
 // SSL_CIPHER_get_min_version returns the minimum protocol version required
 // for |cipher|.
-// OPENSSL_EXPORT uint16_t SSL_CIPHER_get_min_version(const SSL_CIPHER *cipher);
+OPENSSL_EXPORT uint16_t SSL_CIPHER_get_min_version(const SSL_CIPHER *cipher);
 
 // SSL_CIPHER_get_max_version returns the maximum protocol version that
 // supports |cipher|.
@@ -1458,7 +1459,7 @@
 // SSL_CIPHER_get_name returns the OpenSSL name of |cipher|. For example,
 // "ECDHE-RSA-AES128-GCM-SHA256". Callers are recommended to use
 // |SSL_CIPHER_standard_name| instead.
-// OPENSSL_EXPORT const char *SSL_CIPHER_get_name(const SSL_CIPHER *cipher);
+OPENSSL_EXPORT const char *SSL_CIPHER_get_name(const SSL_CIPHER *cipher);
 
 // SSL_CIPHER_get_kx_name returns a string that describes the key-exchange
 // method used by |cipher|. For example, "ECDHE_ECDSA". TLS 1.3 AEAD-only
@@ -1577,15 +1578,15 @@
 // SSL_CTX_set_strict_cipher_list configures the cipher list for |ctx|,
 // evaluating |str| as a cipher string and returning error if |str| contains
 // anything meaningless. It returns one on success and zero on failure.
-// OPENSSL_EXPORT int SSL_CTX_set_strict_cipher_list(SSL_CTX *ctx,
-//                                                   const char *str);
+OPENSSL_EXPORT int SSL_CTX_set_strict_cipher_list(SSL_CTX *ctx,
+                                                  const char *str);
 
 // SSL_CTX_set_cipher_list configures the cipher list for |ctx|, evaluating
 // |str| as a cipher string. It returns one on success and zero on failure.
 //
 // Prefer to use |SSL_CTX_set_strict_cipher_list|. This function tolerates
 // garbage inputs, unless an empty cipher list results.
-// OPENSSL_EXPORT int SSL_CTX_set_cipher_list(SSL_CTX *ctx, const char *str);
+OPENSSL_EXPORT int SSL_CTX_set_cipher_list(SSL_CTX *ctx, const char *str);
 
 // SSL_set_strict_cipher_list configures the cipher list for |ssl|, evaluating
 // |str| as a cipher string and returning error if |str| contains anything
@@ -1601,7 +1602,7 @@
 
 // SSL_CTX_get_ciphers returns the cipher list for |ctx|, in order of
 // preference.
-// OPENSSL_EXPORT STACK_OF(SSL_CIPHER) *SSL_CTX_get_ciphers(const SSL_CTX *ctx);
+OPENSSL_EXPORT STACK_OF(SSL_CIPHER) *SSL_CTX_get_ciphers(const SSL_CTX *ctx);
 
 // SSL_CTX_cipher_in_group returns one if the |i|th cipher (see
 // |SSL_CTX_get_ciphers|) is in the same equipreference group as the one
@@ -1609,7 +1610,7 @@
 // OPENSSL_EXPORT int SSL_CTX_cipher_in_group(const SSL_CTX *ctx, size_t i);
 
 // SSL_get_ciphers returns the cipher list for |ssl|, in order of preference.
-// OPENSSL_EXPORT STACK_OF(SSL_CIPHER) *SSL_get_ciphers(const SSL *ssl);
+OPENSSL_EXPORT STACK_OF(SSL_CIPHER) *SSL_get_ciphers(const SSL *ssl);
 
 
 // Connection information.
@@ -1655,7 +1656,7 @@
 // (if any) will be the leaf certificate. In constrast,
 // |SSL_get_peer_cert_chain| returns only the intermediate certificates if the
 // |ssl| is a server.
-// OPENSSL_EXPORT STACK_OF(X509) *SSL_get_peer_full_cert_chain(const SSL *ssl);
+OPENSSL_EXPORT STACK_OF(X509) *SSL_get_peer_full_cert_chain(const SSL *ssl);
 
 // SSL_get0_peer_certificates returns the peer's certificate chain, or NULL if
 // unavailable or the peer did not use certificates. This is the unverified list
@@ -1753,7 +1754,7 @@
 // SSL_SESSION_new returns a newly-allocated blank |SSL_SESSION| or NULL on
 // error. This may be useful when writing tests but should otherwise not be
 // used.
-// OPENSSL_EXPORT SSL_SESSION *SSL_SESSION_new(const SSL_CTX *ctx);
+OPENSSL_EXPORT SSL_SESSION *SSL_SESSION_new(const SSL_CTX *ctx);
 
 // SSL_SESSION_up_ref increments the reference count of |session| and returns
 // one.
@@ -1761,7 +1762,7 @@
 
 // SSL_SESSION_free decrements the reference count of |session|. If it reaches
 // zero, all data referenced by |session| and |session| itself are released.
-// OPENSSL_EXPORT void SSL_SESSION_free(SSL_SESSION *session);
+OPENSSL_EXPORT void SSL_SESSION_free(SSL_SESSION *session);
 
 // SSL_SESSION_to_bytes serializes |in| into a newly allocated buffer and sets
 // |*out_data| to that buffer and |*out_len| to its length. The caller takes
@@ -1793,8 +1794,8 @@
 // SSL_SESSION_set_protocol_version sets |session|'s TLS or DTLS version to
 // |version|. This may be useful when writing tests but should otherwise not be
 // used. It returns one on success and zero on error.
-// OPENSSL_EXPORT int SSL_SESSION_set_protocol_version(SSL_SESSION *session,
-//                                                     uint16_t version);
+OPENSSL_EXPORT int SSL_SESSION_set_protocol_version(SSL_SESSION *session,
+                                                    uint16_t version);
 
 // SSL_MAX_SSL_SESSION_ID_LENGTH is the maximum length of an SSL session ID.
 // #define SSL_MAX_SSL_SESSION_ID_LENGTH 32
@@ -1905,7 +1906,7 @@
 // only once. This prevents passive observers from correlating connections with
 // tickets. See RFC 8446, appendix C.4. If it returns zero, |session| cannot be
 // used without leaking a correlator.
-// OPENSSL_EXPORT int SSL_SESSION_should_be_single_use(const SSL_SESSION *session);
+OPENSSL_EXPORT int SSL_SESSION_should_be_single_use(const SSL_SESSION *session);
 
 // SSL_SESSION_is_resumable returns one if |session| is complete and contains a
 // session ID or ticket. It returns zero otherwise. Note this function does not
@@ -2449,18 +2450,18 @@
 // SSL_VERIFY_NONE, on a client, verifies the server certificate but does not
 // make errors fatal. The result may be checked with |SSL_get_verify_result|. On
 // a server it does not request a client certificate. This is the default.
-// #define SSL_VERIFY_NONE 0x00
+#define SSL_VERIFY_NONE ossl_SSL_VERIFY_NONE
 
 // SSL_VERIFY_PEER, on a client, makes server certificate errors fatal. On a
 // server it requests a client certificate and makes errors fatal. However,
 // anonymous clients are still allowed. See
 // |SSL_VERIFY_FAIL_IF_NO_PEER_CERT|.
-// #define SSL_VERIFY_PEER 0x01
+#define SSL_VERIFY_PEER ossl_SSL_VERIFY_PEER
 
 // SSL_VERIFY_FAIL_IF_NO_PEER_CERT configures a server to reject connections if
 // the client declines to send a certificate. This flag must be used together
 // with |SSL_VERIFY_PEER|, otherwise it won't work.
-// #define SSL_VERIFY_FAIL_IF_NO_PEER_CERT 0x02
+#define SSL_VERIFY_FAIL_IF_NO_PEER_CERT ossl_SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 
 // SSL_VERIFY_PEER_IF_NO_OBC configures a server to request a client certificate
 // if and only if Channel ID is not negotiated.
@@ -2473,8 +2474,8 @@
 //
 // The callback may use |SSL_get_ex_data_X509_STORE_CTX_idx| with
 // |X509_STORE_CTX_get_ex_data| to look up the |SSL| from |store_ctx|.
-// OPENSSL_EXPORT void SSL_CTX_set_verify(
-//     SSL_CTX *ctx, int mode, int (*callback)(int ok, X509_STORE_CTX *store_ctx));
+OPENSSL_EXPORT void SSL_CTX_set_verify(
+    SSL_CTX *ctx, int mode, int (*callback)(int ok, X509_STORE_CTX *store_ctx));
 
 // SSL_set_verify configures certificate verification behavior. |mode| is one of
 // the |SSL_VERIFY_*| values defined above. |callback|, if not NULL, is used to
@@ -2624,9 +2625,9 @@
 // See
 // https://www.openssl.org/docs/man1.1.0/man3/SSL_CTX_load_verify_locations.html
 // for documentation on the directory format.
-// OPENSSL_EXPORT int SSL_CTX_load_verify_locations(SSL_CTX *ctx,
-//                                                  const char *ca_file,
-//                                                  const char *ca_dir);
+OPENSSL_EXPORT int SSL_CTX_load_verify_locations(SSL_CTX *ctx,
+                                                 const char *ca_file,
+                                                 const char *ca_dir);
 
 // SSL_get_verify_result returns the result of certificate verification. It is
 // either |X509_V_OK| or a |X509_V_ERR_*| value.
@@ -2673,7 +2674,7 @@
 //
 // Call |SSL_get0_ocsp_response| to recover the OCSP response after the
 // handshake.
-// OPENSSL_EXPORT void SSL_enable_ocsp_stapling(SSL *ssl);
+OPENSSL_EXPORT void SSL_enable_ocsp_stapling(SSL *ssl);
 
 // SSL_CTX_enable_ocsp_stapling enables OCSP stapling on all client SSL objects
 // created from |ctx|.
@@ -2708,9 +2709,9 @@
 // preference list when verifying signatures from the peer's long-term key. It
 // returns one on zero on error. |prefs| should not include the internal-only
 // value |SSL_SIGN_RSA_PKCS1_MD5_SHA1|.
-// OPENSSL_EXPORT int SSL_CTX_set_verify_algorithm_prefs(SSL_CTX *ctx,
-//                                                       const uint16_t *prefs,
-//                                                       size_t num_prefs);
+OPENSSL_EXPORT int SSL_CTX_set_verify_algorithm_prefs(SSL_CTX *ctx,
+                                                      const uint16_t *prefs,
+                                                      size_t num_prefs);
 
 // SSL_set_verify_algorithm_prefs configures |ssl| to use |prefs| as the
 // preference list when verifying signatures from the peer's long-term key. It
@@ -2739,8 +2740,8 @@
 
 // SSL_CTX_set_client_CA_list sets |ctx|'s client certificate CA list to
 // |name_list|. It takes ownership of |name_list|.
-// OPENSSL_EXPORT void SSL_CTX_set_client_CA_list(SSL_CTX *ctx,
-//                                                STACK_OF(X509_NAME) *name_list);
+OPENSSL_EXPORT void SSL_CTX_set_client_CA_list(SSL_CTX *ctx,
+                                               STACK_OF(X509_NAME) *name_list);
 
 // SSL_set0_client_CAs sets |ssl|'s client certificate CA list to |name_list|,
 // which should contain DER-encoded distinguished names (RFC 5280). It takes
@@ -2800,8 +2801,8 @@
 // SSL_add_file_cert_subjects_to_stack behaves like |SSL_load_client_CA_file|
 // but appends the result to |out|. It returns one on success or zero on
 // error.
-// OPENSSL_EXPORT int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *out,
-//                                                        const char *file);
+OPENSSL_EXPORT int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *out,
+                                                       const char *file);
 
 // SSL_add_bio_cert_subjects_to_stack behaves like
 // |SSL_add_file_cert_subjects_to_stack| but reads from |bio|.
@@ -2868,7 +2869,7 @@
 // the session cache between different domains.
 //
 // TODO(davidben): Should other settings change after this call?
-// OPENSSL_EXPORT SSL_CTX *SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx);
+OPENSSL_EXPORT SSL_CTX *SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx);
 
 
 // Application-layer protocol negotiation.
@@ -4037,8 +4038,8 @@
 //                                                 CRYPTO_EX_dup *dup_unused,
 //                                                 CRYPTO_EX_free *free_func);
 
-// OPENSSL_EXPORT int SSL_CTX_set_ex_data(SSL_CTX *ctx, int idx, void *data);
-// OPENSSL_EXPORT void *SSL_CTX_get_ex_data(const SSL_CTX *ctx, int idx);
+OPENSSL_EXPORT int SSL_CTX_set_ex_data(SSL_CTX *ctx, int idx, void *data);
+OPENSSL_EXPORT void *SSL_CTX_get_ex_data(const SSL_CTX *ctx, int idx);
 // OPENSSL_EXPORT int SSL_CTX_get_ex_new_index(long argl, void *argp,
 //                                             CRYPTO_EX_unused *unused,
 //                                             CRYPTO_EX_dup *dup_unused,
@@ -4262,13 +4263,13 @@
 // such as HTTP/1.1, and not others, such as HTTP/2.
 // OPENSSL_EXPORT void SSL_set_shed_handshake_config(SSL *ssl, int enable);
 
-// enum ssl_renegotiate_mode_t BORINGSSL_ENUM_INT {
-//   ssl_renegotiate_never = 0,
-//   ssl_renegotiate_once,
-//   ssl_renegotiate_freely,
-//   ssl_renegotiate_ignore,
-//   ssl_renegotiate_explicit,
-// };
+enum ssl_renegotiate_mode_t BORINGSSL_ENUM_INT {
+  ssl_renegotiate_never = 0,
+  ssl_renegotiate_once,
+  ssl_renegotiate_freely,
+  ssl_renegotiate_ignore,
+  ssl_renegotiate_explicit,
+};
 
 // SSL_set_renegotiate_mode configures how |ssl|, a client, reacts to
 // renegotiation attempts by a server. If |ssl| is a server, peer-initiated
@@ -4297,8 +4298,8 @@
 //
 // There is no support in BoringSSL for initiating renegotiations as a client
 // or server.
-// OPENSSL_EXPORT void SSL_set_renegotiate_mode(SSL *ssl,
-//                                              enum ssl_renegotiate_mode_t mode);
+OPENSSL_EXPORT void SSL_set_renegotiate_mode(SSL *ssl,
+                                             enum ssl_renegotiate_mode_t mode);
 
 // SSL_renegotiate starts a deferred renegotiation on |ssl| if it was configured
 // with |ssl_renegotiate_explicit| and has a pending HelloRequest. It returns
@@ -4359,36 +4360,36 @@
 // callbacks that are called very early on during the server handshake. At this
 // point, much of the SSL* hasn't been filled out and only the ClientHello can
 // be depended on.
-// struct ssl_early_callback_ctx {
-//   SSL *ssl;
-//   const uint8_t *client_hello;
-//   size_t client_hello_len;
-//   uint16_t version;
-//   const uint8_t *random;
-//   size_t random_len;
-//   const uint8_t *session_id;
-//   size_t session_id_len;
-//   const uint8_t *cipher_suites;
-//   size_t cipher_suites_len;
-//   const uint8_t *compression_methods;
-//   size_t compression_methods_len;
-//   const uint8_t *extensions;
-//   size_t extensions_len;
-// } /* SSL_CLIENT_HELLO */;
+struct ssl_early_callback_ctx {
+  SSL *ssl;
+  const uint8_t *client_hello;
+  size_t client_hello_len;
+  uint16_t version;
+  const uint8_t *random;
+  size_t random_len;
+  const uint8_t *session_id;
+  size_t session_id_len;
+  const uint8_t *cipher_suites;
+  size_t cipher_suites_len;
+  const uint8_t *compression_methods;
+  size_t compression_methods_len;
+  const uint8_t *extensions;
+  size_t extensions_len;
+} /* SSL_CLIENT_HELLO */;
 
 // ssl_select_cert_result_t enumerates the possible results from selecting a
 // certificate with |select_certificate_cb|.
-// enum ssl_select_cert_result_t BORINGSSL_ENUM_INT {
-//   // ssl_select_cert_success indicates that the certificate selection was
-//   // successful.
-//   ssl_select_cert_success = 1,
-//   // ssl_select_cert_retry indicates that the operation could not be
-//   // immediately completed and must be reattempted at a later point.
-//   ssl_select_cert_retry = 0,
-//   // ssl_select_cert_error indicates that a fatal error occured and the
-//   // handshake should be terminated.
-//   ssl_select_cert_error = -1,
-// };
+enum ssl_select_cert_result_t BORINGSSL_ENUM_INT {
+  // ssl_select_cert_success indicates that the certificate selection was
+  // successful.
+  ssl_select_cert_success = 1,
+  // ssl_select_cert_retry indicates that the operation could not be
+  // immediately completed and must be reattempted at a later point.
+  ssl_select_cert_retry = 0,
+  // ssl_select_cert_error indicates that a fatal error occured and the
+  // handshake should be terminated.
+  ssl_select_cert_error = -1,
+};
 
 // SSL_early_callback_ctx_extension_get searches the extensions in
 // |client_hello| for an extension of the given type. If not found, it returns
@@ -4413,9 +4414,9 @@
 //
 // Note: The |SSL_CLIENT_HELLO| is only valid for the duration of the callback
 // and is not valid while the handshake is paused.
-// OPENSSL_EXPORT void SSL_CTX_set_select_certificate_cb(
-//     SSL_CTX *ctx,
-//     enum ssl_select_cert_result_t (*cb)(const SSL_CLIENT_HELLO *));
+OPENSSL_EXPORT void SSL_CTX_set_select_certificate_cb(
+    SSL_CTX *ctx,
+    enum ssl_select_cert_result_t (*cb)(const SSL_CLIENT_HELLO *));
 
 // SSL_CTX_set_dos_protection_cb sets a callback that is called once the
 // resumption decision for a ClientHello has been made. It can return one to
@@ -4665,8 +4666,8 @@
 
 // These client- and server-specific methods call their corresponding generic
 // methods.
-// OPENSSL_EXPORT const SSL_METHOD *TLS_server_method(void);
-// OPENSSL_EXPORT const SSL_METHOD *TLS_client_method(void);
+OPENSSL_EXPORT const SSL_METHOD *TLS_server_method(void);
+OPENSSL_EXPORT const SSL_METHOD *TLS_client_method(void);
 // OPENSSL_EXPORT const SSL_METHOD *SSLv23_server_method(void);
 // OPENSSL_EXPORT const SSL_METHOD *SSLv23_client_method(void);
 // OPENSSL_EXPORT const SSL_METHOD *TLSv1_server_method(void);
@@ -5462,21 +5463,21 @@
 // #endif // !defined(BORINGSSL_PREFIX)
 
 
-// #if defined(__cplusplus)
-// }  // extern C
+#if defined(__cplusplus)
+}  // extern C
 
-// #if !defined(BORINGSSL_NO_CXX)
+#if !defined(BORINGSSL_NO_CXX)
 
-// extern "C++" {
+extern "C++" {
 
-// BSSL_NAMESPACE_BEGIN
+BSSL_NAMESPACE_BEGIN
 
-// BORINGSSL_MAKE_DELETER(SSL, SSL_free)
-// BORINGSSL_MAKE_DELETER(SSL_CTX, SSL_CTX_free)
+BORINGSSL_MAKE_DELETER(SSL, SSL_free)
+BORINGSSL_MAKE_DELETER(SSL_CTX, SSL_CTX_free)
 // BORINGSSL_MAKE_UP_REF(SSL_CTX, SSL_CTX_up_ref)
 // BORINGSSL_MAKE_DELETER(SSL_ECH_KEYS, SSL_ECH_KEYS_free)
 // BORINGSSL_MAKE_UP_REF(SSL_ECH_KEYS, SSL_ECH_KEYS_up_ref)
-// BORINGSSL_MAKE_DELETER(SSL_SESSION, SSL_SESSION_free)
+BORINGSSL_MAKE_DELETER(SSL_SESSION, SSL_SESSION_free)
 // BORINGSSL_MAKE_UP_REF(SSL_SESSION, SSL_SESSION_up_ref)
 
 // enum class OpenRecordResult {
@@ -5593,13 +5594,13 @@
 //     Span<const uint8_t> *out_write_traffic_secret);
 
 
-// BSSL_NAMESPACE_END
+BSSL_NAMESPACE_END
 
-// }  // extern C++
+}  // extern C++
 
-// #endif  // !defined(BORINGSSL_NO_CXX)
+#endif  // !defined(BORINGSSL_NO_CXX)
 
-// #endif
+#endif
 
 #ifdef ossl_SSL_R_APP_DATA_IN_HANDSHAKE
 #define SSL_R_APP_DATA_IN_HANDSHAKE ossl_SSL_R_APP_DATA_IN_HANDSHAKE
@@ -6367,4 +6368,4 @@
 #define SSL_R_TLSV1_ALERT_ECH_REQUIRED ossl_SSL_R_TLSV1_ALERT_ECH_REQUIRED
 #endif
 
-// #endif  // OPENSSL_HEADER_SSL_H
+#endif  // OPENSSL_HEADER_SSL_H
