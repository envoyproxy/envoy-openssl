--- boringssl/include/openssl/ssl.h	2023-04-14 11:01:54.988050630 +0100
+++ include/openssl/ssl.h	2023-04-19 18:32:41.669734754 +0100
@@ -478,11 +478,11 @@
 OPENSSL_EXPORT int SSL_get_error(const SSL *ssl, int ret_code);
 
 // SSL_ERROR_NONE indicates the operation succeeded.
-#define SSL_ERROR_NONE 0
+#define SSL_ERROR_NONE ossl_SSL_ERROR_NONE
 
 // SSL_ERROR_SSL indicates the operation failed within the library. The caller
 // may inspect the error queue for more information.
-#define SSL_ERROR_SSL 1
+#define SSL_ERROR_SSL ossl_SSL_ERROR_SSL
 
 // SSL_ERROR_WANT_READ indicates the operation failed attempting to read from
 // the transport. The caller may retry the operation when the transport is ready
@@ -491,12 +491,12 @@
 // If signaled by a DTLS handshake, the caller must also call
 // |DTLSv1_get_timeout| and |DTLSv1_handle_timeout| as appropriate. See
 // |SSL_do_handshake|.
-#define SSL_ERROR_WANT_READ 2
+#define SSL_ERROR_WANT_READ ossl_SSL_ERROR_WANT_READ
 
 // SSL_ERROR_WANT_WRITE indicates the operation failed attempting to write to
 // the transport. The caller may retry the operation when the transport is ready
 // for writing.
-#define SSL_ERROR_WANT_WRITE 3
+#define SSL_ERROR_WANT_WRITE ossl_SSL_ERROR_WANT_WRITE
 
 // SSL_ERROR_WANT_X509_LOOKUP indicates the operation failed in calling the
 // |cert_cb| or |client_cert_cb|. The caller may retry the operation when the
@@ -504,50 +504,50 @@
 // externally.
 //
 // See also |SSL_CTX_set_cert_cb| and |SSL_CTX_set_client_cert_cb|.
-#define SSL_ERROR_WANT_X509_LOOKUP 4
+#define SSL_ERROR_WANT_X509_LOOKUP ossl_SSL_ERROR_WANT_X509_LOOKUP
 
 // SSL_ERROR_SYSCALL indicates the operation failed externally to the library.
 // The caller should consult the system-specific error mechanism. This is
 // typically |errno| but may be something custom if using a custom |BIO|. It
 // may also be signaled if the transport returned EOF, in which case the
 // operation's return value will be zero.
-#define SSL_ERROR_SYSCALL 5
+#define SSL_ERROR_SYSCALL ossl_SSL_ERROR_SYSCALL
 
 // SSL_ERROR_ZERO_RETURN indicates the operation failed because the connection
 // was cleanly shut down with a close_notify alert.
-#define SSL_ERROR_ZERO_RETURN 6
+#define SSL_ERROR_ZERO_RETURN ossl_SSL_ERROR_ZERO_RETURN
 
 // SSL_ERROR_WANT_CONNECT indicates the operation failed attempting to connect
 // the transport (the |BIO| signaled |BIO_RR_CONNECT|). The caller may retry the
 // operation when the transport is ready.
-#define SSL_ERROR_WANT_CONNECT 7
+#define SSL_ERROR_WANT_CONNECT ossl_SSL_ERROR_WANT_CONNECT
 
 // SSL_ERROR_WANT_ACCEPT indicates the operation failed attempting to accept a
 // connection from the transport (the |BIO| signaled |BIO_RR_ACCEPT|). The
 // caller may retry the operation when the transport is ready.
 //
 // TODO(davidben): Remove this. It's used by accept BIOs which are bizarre.
-#define SSL_ERROR_WANT_ACCEPT 8
+#define SSL_ERROR_WANT_ACCEPT ossl_SSL_ERROR_WANT_ACCEPT
 
 // SSL_ERROR_WANT_CHANNEL_ID_LOOKUP is never used.
 //
 // TODO(davidben): Remove this. Some callers reference it when stringifying
 // errors. They should use |SSL_error_description| instead.
-#define SSL_ERROR_WANT_CHANNEL_ID_LOOKUP 9
+//#define SSL_ERROR_WANT_CHANNEL_ID_LOOKUP
 
 // SSL_ERROR_PENDING_SESSION indicates the operation failed because the session
 // lookup callback indicated the session was unavailable. The caller may retry
 // the operation when lookup has completed.
 //
 // See also |SSL_CTX_sess_set_get_cb| and |SSL_magic_pending_session_ptr|.
-#define SSL_ERROR_PENDING_SESSION 11
+//#define SSL_ERROR_PENDING_SESSION
 
 // SSL_ERROR_PENDING_CERTIFICATE indicates the operation failed because the
 // early callback indicated certificate lookup was incomplete. The caller may
 // retry the operation when lookup has completed.
 //
 // See also |SSL_CTX_set_select_certificate_cb|.
-#define SSL_ERROR_PENDING_CERTIFICATE 12
+//#define SSL_ERROR_PENDING_CERTIFICATE
 
 // SSL_ERROR_WANT_PRIVATE_KEY_OPERATION indicates the operation failed because
 // a private key operation was unfinished. The caller may retry the operation
@@ -555,41 +555,41 @@
 //
 // See also |SSL_set_private_key_method| and
 // |SSL_CTX_set_private_key_method|.
-#define SSL_ERROR_WANT_PRIVATE_KEY_OPERATION 13
+//#define SSL_ERROR_WANT_PRIVATE_KEY_OPERATION
 
 // SSL_ERROR_PENDING_TICKET indicates that a ticket decryption is pending. The
 // caller may retry the operation when the decryption is ready.
 //
 // See also |SSL_CTX_set_ticket_aead_method|.
-#define SSL_ERROR_PENDING_TICKET 14
+//#define SSL_ERROR_PENDING_TICKET
 
 // SSL_ERROR_EARLY_DATA_REJECTED indicates that early data was rejected. The
 // caller should treat this as a connection failure and retry any operations
 // associated with the rejected early data. |SSL_reset_early_data_reject| may be
 // used to reuse the underlying connection for the retry.
-#define SSL_ERROR_EARLY_DATA_REJECTED 15
+//#define SSL_ERROR_EARLY_DATA_REJECTED
 
 // SSL_ERROR_WANT_CERTIFICATE_VERIFY indicates the operation failed because
 // certificate verification was incomplete. The caller may retry the operation
 // when certificate verification is complete.
 //
 // See also |SSL_CTX_set_custom_verify|.
-#define SSL_ERROR_WANT_CERTIFICATE_VERIFY 16
+//#define SSL_ERROR_WANT_CERTIFICATE_VERIFY
 
-#define SSL_ERROR_HANDOFF 17
-#define SSL_ERROR_HANDBACK 18
+//#define SSL_ERROR_HANDOFF
+//#define SSL_ERROR_HANDBACK
 
 // SSL_ERROR_WANT_RENEGOTIATE indicates the operation is pending a response to
 // a renegotiation request from the server. The caller may call
 // |SSL_renegotiate| to schedule a renegotiation and retry the operation.
 //
 // See also |ssl_renegotiate_explicit|.
-#define SSL_ERROR_WANT_RENEGOTIATE 19
+//#define SSL_ERROR_WANT_RENEGOTIATE
 
 // SSL_ERROR_HANDSHAKE_HINTS_READY indicates the handshake has progressed enough
 // for |SSL_serialize_handshake_hints| to be called. See also
 // |SSL_request_handshake_hints|.
-#define SSL_ERROR_HANDSHAKE_HINTS_READY 20
+//#define SSL_ERROR_HANDSHAKE_HINTS_READY
 
 // SSL_error_description returns a string representation of |err|, where |err|
 // is one of the |SSL_ERROR_*| constants returned by |SSL_get_error|, or NULL
@@ -1182,8 +1182,8 @@
 // |type| parameter is one of the |SSL_FILETYPE_*| values and determines whether
 // the file's contents are read as PEM or DER.
 
-#define SSL_FILETYPE_PEM 1
-#define SSL_FILETYPE_ASN1 2
+#define SSL_FILETYPE_PEM ossl_SSL_FILETYPE_PEM
+#define SSL_FILETYPE_ASN1 ossl_SSL_FILETYPE_ASN1
 
 OPENSSL_EXPORT int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx,
                                                   const char *file,
@@ -2377,22 +2377,22 @@
 // SSL_VERIFY_NONE, on a client, verifies the server certificate but does not
 // make errors fatal. The result may be checked with |SSL_get_verify_result|. On
 // a server it does not request a client certificate. This is the default.
-#define SSL_VERIFY_NONE 0x00
+#define SSL_VERIFY_NONE ossl_SSL_VERIFY_NONE
 
 // SSL_VERIFY_PEER, on a client, makes server certificate errors fatal. On a
 // server it requests a client certificate and makes errors fatal. However,
 // anonymous clients are still allowed. See
 // |SSL_VERIFY_FAIL_IF_NO_PEER_CERT|.
-#define SSL_VERIFY_PEER 0x01
+#define SSL_VERIFY_PEER ossl_SSL_VERIFY_PEER
 
 // SSL_VERIFY_FAIL_IF_NO_PEER_CERT configures a server to reject connections if
 // the client declines to send a certificate. This flag must be used together
 // with |SSL_VERIFY_PEER|, otherwise it won't work.
-#define SSL_VERIFY_FAIL_IF_NO_PEER_CERT 0x02
+#define SSL_VERIFY_FAIL_IF_NO_PEER_CERT ossl_SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 
 // SSL_VERIFY_PEER_IF_NO_OBC configures a server to request a client certificate
 // if and only if Channel ID is not negotiated.
-#define SSL_VERIFY_PEER_IF_NO_OBC 0x04
+// #define SSL_VERIFY_PEER_IF_NO_OBC 0x04 // No direct OpenSSL equivalent
 
 // SSL_CTX_set_verify configures certificate verification behavior. |mode| is
 // one of the |SSL_VERIFY_*| values defined above. |callback|, if not NULL, is
